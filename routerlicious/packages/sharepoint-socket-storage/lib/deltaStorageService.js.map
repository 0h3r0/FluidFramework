{"version":3,"file":"deltaStorageService.js","sourceRoot":"","sources":["../src/deltaStorageService.ts"],"names":[],"mappings":";;;;;;;;AACA,qDAAqD;AACrD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,KAAK,WAAW,MAAM,aAAa,CAAC;AAG3C;;GAEG;AACH,MAAM,OAAO,2BAA2B;IACpC,YACY,QAAgB,EAChB,EAAU,EACV,KAAa,EACb,cAAwC;QAHxC,aAAQ,GAAR,QAAQ,CAAQ;QAChB,OAAE,GAAF,EAAE,CAAQ;QACV,UAAK,GAAL,KAAK,CAAQ;QACb,mBAAc,GAAd,cAAc,CAA0B;IACpD,CAAC;IAED,2CAA2C;IACpC,GAAG,CAAC,IAAa,EAAE,EAAW;QACjC,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACjF,CAAC;CACJ;AAED;;GAEG;AACH,MAAM,OAAO,6BAA6B;IACtC,YAAoB,YAAoB;QAApB,iBAAY,GAAZ,YAAY,CAAQ;IACxC,CAAC;IAEY,GAAG,CACZ,QAAgB,EAChB,EAAU,EACV,KAAa,EACb,IAAa,EACb,EAAW;;YACX,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC/C,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAI,KAAK,EAAE;gBACP,OAAO,GAAG;oBACN,aAAa,EAAE,UAAU,IAAI,MAAM,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE;iBACpD,CAAC;aACL;YACD,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,GAAG,CAAqB,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;YAC5E,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YAC9B,MAAM,aAAa,GAAoC,EAAE,CAAC;YAE1D,sFAAsF;YACtF,iFAAiF;YACjF,+DAA+D;YAC/D,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;gBACjC,GAA8B,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;oBAC3C,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;gBACH,OAAO,aAAa,CAAC;aACxB;iBAAM;gBACH,OAAO,GAAsC,CAAC;aACjD;QACL,CAAC;KAAA;IAEM,YAAY,CACf,IAAa,EACb,EAAW;QACX,IAAI,YAAoB,CAAC;QACzB,MAAM,WAAW,GAAG,qBAAqB,IAAI,0BAA0B,EAAE,EAAE,CAAC;QAC5E,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;QAC7D,YAAY,GAAG,GAAG,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE,CAAC;QAEhD,OAAO,YAAY,CAAC;IACxB,CAAC;CACJ","sourcesContent":["import * as api from \"@prague/runtime-definitions\";\n// tslint:disable-next-line:match-default-export-name\nimport axios from \"axios\";\nimport * as querystring from \"querystring\";\nimport { IDeltaFeedResponse, ISequencedDocumentOp } from \"./sharepointContracts\";\n\n/**\n * Storage service limited to only being able to fetch documents for a specific document\n */\nexport class DocumentDeltaStorageService implements api.IDocumentDeltaStorageService {\n    constructor(\n        private tenantId: string,\n        private id: string,\n        private token: string,\n        private storageService: api.IDeltaStorageService) {\n    }\n\n    /* tslint:disable:promise-function-async */\n    public get(from?: number, to?: number): Promise<api.ISequencedDocumentMessage[]> {\n        return this.storageService.get(this.tenantId, this.id, this.token, from, to);\n    }\n}\n\n/**\n * Provides access to the sharepoint delta storage\n */\nexport class SharepointDeltaStorageService implements api.IDeltaStorageService {\n    constructor(private deltaFeedUrl: string) {\n    }\n\n    public async get(\n        tenantId: string,\n        id: string,\n        token: string,\n        from?: number,\n        to?: number): Promise<api.ISequencedDocumentMessage[]> {\n        const requestUrl = this.constructUrl(from, to);\n        let headers = null;\n        if (token) {\n            headers = {\n                Authorization: `Bearer ${new Buffer(`${token}`)}`,\n            };\n        }\n        const result = await axios.get<IDeltaFeedResponse>(requestUrl, { headers });\n        const ops = result.data.value;\n        const sequencedMsgs: api.ISequencedDocumentMessage[] = [];\n\n        // TODO: Having to copy the \"op\" property on each element of the array is undesirable.\n        // SPO is looking into updating this layer of the envelope to match routerlicious\n        // The logic below takes care of n/n-1 when that change happens\n        if (ops.length > 0 && \"op\" in ops[0]) {\n            (ops as ISequencedDocumentOp[]).forEach((op) => {\n                sequencedMsgs.push(op.op);\n            });\n            return sequencedMsgs;\n        } else {\n            return ops as api.ISequencedDocumentMessage[];\n        }\n    }\n\n    public constructUrl(\n        from?: number,\n        to?: number): string {\n        let deltaFeedUrl: string;\n        const queryFilter = `sequenceNumber ge ${from} and sequenceNumber le ${to}`;\n        const query = querystring.stringify({ filter: queryFilter });\n        deltaFeedUrl = `${this.deltaFeedUrl}?$${query}`;\n\n        return deltaFeedUrl;\n    }\n}\n"]}