{"version":3,"file":"testSharepointDeltStorage.js","sourceRoot":"","sources":["../../src/test/testSharepointDeltStorage.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,6BAA6B,EAAE,MAAM,wBAAwB,CAAC;AAEvE,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACpC,IAAI,qBAAoD,CAAC;IACzD,MAAM,oBAAoB,GAAW,4BAA4B,CAAC;IAClE,MAAM,wBAAwB,GAAW,2CAA2C,CAAC;IACrF,MAAM,yBAAyB,GAAQ;QACnC,QAAQ,EAAE;YACR;gBACE,QAAQ,EAAE,eAAe;gBACzB,oBAAoB,EAAE,EAAE;gBACxB,QAAQ,EAAE,IAAI;gBACd,qBAAqB,EAAE,CAAC;gBACxB,uBAAuB,EAAE,CAAC;gBAC1B,cAAc,EAAE,CAAC;gBACjB,IAAI,EAAE,EAAE;gBACR,IAAI,EAAE;oBACJ,EAAE,EAAE,gBAAgB;iBACrB;aACF;YACD;gBACE,QAAQ,EAAE,eAAe;gBACzB,oBAAoB,EAAE,EAAE;gBACxB,QAAQ,EAAE,IAAI;gBACd,qBAAqB,EAAE,CAAC;gBACxB,uBAAuB,EAAE,CAAC;gBAC1B,cAAc,EAAE,CAAC;gBACjB,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE;oBACJ,EAAE,EAAE,gBAAgB;iBACrB;aACF;SACF;KACF,CAAC;IAEJ,MAAM,CAAC,GAAG,EAAE;QACR,MAAM,mBAAmB,GAAW,GAAG,oBAAoB,GAAG,wBAAwB,EAAE,CAAC;QACzF,qBAAqB,GAAG,IAAI,6BAA6B,CAAC,mBAAmB,CAAC,CAAC;QAC/E,IAAI,CAAC,oBAAoB,CAAC;aACvB,GAAG,CAAC,wBAAwB,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC;aACX,KAAK,CAAC,GAAG,EAAE,yBAAyB,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,GAAG,EAAE;QAET,+FAA+F;QAC/F,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACrD,MAAM,cAAc,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,2CAA2C;QAC3C,MAAM,gBAAgB,GAAG,qIAAqI,CAAC;QAC/J,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,gBAAgB,EAAE,0CAA0C,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAS,EAAE;QAClE,MAAM,uBAAuB,GAAG,MAAM,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACxF,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC,EAAE,qDAAqD,CAAC,CAAC;QACvG,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,EACpD,4DAA4D,CAAC,CAAC;QACnE,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,EACpD,6DAA6D,CAAC,CAAC;QACpE,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,EAC/C,qDAAqD,CAAC,CAAC;IAChE,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import * as assert from \"assert\";\nimport * as nock from \"nock\";\nimport { SharepointDeltaStorageService } from \"../deltaStorageService\";\n\ndescribe(\"SharepointDeltaStorage\", () => {\n    let spoDeltStorageService: SharepointDeltaStorageService;\n    const deltaStorageBasePath: string = \"https://msft-my.spoppe.com\";\n    const deltaStorageRelativePath: string = \"/drives/testdrive/items/testitem/opStream\";\n    const expectedDeltaFeedResponse: any = {\n        opStream: [\n          {\n            clientId: \"present-place\",\n            clientSequenceNumber: 71,\n            contents: null,\n            minimumSequenceNumber: 1,\n            referenceSequenceNumber: 1,\n            sequenceNumber: 1,\n            text: \"\",\n            user: {\n              id: \"Unruffled Bose\",\n            },\n          },\n          {\n            clientId: \"present-place\",\n            clientSequenceNumber: 71,\n            contents: null,\n            minimumSequenceNumber: 1,\n            referenceSequenceNumber: 1,\n            sequenceNumber: 2,\n            type: \"noop\",\n            user: {\n              id: \"Unruffled Bose\",\n            },\n          },\n        ],\n      };\n\n    before(() => {\n        const testDeltaStorageUrl: string = `${deltaStorageBasePath}${deltaStorageRelativePath}`;\n        spoDeltStorageService = new SharepointDeltaStorageService(testDeltaStorageUrl);\n        nock(deltaStorageBasePath)\n          .get(deltaStorageRelativePath)\n          .query(true)\n          .reply(200, expectedDeltaFeedResponse);\n    });\n\n    after(() => {\n\n      // clean up the nock's interceptor list and restore back to unmocked behavior for http requests\n      nock.cleanAll();\n      nock.restore();\n    });\n\n    it(\"Should build the correct sharepoint delta url\", () => {\n        const actualDeltaUrl = spoDeltStorageService.constructUrl(2, 8);\n        // tslint:disable-next-line:max-line-length\n        const expectedDeltaUrl = `https://msft-my.spoppe.com/drives/testdrive/items/testitem/opStream?$filter=sequenceNumber%20ge%202%20and%20sequenceNumber%20le%208`;\n        assert.equal(actualDeltaUrl, expectedDeltaUrl, \"The constructed SPO delta url is invalid\");\n    });\n\n    it(\"Should deserialize the delta feed response correctly\", async () => {\n        const actualDeltaFeedResponse = await spoDeltStorageService.get(null, null, null, 2, 8);\n        assert.equal(actualDeltaFeedResponse.length, 2, \"Deseralized feed response is not of expected length\");\n        assert.equal(actualDeltaFeedResponse[0].sequenceNumber, 1,\n             \"First element of feed response has invalid sequence number\");\n        assert.equal(actualDeltaFeedResponse[1].sequenceNumber, 2,\n             \"Second element of feed response has invalid sequence number\");\n        assert.equal(actualDeltaFeedResponse[1].type, \"noop\",\n             \"Second element of feed response has invalid op type\");\n    });\n  });\n"]}