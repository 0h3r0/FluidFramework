{"version":3,"file":"testSharepointDeltaStorage.js","sourceRoot":"","sources":["../../src/test/testSharepointDeltaStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport * as nock from \"nock\";\nimport { SharepointDeltaStorageService } from \"../deltaStorageService\";\n\ndescribe(\"SharepointDeltaStorageService\", () => {\n  let spoDeltaStorageService: SharepointDeltaStorageService;\n  const deltaStorageBasePath: string = \"https://msft-my.spoppe.com\";\n  const deltaStorageRelativePath: string = \"/drives/testdrive/items/testitem/opStream\";\n\n  const testDeltaStorageUrl: string = \"https://msft-my.spoppe.com/drives/testdrive/items/testitem/opStream\";\n  spoDeltaStorageService = new SharepointDeltaStorageService(testDeltaStorageUrl);\n\n  it(\"Should build the correct sharepoint delta url\", () => {\n    const actualDeltaUrl = spoDeltaStorageService.constructUrl(2, 8);\n    // tslint:disable-next-line:max-line-length\n    const expectedDeltaUrl = `https://msft-my.spoppe.com/drives/testdrive/items/testitem/opStream?$filter=sequenceNumber%20ge%202%20and%20sequenceNumber%20le%208`;\n    assert.equal(actualDeltaUrl, expectedDeltaUrl, \"The constructed SPO delta url is invalid\");\n    });\n\n  describe(\"Get Returns Response With Op Envelope\", () => {\n      const expectedDeltaFeedResponse: any = {\n        value: [\n          {\n            op: {\n              clientId: \"present-place\",\n              clientSequenceNumber: 71,\n              contents: null,\n              minimumSequenceNumber: 1,\n              referenceSequenceNumber: 1,\n              sequenceNumber: 1,\n              text: \"\",\n              user: {\n                id: \"Unruffled Bose\",\n              },\n            },\n            sequenceNumber: 1,\n          },\n          {\n            op: {\n              clientId: \"present-place\",\n              clientSequenceNumber: 71,\n              contents: null,\n              minimumSequenceNumber: 1,\n              referenceSequenceNumber: 1,\n              sequenceNumber: 2,\n              type: \"noop\",\n              user: {\n                id: \"Unruffled Bose\",\n              },\n            },\n            sequenceNumber: 2,\n          },\n        ],\n      };\n\n      before(() => {\n          nock(deltaStorageBasePath)\n            .get(deltaStorageRelativePath)\n            .query(true)\n            .reply(200, expectedDeltaFeedResponse, {\"Access-Control-Allow-Origin\": \"*\"});\n      });\n\n      it(\"Should deserialize the delta feed response correctly\", async () => {\n          const actualDeltaFeedResponse = await spoDeltaStorageService.get(null, null, null, 2, 8);\n          assert.equal(actualDeltaFeedResponse.length, 2, \"Deseralized feed response is not of expected length\");\n          assert.equal(actualDeltaFeedResponse[0].sequenceNumber, 1,\n              \"First element of feed response has invalid sequence number\");\n          assert.equal(actualDeltaFeedResponse[1].sequenceNumber, 2,\n              \"Second element of feed response has invalid sequence number\");\n          assert.equal(actualDeltaFeedResponse[1].type, \"noop\",\n              \"Second element of feed response has invalid op type\");\n      });\n    });\n\n  describe(\"Get Returns Response With Op Envelope\", () => {\n      const expectedDeltaFeedResponse: any = {\n          value: [\n            {\n              clientId: \"present-place\",\n              clientSequenceNumber: 71,\n              contents: null,\n              minimumSequenceNumber: 1,\n              referenceSequenceNumber: 1,\n              sequenceNumber: 1,\n              text: \"\",\n              user: {\n                id: \"Unruffled Bose\",\n              },\n            },\n            {\n              clientId: \"present-place\",\n              clientSequenceNumber: 71,\n              contents: null,\n              minimumSequenceNumber: 1,\n              referenceSequenceNumber: 1,\n              sequenceNumber: 2,\n              type: \"noop\",\n              user: {\n                id: \"Unruffled Bose\",\n              },\n            },\n          ],\n        };\n\n      before(() => {\n          nock(deltaStorageBasePath)\n            .get(deltaStorageRelativePath)\n            .query(true)\n            .reply(200, expectedDeltaFeedResponse, {\"Access-Control-Allow-Origin\": \"*\"});\n      });\n\n      it(\"Should deserialize the delta feed response correctly\", async () => {\n          const actualDeltaFeedResponse = await spoDeltaStorageService.get(null, null, null, 2, 8);\n          assert.equal(actualDeltaFeedResponse.length, 2, \"Deseralized feed response is not of expected length\");\n          assert.equal(actualDeltaFeedResponse[0].sequenceNumber, 1,\n              \"First element of feed response has invalid sequence number\");\n          assert.equal(actualDeltaFeedResponse[1].sequenceNumber, 2,\n              \"Second element of feed response has invalid sequence number\");\n          assert.equal(actualDeltaFeedResponse[1].type, \"noop\",\n              \"Second element of feed response has invalid op type\");\n      });\n    });\n\n  after(() => {\n    // clean up the nock's interceptor list and restore back to unmocked behavior for http requests\n    nock.cleanAll();\n    nock.restore();\n    });\n  });\n"]}