(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["main"] = factory();
	else
		root["main"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@prague/app-component/lib/component.js":
/*!*************************************************************!*\
  !*** ./node_modules/@prague/app-component/lib/component.js ***!
  \*************************************************************/
/*! exports provided: Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony import */ var _prague_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/component */ "./node_modules/@prague/component/dist/index.js");
/* harmony import */ var _prague_component__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_component__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _prague_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prague/map */ "./node_modules/@prague/map/lib/index.js");
/* harmony import */ var _prague_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prague/runtime */ "./node_modules/@prague/runtime/dist/index.js");
/* harmony import */ var _prague_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_prague_runtime__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./debug */ "./node_modules/@prague/app-component/lib/debug.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const typeToFactorySym = Symbol("Component.typeToFactory()");
// Internal IPlatform implementation used to defer returning the component
// from DataStore.open() until after the component's async 'opened()' method has
// completed.  (See 'Chaincode.run()' below.)
class ComponentPlatform extends events__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"] {
    constructor(component) {
        super();
        this.component = component;
    }
    queryInterface(id) {
        Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`ComponentPlatform.queryInterface(${id})`);
        return id === "component"
            ? this.component
            : Promise.reject(`Unknown 'id': ${id}`);
    }
    detach() {
        Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`ComponentPlatform.detach()`);
        return;
    }
}
// Internal/reusable IChaincode implementation returned by DataStore.instantiate().
class LegacyChaincode {
    constructor(component) {
        this.component = component;
    }
    // Returns the SharedObject factory for the given type id.
    getModule(type) {
        Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`Chaincode.getModule(${type})`);
        return this.component[typeToFactorySym].get(type) || console.assert(false);
    }
    // NYI?
    close() { return Promise.resolve(); }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])("Chaincode.run()");
            return new ComponentPlatform(Promise.resolve(this.component));
        });
    }
}
/**
 * Base class for chainloadable Prague components.
 */
class Component extends events__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"] {
    constructor(types) {
        super();
        // tslint:disable-next-line:variable-name
        this._host = null;
        // tslint:disable-next-line:variable-name
        this._platform = null;
        // tslint:disable-next-line:variable-name
        this._root = null;
        /**
         * Invoked by 'attach' to ensure that create/opened are called the first time
         * a component is attached.  Subsequent calls ignore are a no-op.
         */
        this.ensureOpened = () => __awaiter(this, void 0, void 0, function* () {
            // If the '_root' map is already initialized, than this is component has already been
            // prepared.  Promptly return 'this'.
            if (this._root) {
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.ensureOpened() - already open`);
                return this;
            }
            if (this.host.existing) {
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.ensureOpened() - already exists`);
                // If the component already exists, open it's root map.
                this._root = (yield this.host.getChannel(Component.rootMapId));
            }
            else {
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.ensureOpened() - new component`);
                // If this is the first client to attempt opening the component, create the component's
                // root map and call 'create()' to give the component author a chance to initialize the
                // component's shared data structures.
                this._root = this.host.createChannel(Component.rootMapId, _prague_map__WEBPACK_IMPORTED_MODULE_1__["MapExtension"].Type);
                this._root.attach();
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.create() - begin`);
                yield this.create();
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.create() - end`);
            }
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.opened() - begin`);
            yield this.opened();
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.opened() - end`);
            return this;
        });
        // Construct a map of extension types to their corresponding factory.
        const typeToFactory = new Map(types);
        // Ensure that the map includes the shared map type.  This is necessary because
        // all components construct a shared map to be their root.
        if (!typeToFactory.has(_prague_map__WEBPACK_IMPORTED_MODULE_1__["MapExtension"].Type)) {
            typeToFactory.set(_prague_map__WEBPACK_IMPORTED_MODULE_1__["MapExtension"].Type, new _prague_map__WEBPACK_IMPORTED_MODULE_1__["MapExtension"]());
        }
        // Internally expose the 'typeToFactory' map to 'Chaincode.getModule()'.
        this[typeToFactorySym] = typeToFactory;
    }
    get dbgName() {
        return `${this.constructor.name}${this.host ? `:'${this.host.id}'` : ""}`;
    }
    get runtime() { return this._host; }
    get platform() { return this._platform; }
    get host() { return this._host; }
    get root() { return this._root; }
    /**
     * Returns a promise that resolves once the component is synchronized with its date store.
     * If the component is already connected, returns a resolved promise.
     */
    get connected() {
        if (this.host.connected) {
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.connected: Already connected.`);
            return Promise.resolve();
        }
        Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.connected: Waiting...`);
        return new Promise((accept) => {
            this.host.on("connected", () => {
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.connected: Now connected.`);
                accept();
            });
        });
    }
    /**
     * Constructs an IChaincode from a Component instance.  All chaincode components must
     * export an 'instantiate()' function from their module that returns an IChaincode as
     * shown in the following example:
     *
     * @example
     * const pkg = require("../package.json")
     *
     * export async function instantiateRuntime(context: IContainerContext) {
     *     return Component.instantiateRuntime(context, pkg.name,
     *          [[pkg.name, Promise.resolve({ instantiateComponent })]]);
     * }
     * @example
     */
    static instantiateRuntime(context, chaincode, registry) {
        return __awaiter(this, void 0, void 0, function* () {
            const runtimeId = encodeURIComponent(chaincode);
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`instantiateRuntime(chaincode=${chaincode},registry=${JSON.stringify(registry)})`);
            const runtime = yield _prague_runtime__WEBPACK_IMPORTED_MODULE_2__["Runtime"].Load(new Map(registry.map(([name, ctorFn]) => [
                name,
                Promise.resolve({ instantiateComponent: () => Promise.resolve(new ctorFn()) }),
            ])), context);
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])("runtime loaded.");
            // Register path handler for inbound messages
            runtime.registerRequestHandler((request) => __awaiter(this, void 0, void 0, function* () {
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`request(url=${request.url})`);
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`awaiting root component`);
                const componentRuntime = yield runtime.getComponent(runtimeId, /* wait: */ true);
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`have root component`);
                if (request.url && request.url !== "/") {
                    Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`delegating to ${request.url}`);
                    const component = componentRuntime.chaincode;
                    return component.request(componentRuntime, { url: request.url });
                }
                else {
                    Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`resolved ${runtimeId}`);
                    return { status: 200, mimeType: "prague/component", value: componentRuntime };
                }
            }));
            // On first boot create the base component
            if (!runtime.existing) {
                Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`createAndAttachComponent(chaincode=${chaincode})`);
                runtime.createAndAttachComponent(runtimeId, chaincode).catch((error) => {
                    context.error(error);
                });
            }
            return runtime;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.close()`);
            this.host.close();
        });
    }
    run(runtime) {
        return __awaiter(this, void 0, void 0, function* () {
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.run()`);
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.LoadFromSnapshot() - begin`);
            this._host = yield _prague_component__WEBPACK_IMPORTED_MODULE_0__["ComponentHost"].LoadFromSnapshot(runtime, new LegacyChaincode(this));
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.LoadFromSnapshot() - end`);
            return this._host;
        });
    }
    attach(platform) {
        return __awaiter(this, void 0, void 0, function* () {
            Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.attach()`);
            this._platform = platform;
            return new ComponentPlatform(this.ensureOpened());
        });
    }
    snapshot() {
        Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.snapshot()`);
        return { entries: this._host.snapshotInternal(), sha: null };
    }
    /**
     * Subclasses may override request to internally route requests.
     */
    request(runtime, request) {
        Object(_debug__WEBPACK_IMPORTED_MODULE_4__["debug"])(`${this.dbgName}.request(${JSON.stringify(request)})`);
        return runtime.request(request);
    }
}
Component.rootMapId = "root";
//# sourceMappingURL=component.js.map

/***/ }),

/***/ "./node_modules/@prague/app-component/lib/debug.js":
/*!*********************************************************!*\
  !*** ./node_modules/@prague/app-component/lib/debug.js ***!
  \*********************************************************/
/*! exports provided: debug */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debug", function() { return debug; });
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);

const debug = debug__WEBPACK_IMPORTED_MODULE_0__("prague:component");
//# sourceMappingURL=debug.js.map

/***/ }),

/***/ "./node_modules/@prague/app-component/lib/document.js":
/*!************************************************************!*\
  !*** ./node_modules/@prague/app-component/lib/document.js ***!
  \************************************************************/
/*! exports provided: Document */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Document", function() { return Document; });
/* harmony import */ var _prague_cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/cell */ "./node_modules/@prague/cell/lib/index.js");
/* harmony import */ var _prague_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prague/map */ "./node_modules/@prague/map/lib/index.js");
/* harmony import */ var _prague_sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prague/sequence */ "./node_modules/@prague/sequence/lib/index.js");
/* harmony import */ var _prague_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @prague/stream */ "./node_modules/@prague/stream/lib/index.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid/v4 */ "./node_modules/uuid/v4.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component */ "./node_modules/@prague/app-component/lib/component.js");






class Document extends _component__WEBPACK_IMPORTED_MODULE_5__["Component"] {
    constructor() {
        // Register default map value types
        Object(_prague_map__WEBPACK_IMPORTED_MODULE_1__["registerDefaultValueType"])(new _prague_map__WEBPACK_IMPORTED_MODULE_1__["DistributedSetValueType"]());
        Object(_prague_map__WEBPACK_IMPORTED_MODULE_1__["registerDefaultValueType"])(new _prague_map__WEBPACK_IMPORTED_MODULE_1__["CounterValueType"]());
        Object(_prague_map__WEBPACK_IMPORTED_MODULE_1__["registerDefaultValueType"])(new _prague_sequence__WEBPACK_IMPORTED_MODULE_2__["SharedStringIntervalCollectionValueType"]());
        Object(_prague_map__WEBPACK_IMPORTED_MODULE_1__["registerDefaultValueType"])(new _prague_sequence__WEBPACK_IMPORTED_MODULE_2__["SharedIntervalCollectionValueType"]());
        // Create channel extensions
        const mapExtension = new _prague_map__WEBPACK_IMPORTED_MODULE_1__["MapExtension"]();
        const sharedStringExtension = new _prague_sequence__WEBPACK_IMPORTED_MODULE_2__["SharedStringExtension"]();
        const streamExtension = new _prague_stream__WEBPACK_IMPORTED_MODULE_3__["StreamExtension"]();
        const cellExtension = new _prague_cell__WEBPACK_IMPORTED_MODULE_0__["CellExtension"]();
        const objectSequenceExtension = new _prague_sequence__WEBPACK_IMPORTED_MODULE_2__["SharedObjectSequenceExtension"]();
        const numberSequenceExtension = new _prague_sequence__WEBPACK_IMPORTED_MODULE_2__["SharedNumberSequenceExtension"]();
        // Register channel extensions
        super([
            [mapExtension.type, mapExtension],
            [sharedStringExtension.type, sharedStringExtension],
            [streamExtension.type, streamExtension],
            [cellExtension.type, cellExtension],
            [objectSequenceExtension.type, objectSequenceExtension],
            [numberSequenceExtension.type, numberSequenceExtension],
        ]);
    }
    /**
     * Subclass implements 'opened()' to finish initialization after the component has been opened/created.
     */
    opened() {
        return Promise.resolve();
    }
    /**
     * Creates a new shared map
     */
    createMap(id = uuid_v4__WEBPACK_IMPORTED_MODULE_4__()) {
        return this.runtime.createChannel(id, _prague_map__WEBPACK_IMPORTED_MODULE_1__["MapExtension"].Type);
    }
    /**
     * Creates a new shared cell.
     */
    createCell(id = uuid_v4__WEBPACK_IMPORTED_MODULE_4__()) {
        return this.runtime.createChannel(id, _prague_cell__WEBPACK_IMPORTED_MODULE_0__["CellExtension"].Type);
    }
    /**
     * Creates a new shared string
     */
    createString(id = uuid_v4__WEBPACK_IMPORTED_MODULE_4__()) {
        return this.runtime.createChannel(id, _prague_sequence__WEBPACK_IMPORTED_MODULE_2__["SharedStringExtension"].Type);
    }
    /**
     * Creates a new ink shared object
     */
    createStream(id = uuid_v4__WEBPACK_IMPORTED_MODULE_4__()) {
        return this.runtime.createChannel(id, _prague_stream__WEBPACK_IMPORTED_MODULE_3__["StreamExtension"].Type);
    }
}
//# sourceMappingURL=document.js.map

/***/ }),

/***/ "./node_modules/@prague/app-component/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@prague/app-component/lib/index.js ***!
  \*********************************************************/
/*! exports provided: Component, Document */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/@prague/app-component/lib/component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return _component__WEBPACK_IMPORTED_MODULE_0__["Component"]; });

/* harmony import */ var _document__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./document */ "./node_modules/@prague/app-component/lib/document.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Document", function() { return _document__WEBPACK_IMPORTED_MODULE_1__["Document"]; });



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/lib/cell.js":
/*!***********************************************!*\
  !*** ./node_modules/@prague/cell/lib/cell.js ***!
  \***********************************************/
/*! exports provided: CellValueType, Cell */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CellValueType", function() { return CellValueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cell", function() { return Cell; });
/* harmony import */ var _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/api-definitions */ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/index.js");
/* harmony import */ var _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug */ "./node_modules/@prague/cell/lib/debug.js");
/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/cell/lib/extension.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




var CellValueType;
(function (CellValueType) {
    // The value is another shared object
    CellValueType[CellValueType["Shared"] = 0] = "Shared";
    // The value is a plain JavaScript object
    CellValueType[CellValueType["Plain"] = 1] = "Plain";
})(CellValueType || (CellValueType = {}));
const snapshotFileName = "header";
/**
 * Implementation of a cell shared object
 */
class Cell extends _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["SharedObject"] {
    /**
     * Constructs a new shared cell. If the object is non-local an id and service interfaces will
     * be provided
     */
    constructor(id, runtime) {
        super(id, runtime, _extension__WEBPACK_IMPORTED_MODULE_3__["CellExtension"].Type);
    }
    /**
     * Retrieves the value of the cell.
     */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.data;
        });
    }
    /**
     * Sets the value of the cell.
     */
    set(value) {
        return __awaiter(this, void 0, void 0, function* () {
            let operationValue;
            /* tslint:disable:no-unsafe-any */
            if (value instanceof _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["SharedObject"]) {
                // Convert any local shared objects to our internal storage format
                if (!this.isLocal()) {
                    value.attach();
                }
                operationValue = {
                    type: CellValueType[CellValueType.Shared],
                    value: value.id,
                };
            }
            else {
                operationValue = {
                    type: CellValueType[CellValueType.Plain],
                    value,
                };
            }
            const op = {
                type: "setCell",
                value: operationValue,
            };
            this.setCore(value);
            this.submitIfAttached(op);
        });
    }
    // Deletes the value from the cell.
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            const op = {
                type: "deleteCell",
            };
            this.deleteCore();
            this.submitIfAttached(op);
        });
    }
    /**
     * Returns whether cell is empty or not.
     */
    empty() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.data === undefined ? true : false;
        });
    }
    snapshot() {
        // Get a serializable form of data
        let content;
        if (this.data instanceof _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["SharedObject"]) {
            content = {
                type: CellValueType[CellValueType.Shared],
                value: this.data.id,
            };
        }
        else {
            content = {
                type: CellValueType[CellValueType.Plain],
                value: this.data,
            };
        }
        // And then construct the tree for it
        const tree = {
            entries: [
                {
                    mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["FileMode"].File,
                    path: snapshotFileName,
                    type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["TreeEntry"].Blob],
                    value: {
                        contents: JSON.stringify(content),
                        encoding: "utf-8",
                    },
                },
            ],
            sha: null,
        };
        return tree;
    }
    loadCore(minimumSequenceNumber, headerOrigin, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const rawContent = yield storage.read(snapshotFileName);
            // tslint:disable-next-line:strict-boolean-expressions
            const content = rawContent
                ? JSON.parse(Buffer.from(rawContent, "base64")
                    .toString("utf-8"))
                : { type: CellValueType[CellValueType.Plain], value: undefined };
            this.data = content.type === CellValueType[CellValueType.Shared]
                ? yield this.runtime.getChannel(content.value)
                : content.value;
        });
    }
    initializeLocalCore() {
        this.data = undefined;
    }
    attachCore() {
        return;
    }
    onDisconnect() {
        Object(_debug__WEBPACK_IMPORTED_MODULE_2__["debug"])(`Cell ${this.id} is now disconnected`);
    }
    onConnect(pending) {
        for (const message of pending) {
            this.submitLocalMessage(message);
        }
        return;
    }
    prepareCore(message, local) {
        return __awaiter(this, void 0, void 0, function* () {
            if (message.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Operation && !local) {
                const op = message.contents;
                if (op.type === "setCell") {
                    /* tslint:disable:no-return-await */
                    return op.value.type === CellValueType[CellValueType.Shared]
                        ? yield this.runtime.getChannel(op.value.value)
                        : op.value.value;
                }
            }
        });
    }
    processCore(message, local, context) {
        if (message.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Operation && !local) {
            const op = message.contents;
            switch (op.type) {
                case "setCell":
                    this.setCore(context);
                    break;
                case "deleteCell":
                    this.deleteCore();
                    break;
                default:
                    throw new Error("Unknown operation");
            }
        }
    }
    processMinSequenceNumberChanged(value) {
        return;
    }
    submitIfAttached(message) {
        if (this.isLocal()) {
            return;
        }
        this.submitLocalMessage(message);
    }
    setCore(value) {
        this.data = value;
        this.emit("valueChanged", value);
    }
    deleteCore() {
        this.data = undefined;
        this.emit("delete");
    }
}
//# sourceMappingURL=cell.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/cell/lib/debug.js":
/*!************************************************!*\
  !*** ./node_modules/@prague/cell/lib/debug.js ***!
  \************************************************/
/*! exports provided: debug */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debug", function() { return debug; });
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);

const debug = debug__WEBPACK_IMPORTED_MODULE_0__("prague:cell");
//# sourceMappingURL=debug.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/lib/extension.js":
/*!****************************************************!*\
  !*** ./node_modules/@prague/cell/lib/extension.js ***!
  \****************************************************/
/*! exports provided: CellExtension */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CellExtension", function() { return CellExtension; });
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ "./node_modules/@prague/cell/lib/cell.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

/**
 * The extension that defines the map
 */
class CellExtension {
    constructor() {
        this.type = CellExtension.Type;
    }
    load(document, id, minimumSequenceNumber, services, headerOrigin) {
        return __awaiter(this, void 0, void 0, function* () {
            const cell = new _cell__WEBPACK_IMPORTED_MODULE_0__["Cell"](id, document);
            yield cell.load(minimumSequenceNumber, headerOrigin, services);
            return cell;
        });
    }
    create(document, id) {
        const cell = new _cell__WEBPACK_IMPORTED_MODULE_0__["Cell"](id, document);
        cell.initializeLocal();
        return cell;
    }
}
CellExtension.Type = "https://graph.microsoft.com/types/cell";
//# sourceMappingURL=extension.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/@prague/cell/lib/index.js ***!
  \************************************************/
/*! exports provided: CellValueType, Cell, CellExtension */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cell */ "./node_modules/@prague/cell/lib/cell.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CellValueType", function() { return _cell__WEBPACK_IMPORTED_MODULE_0__["CellValueType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Cell", function() { return _cell__WEBPACK_IMPORTED_MODULE_0__["Cell"]; });

/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/cell/lib/extension.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CellExtension", function() { return _extension__WEBPACK_IMPORTED_MODULE_1__["CellExtension"]; });



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/debug.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/debug.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const registerDebug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
exports.debug = registerDebug("prague:api-definitions");
//# sourceMappingURL=debug.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/extension.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/extension.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class that contains a collection of collaboration extensions
 */
class Registry {
    constructor() {
        this.extensions = [];
        this.extensionsMap = {};
    }
    /**
     * Registers a new extension
     * @param extension The extension to register
     */
    register(extension) {
        this.extensions.push(extension);
        this.extensionsMap[extension.type] = extension;
    }
    /**
     * Retrieves the extension with the given id
     * @param id ID for the extension to retrieve
     */
    getExtension(type) {
        if (!(type in this.extensionsMap)) {
            throw new Error("Extension not found");
        }
        return this.extensionsMap[type];
    }
}
exports.Registry = Registry;
//# sourceMappingURL=extension.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sharedObject */ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/sharedObject.js"));
__export(__webpack_require__(/*! ./extension */ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/extension.js"));
__export(__webpack_require__(/*! ./valueType */ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/valueType.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/sharedObject.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/sharedObject.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const container_definitions_1 = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
const assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
const Deque = __webpack_require__(/*! double-ended-queue */ "./node_modules/double-ended-queue/js/deque.js");
const events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
const debug_1 = __webpack_require__(/*! ./debug */ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/debug.js");
const valueType_1 = __webpack_require__(/*! ./valueType */ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/valueType.js");
class SharedObject extends events_1.EventEmitter {
    constructor(id, runtime, type) {
        super();
        this.id = id;
        this.runtime = runtime;
        this.type = type;
        // tslint:disable-next-line:variable-name
        this.__sharedObject__ = true;
        // tslint:disable-next-line:variable-name private fields exposed via getters
        this._state = container_definitions_1.ConnectionState.Disconnected;
        // Locally applied operations not yet ACK'd by the server
        this.pendingOps = new Deque();
    }
    get state() {
        return this._state;
    }
    toJSON() {
        return {
            type: valueType_1.ValueType[valueType_1.ValueType.Shared],
            value: this.id,
        };
    }
    /**
     * A shared object, after construction, can either be loaded in the case that it is already part of
     * a shared document. Or later attached if it is being newly added.
     */
    load(minimumSequenceNumber, headerOrigin, services) {
        return __awaiter(this, void 0, void 0, function* () {
            this.services = services;
            yield this.loadCore(minimumSequenceNumber, headerOrigin, services.objectStorage);
            this.attachDeltaHandler();
        });
    }
    /**
     * Initializes the object as a local, non-shared object. This object can become shared after
     * it is attached to the document.
     */
    initializeLocal() {
        this.initializeLocalCore();
    }
    /**
     * Attaches the given shared object to its containing document
     */
    attach() {
        if (!this.isLocal()) {
            return this;
        }
        // Allow derived classes to perform custom processing prior to attaching this object
        this.attachCore();
        // Notify the document of the attachment
        this.services = this.runtime.attachChannel(this);
        this.attachDeltaHandler();
        return this;
    }
    /**
     * Returns whether the given shared object is local
     */
    isLocal() {
        return !this.services;
    }
    /* tslint:disable:no-unnecessary-override */
    on(event, listener) {
        return super.on(event, listener);
    }
    /**
     * Processes a message by the local client
     */
    submitLocalMessage(content) {
        assert(!this.isLocal());
        // Send if we are connected - otherwise just add to the sent list
        let clientSequenceNumber = -1;
        if (this.state === container_definitions_1.ConnectionState.Connected) {
            clientSequenceNumber = this.services.deltaConnection.submit(content);
        }
        else {
            debug_1.debug(`${this.id} Not fully connected - adding to pending list`, content);
            // Store the message for when it is ACKed and then submit to the server if connected
        }
        this.pendingOps.push({ clientSequenceNumber, content });
        return clientSequenceNumber;
    }
    attachDeltaHandler() {
        this.services.deltaConnection.attach({
            minSequenceNumberChanged: (value) => {
                this.processMinSequenceNumberChanged(value);
            },
            prepare: (message, local) => {
                return this.prepare(message, local);
            },
            process: (message, local, context) => {
                this.process(message, local, context);
            },
            setConnectionState: (state) => {
                this.setConnectionState(state);
            },
        });
        // Trigger initial state
        this.setConnectionState(this.services.deltaConnection.state);
    }
    prepare(message, local) {
        return this.prepareCore(message, local);
    }
    setConnectionState(state) {
        // Should I change the state at the end? So that we *can't* send new stuff before we send old?
        this._state = state;
        switch (state) {
            case container_definitions_1.ConnectionState.Disconnected:
                // Things that are true now...
                // - if we had a connection we can no longer send messages over it
                // - if we had outbound messages some may or may not be ACK'd. Won't know until next message
                //
                // - nack could get a new msn - but might as well do it in the join?
                this.onDisconnect();
                break;
            case container_definitions_1.ConnectionState.Connecting:
                // Things that are now true...
                // - we will begin to receive inbound messages
                // - we know what our new client id is.
                // - still not safe to send messages
                // While connecting we are still ticking off the previous messages
                debug_1.debug(`${this.id} is now connecting`);
                break;
            case container_definitions_1.ConnectionState.Connected:
                // Extract all un-ack'd payload operation
                const pendingOps = this.pendingOps.toArray().map((value) => value.content);
                this.pendingOps.clear();
                // And now we are fully connected
                // - we have a client ID
                // - we are caught up enough to attempt to send messages
                this.onConnect(pendingOps);
                break;
            default:
                assert.ok(false, `Unknown ConnectionState ${state}`);
        }
    }
    /**
     * Handles a message being received from the remote delta server
     */
    process(message, local, context) {
        if (message.type === container_definitions_1.MessageType.Operation && local) {
            // disconnected ops should never be processed. They should have been fully sent on connected
            assert(this.pendingOps.length === 0 || this.pendingOps.peekFront().clientSequenceNumber !== -1, `process for disconnected op ${this.pendingOps.peekFront().clientSequenceNumber}`);
            // One of our messages was sequenced. We can remove it from the local message list. Given these arrive
            // in order we only need to check the beginning of the local list.
            if (this.pendingOps.length > 0 &&
                this.pendingOps.peekFront().clientSequenceNumber === message.clientSequenceNumber) {
                this.pendingOps.shift();
                if (this.pendingOps.length === 0) {
                    this.emit("processed");
                }
            }
            else {
                debug_1.debug(`Duplicate ack received ${message.clientSequenceNumber}`);
            }
        }
        this.emit("pre-op", message, local);
        this.processCore(message, local, context);
        this.emit("op", message, local);
    }
}
exports.SharedObject = SharedObject;
//# sourceMappingURL=sharedObject.js.map

/***/ }),

/***/ "./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/valueType.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@prague/cell/node_modules/@prague/api-definitions/dist/valueType.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// TODO this is probably too map specific - but is used to serailize objects in certain cases
var ValueType;
(function (ValueType) {
    // The value is a shared object
    ValueType[ValueType["Shared"] = 0] = "Shared";
    // The value is a plain JavaScript object
    ValueType[ValueType["Plain"] = 1] = "Plain";
    // The value is a counter
    ValueType[ValueType["Counter"] = 2] = "Counter";
    // The value is a set
    ValueType[ValueType["Set"] = 3] = "Set";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
//# sourceMappingURL=valueType.js.map

/***/ }),

/***/ "./node_modules/@prague/component/dist/channelDeltaConnection.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@prague/component/dist/channelDeltaConnection.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
class ChannelDeltaConnection {
    constructor(objectId, 
    // tslint:disable-next-line:variable-name
    _state, submitFn) {
        this.objectId = objectId;
        this._state = _state;
        this.submitFn = submitFn;
    }
    get state() {
        return this._state;
    }
    attach(handler) {
        /* tslint:disable:strict-boolean-expressions */
        assert(!this.handler);
        this.handler = handler;
    }
    setConnectionState(state) {
        this._state = state;
        this.handler.setConnectionState(state);
    }
    prepare(message, local) {
        assert(this.handler);
        return this.handler.prepare(message, local);
    }
    process(message, local, context) {
        assert(this.handler);
        this.handler.process(message, local, context);
    }
    updateMinSequenceNumber(value) {
        assert(this.handler);
        this.handler.minSequenceNumberChanged(value);
    }
    /**
     * Send new messages to the server
     */
    submit(message) {
        return this.submitFn(message);
    }
}
exports.ChannelDeltaConnection = ChannelDeltaConnection;
//# sourceMappingURL=channelDeltaConnection.js.map

/***/ }),

/***/ "./node_modules/@prague/component/dist/channelStorageService.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@prague/component/dist/channelStorageService.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class ChannelStorageService {
    constructor(tree, storage) {
        this.storage = storage;
        this.flattenedTree = {};
        // Create a map from paths to blobs
        /* tslint:disable:strict-boolean-expressions */
        if (tree) {
            ChannelStorageService.flattenTree("", tree, this.flattenedTree);
        }
    }
    static flattenTree(base, tree, results) {
        // tslint:disable-next-line:forin
        for (const path in tree.trees) {
            ChannelStorageService.flattenTree(`${base}${path}/`, tree.trees[path], results);
        }
        // tslint:disable-next-line:forin
        for (const blob in tree.blobs) {
            results[`${base}${blob}`] = tree.blobs[blob];
        }
    }
    /* tslint:disable:promise-function-async */
    read(path) {
        const sha = this.getShaForPath(path);
        return this.storage.read(sha);
    }
    getShaForPath(path) {
        return this.flattenedTree[path];
    }
}
exports.ChannelStorageService = ChannelStorageService;
//# sourceMappingURL=channelStorageService.js.map

/***/ }),

/***/ "./node_modules/@prague/component/dist/componentHost.js":
/*!**************************************************************!*\
  !*** ./node_modules/@prague/component/dist/componentHost.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const container_definitions_1 = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
const utils_1 = __webpack_require__(/*! @prague/utils */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/index.js");
const assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
const events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
const channelDeltaConnection_1 = __webpack_require__(/*! ./channelDeltaConnection */ "./node_modules/@prague/component/dist/channelDeltaConnection.js");
const channelStorageService_1 = __webpack_require__(/*! ./channelStorageService */ "./node_modules/@prague/component/dist/channelStorageService.js");
const localChannelStorageService_1 = __webpack_require__(/*! ./localChannelStorageService */ "./node_modules/@prague/component/dist/localChannelStorageService.js");
class ServicePlatform extends events_1.EventEmitter {
    constructor(services) {
        super();
        this.qi = new Map(services);
    }
    queryInterface(id) {
        return this.qi.get(id) || Promise.reject(`queryInterface() failed - Unknown id '${id}'.`);
    }
    detach() {
        return;
    }
}
/**
 * Base component class
 */
class ComponentHost extends events_1.EventEmitter {
    // tslint:enable-next-line:variable-name
    constructor(componentRuntime, tenantId, documentId, id, parentBranch, existing, options, blobManager, deltaManager, quorum, chaincode, storageService, snapshotFn, closeFn) {
        super();
        this.componentRuntime = componentRuntime;
        this.tenantId = tenantId;
        this.documentId = documentId;
        this.id = id;
        this.parentBranch = parentBranch;
        this.existing = existing;
        this.options = options;
        this.blobManager = blobManager;
        this.deltaManager = deltaManager;
        this.quorum = quorum;
        this.chaincode = chaincode;
        this.storageService = storageService;
        this.snapshotFn = snapshotFn;
        this.closeFn = closeFn;
        this.channels = new Map();
        this.channelsDeferred = new Map();
        this.closed = false;
        this.pendingAttach = new Map();
    }
    static LoadFromSnapshot(componentRuntime, chaincode) {
        return __awaiter(this, void 0, void 0, function* () {
            const tree = componentRuntime.baseSnapshot;
            const runtime = new ComponentHost(componentRuntime, componentRuntime.tenantId, componentRuntime.documentId, componentRuntime.id, componentRuntime.parentBranch, componentRuntime.existing, componentRuntime.options, componentRuntime.blobManager, componentRuntime.deltaManager, componentRuntime.getQuorum(), chaincode, componentRuntime.storage, componentRuntime.snapshotFn, componentRuntime.closeFn);
            // Must always receive the component type inside of the attributes
            if (tree && tree.trees) {
                Object.keys(tree.trees).forEach((path) => {
                    // Reserve space for the channel
                    runtime.reserve(path);
                });
                /* tslint:disable:promise-function-async */
                const loadSnapshotsP = Object.keys(tree.trees).map((path) => {
                    return runtime.loadSnapshotChannel(path, tree.trees[path], componentRuntime.storage, componentRuntime.branch);
                });
                yield Promise.all(loadSnapshotsP);
            }
            // Start the runtime
            yield runtime.start();
            return runtime;
        });
    }
    get connected() {
        return this.componentRuntime.connected;
    }
    // Interface used to access the runtime code
    get platform() {
        return this._platform;
    }
    get clientId() {
        return this.componentRuntime.clientId;
    }
    createAndAttachComponent(id, pkg) {
        return this.componentRuntime.createAndAttachComponent(id, pkg);
    }
    getComponent(id, wait) {
        return this.componentRuntime.getComponent(id, wait);
    }
    /**
     * Opens the component with the given 'id'.  Once the component is retrieved, it is attached
     * with the given list of services.
     */
    openComponent(id, wait, services) {
        return __awaiter(this, void 0, void 0, function* () {
            const runtime = yield this.componentRuntime.getComponent(id, wait);
            const platform = yield runtime.attach(new ServicePlatform(services));
            return platform.queryInterface("component");
        });
    }
    request(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = request.url.substr(1);
            const value = yield this.getChannel(id);
            return { mimeType: "prague/dataType", status: 200, value };
        });
    }
    getChannel(id) {
        this.verifyNotClosed();
        // TODO we don't assume any channels (even root) in the runtime. If you request a channel that doesn't exist
        // we will never resolve the promise. May want a flag to getChannel that doesn't wait for the promise if
        // it doesn't exist
        if (!this.channelsDeferred.has(id)) {
            this.channelsDeferred.set(id, new utils_1.Deferred());
        }
        return this.channelsDeferred.get(id).promise;
    }
    createChannel(id, type) {
        this.verifyNotClosed();
        const extension = this.chaincode.getModule(type);
        const channel = extension.create(this, id);
        this.channels.set(id, { baseSha: null, object: channel, connection: null, storage: null });
        if (this.channelsDeferred.has(id)) {
            this.channelsDeferred.get(id).resolve(channel);
        }
        else {
            const deferred = new utils_1.Deferred();
            deferred.resolve(channel);
            this.channelsDeferred.set(id, deferred);
        }
        return channel;
    }
    attachChannel(channel) {
        this.verifyNotClosed();
        // Get the object snapshot and include it in the initial attach
        const snapshot = channel.snapshot();
        const message = {
            id: channel.id,
            snapshot,
            type: channel.type,
        };
        this.pendingAttach.set(channel.id, message);
        this.submit(container_definitions_1.MessageType.Attach, message);
        // Store a reference to the object in our list of objects and then get the services
        // used to attach it to the stream
        const services = this.getObjectServices(channel.id, null, this.storageService);
        const entry = this.channels.get(channel.id);
        assert.equal(entry.object, channel);
        entry.connection = services.deltaConnection;
        entry.storage = services.objectStorage;
        return services;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyNotClosed();
            this._platform = yield this.chaincode.run(this, null);
        });
    }
    changeConnectionState(value, clientId) {
        this.verifyNotClosed();
        // Resend all pending attach messages prior to notifying clients
        if (value === container_definitions_1.ConnectionState.Connected) {
            for (const [, message] of this.pendingAttach) {
                this.submit(container_definitions_1.MessageType.Attach, message);
            }
        }
        for (const [, object] of this.channels) {
            if (object.connection) {
                object.connection.setConnectionState(value);
            }
        }
        if (value === container_definitions_1.ConnectionState.Connected) {
            this.emit("connected", clientId);
        }
    }
    getQuorum() {
        this.verifyNotClosed();
        return this.quorum;
    }
    snapshot(message) {
        this.verifyNotClosed();
        return this.snapshotFn(message);
    }
    save(tag) {
        this.verifyNotClosed();
        this.submit(container_definitions_1.MessageType.Save, tag);
    }
    uploadBlob(file) {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyNotClosed();
            const sha = utils_1.gitHashFile(file.content);
            file.sha = sha;
            file.url = this.storageService.getRawUrl(sha);
            yield this.blobManager.createBlob(file);
            this.submit(container_definitions_1.MessageType.BlobUploaded, yield this.blobManager.createBlob(file));
            return file;
        });
    }
    getBlob(sha) {
        this.verifyNotClosed();
        return this.blobManager.getBlob(sha);
    }
    getBlobMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.blobManager.getBlobMetadata();
        });
    }
    stop() {
        this.verifyNotClosed();
        this.closed = true;
        return this.snapshotInternal();
    }
    close() {
        this.closeFn();
    }
    prepare(message, local) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (message.type) {
                case container_definitions_1.MessageType.Attach:
                    return this.prepareAttach(message, local);
                case container_definitions_1.MessageType.Operation:
                    return this.prepareOp(message, local);
                default:
                    return;
            }
        });
    }
    process(message, local, context) {
        let target = null;
        switch (message.type) {
            case container_definitions_1.MessageType.Attach:
                target = this.processAttach(message, local, context);
                break;
            case container_definitions_1.MessageType.Operation:
                target = this.processOp(message, local, context);
                break;
            default:
        }
        this.emit("op", message, target);
    }
    updateMinSequenceNumber(msn) {
        for (const [, object] of this.channels) {
            if (!object.object.isLocal()) {
                object.connection.updateMinSequenceNumber(msn);
            }
        }
    }
    snapshotInternal() {
        const entries = new Array();
        this.updateMinSequenceNumber(this.deltaManager.minimumSequenceNumber);
        // Craft the .attributes file for each distributed object
        for (const [objectId, object] of this.channels) {
            // If the object isn't local - and we have received the sequenced op creating the object (i.e. it has a
            // base mapping) - then we go ahead and snapshot
            if (!object.object.isLocal()) {
                const snapshot = object.object.snapshot();
                // Add in the object attributes to the returned tree
                const objectAttributes = {
                    type: object.object.type,
                };
                snapshot.entries.push({
                    mode: container_definitions_1.FileMode.File,
                    path: ".attributes",
                    type: container_definitions_1.TreeEntry[container_definitions_1.TreeEntry.Blob],
                    value: {
                        contents: JSON.stringify(objectAttributes),
                        encoding: "utf-8",
                    },
                });
                // If baseSha exists then the previous snapshot is still valid
                if (object.baseSha) {
                    snapshot.sha = object.baseSha;
                }
                // And then store the tree
                entries.push({
                    mode: container_definitions_1.FileMode.Directory,
                    path: objectId,
                    type: container_definitions_1.TreeEntry[container_definitions_1.TreeEntry.Tree],
                    value: snapshot,
                });
            }
        }
        return entries;
    }
    submitMessage(type, content) {
        this.submit(type, content);
    }
    submit(type, content) {
        this.verifyNotClosed();
        return this.componentRuntime.submitMessage(type, content);
    }
    reserve(id) {
        if (!this.channelsDeferred.has(id)) {
            this.channelsDeferred.set(id, new utils_1.Deferred());
        }
    }
    prepareOp(message, local) {
        this.verifyNotClosed();
        const envelope = message.contents;
        const objectDetails = this.channels.get(envelope.address);
        assert(objectDetails);
        const transformed = {
            clientId: message.clientId,
            clientSequenceNumber: message.clientSequenceNumber,
            contents: envelope.contents,
            metadata: message.metadata,
            minimumSequenceNumber: message.minimumSequenceNumber,
            origin: message.origin,
            referenceSequenceNumber: message.referenceSequenceNumber,
            sequenceNumber: message.sequenceNumber,
            timestamp: message.timestamp,
            traces: message.traces,
            type: message.type,
        };
        return objectDetails.connection.prepare(transformed, local);
    }
    processOp(message, local, context) {
        this.verifyNotClosed();
        const envelope = message.contents;
        const objectDetails = this.channels.get(envelope.address);
        assert(objectDetails);
        // Clear base sha since the channel is now dirty
        objectDetails.baseSha = null;
        const transformed = {
            clientId: message.clientId,
            clientSequenceNumber: message.clientSequenceNumber,
            contents: envelope.contents,
            metadata: message.metadata,
            minimumSequenceNumber: message.minimumSequenceNumber,
            origin: message.origin,
            referenceSequenceNumber: message.referenceSequenceNumber,
            sequenceNumber: message.sequenceNumber,
            timestamp: message.timestamp,
            traces: message.traces,
            type: message.type,
        };
        objectDetails.connection.process(transformed, local, context);
        return objectDetails.object;
    }
    processAttach(message, local, context) {
        this.verifyNotClosed();
        const attachMessage = message.contents;
        // If a non-local operation then go and create the object - otherwise mark it as officially attached.
        if (local) {
            assert(this.pendingAttach.has(attachMessage.id));
            this.pendingAttach.delete(attachMessage.id);
        }
        else {
            const channelState = context;
            this.channels.set(channelState.object.id, channelState);
            if (this.channelsDeferred.has(channelState.object.id)) {
                this.channelsDeferred.get(channelState.object.id).resolve(channelState.object);
            }
            else {
                const deferred = new utils_1.Deferred();
                deferred.resolve(channelState.object);
                this.channelsDeferred.set(channelState.object.id, deferred);
            }
        }
        return this.channels.get(attachMessage.id).object;
    }
    prepareAttach(message, local) {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyNotClosed();
            if (local) {
                return;
            }
            const attachMessage = message.contents;
            // create storage service that wraps the attach data
            const localStorage = new localChannelStorageService_1.LocalChannelStorageService(attachMessage.snapshot);
            const connection = new channelDeltaConnection_1.ChannelDeltaConnection(attachMessage.id, this.componentRuntime.connectionState, (submitMessage) => {
                const submitEnvelope = {
                    address: attachMessage.id,
                    contents: submitMessage,
                };
                return this.submit(container_definitions_1.MessageType.Operation, submitEnvelope);
            });
            const services = {
                baseSha: null,
                deltaConnection: connection,
                objectStorage: localStorage,
            };
            const origin = message.origin ? message.origin.id : this.id;
            const value = yield this.loadChannel(attachMessage.id, attachMessage.type, message.minimumSequenceNumber, services, origin);
            return value;
        });
    }
    loadSnapshotChannel(id, tree, storage, branch) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelAttributes = yield utils_1.readAndParse(storage, tree.blobs[".attributes"]);
            const services = this.getObjectServices(id, tree, storage);
            const channelDetails = yield this.loadChannel(id, channelAttributes.type, this.deltaManager.minimumSequenceNumber, services, branch);
            assert(!this.channels.has(id));
            this.channels.set(id, channelDetails);
            this.channelsDeferred.get(id).resolve(channelDetails.object);
        });
    }
    loadChannel(id, type, minSequenceNumber, services, originBranch) {
        return __awaiter(this, void 0, void 0, function* () {
            // Pass the transformedMessages - but the object really should be storing this
            const extension = this.chaincode.getModule(type);
            // TODO need to fix up the SN vs. MSN stuff here. If want to push messages to object also need
            // to store the mappings from channel ID to doc ID.
            const value = yield extension.load(this, id, minSequenceNumber, services, originBranch);
            return {
                baseSha: services.baseSha,
                connection: services.deltaConnection,
                object: value,
                storage: services.objectStorage,
            };
        });
    }
    getObjectServices(id, tree, storage) {
        const deltaConnection = new channelDeltaConnection_1.ChannelDeltaConnection(id, this.componentRuntime.connectionState, (message) => {
            const envelope = { address: id, contents: message };
            return this.submit(container_definitions_1.MessageType.Operation, envelope);
        });
        const objectStorage = new channelStorageService_1.ChannelStorageService(tree, storage);
        return {
            baseSha: tree ? tree.sha : null,
            deltaConnection,
            objectStorage,
        };
    }
    verifyNotClosed() {
        if (this.closed) {
            throw new Error("Runtime is closed");
        }
    }
}
exports.ComponentHost = ComponentHost;
//# sourceMappingURL=componentHost.js.map

/***/ }),

/***/ "./node_modules/@prague/component/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@prague/component/dist/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./componentHost */ "./node_modules/@prague/component/dist/componentHost.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/component/dist/localChannelStorageService.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@prague/component/dist/localChannelStorageService.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
Object.defineProperty(exports, "__esModule", { value: true });
const container_definitions_1 = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
class LocalChannelStorageService {
    constructor(tree) {
        this.tree = tree;
    }
    /* tslint:disable:promise-function-async */
    read(path) {
        const contents = this.readSync(path);
        return contents !== undefined ? Promise.resolve(contents) : Promise.reject("Not found");
    }
    /**
     * Provides a synchronous access point to locally stored data
     */
    readSync(path) {
        return this.readSyncInternal(path, this.tree);
    }
    readSyncInternal(path, tree) {
        for (const entry of tree.entries) {
            switch (entry.type) {
                case container_definitions_1.TreeEntry[container_definitions_1.TreeEntry.Blob]:
                    if (path === entry.path) {
                        const blob = entry.value;
                        return blob.encoding === "utf-8"
                            ? new Buffer(blob.contents).toString("base64")
                            : blob.contents;
                    }
                    break;
                case container_definitions_1.TreeEntry[container_definitions_1.TreeEntry.Tree]:
                    if (path.indexOf(entry.path) === 0) {
                        return this.readSyncInternal(path.substr(entry.path.length + 1), entry.value);
                    }
                    break;
                default:
            }
        }
        return undefined;
    }
}
exports.LocalChannelStorageService = LocalChannelStorageService;
//# sourceMappingURL=localChannelStorageService.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/batchManager.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/batchManager.js ***!
  \***************************************************************************************/
/*! exports provided: BatchManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchManager", function() { return BatchManager; });
const MaxBatchSize = 100;
class BatchManager {
    constructor(process) {
        this.process = process;
        this.pendingWork = new Map();
    }
    add(id, work) {
        if (!this.pendingWork.has(id)) {
            this.pendingWork.set(id, []);
        }
        this.pendingWork.get(id)
            .push(work);
        if (this.pendingWork.get(id).length >= MaxBatchSize) {
            clearTimeout(this.pendingTimer);
            this.pendingTimer = undefined;
            this.startWork();
        }
        else if (this.pendingTimer === undefined) {
            this.pendingTimer = setTimeout(() => {
                this.pendingTimer = undefined;
                this.startWork();
            }, 0);
        }
    }
    /**
     * Resolves once all pending work is complete
     */
    drain() {
        this.startWork();
    }
    startWork() {
        // Clear the internal flags first to avoid issues in case any of the pending work calls back into
        // the batch manager. We could also do this with a second setImmediate call but avodiing in order
        // to process the work quicker.
        const pendingWork = this.pendingWork;
        this.pendingWork = new Map();
        // TODO log to influx how much pending work there is. We want to limit the size of a batch
        for (const [id, batch] of pendingWork) {
            this.process(id, batch);
        }
    }
}
//# sourceMappingURL=batchManager.js.map

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/blobs.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/blobs.js ***!
  \********************************************************************************/
/*! exports provided: gitHashFile, flatten, readAndParse, buildHierarchy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gitHashFile", function() { return gitHashFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readAndParse", function() { return readAndParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildHierarchy", function() { return buildHierarchy; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sha.js/sha1 */ "./node_modules/sha.js/sha1.js");
/* harmony import */ var sha_js_sha1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

// tslint:disable-next-line:no-submodule-imports

/**
 * Create Hash (Github hashes the string with blob and size)
 * @param file The contents of the file in a buffer
 */
function gitHashFile(file) {
    const size = file.byteLength;
    const filePrefix = "blob " + size.toString() + String.fromCharCode(0);
    /* tslint:disable:no-unsafe-any */
    const engine = new sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__();
    return engine.update(filePrefix)
        .update(file)
        .digest("hex");
}
function flatten(tree, blobMap) {
    const entries = flattenCore("", tree, blobMap);
    return {
        sha: null,
        tree: entries,
        url: null,
    };
}
function readAndParse(storage, sha) {
    return __awaiter(this, void 0, void 0, function* () {
        const encoded = yield storage.read(sha);
        const decoded = Buffer
            .from(encoded, "base64")
            .toString();
        return JSON.parse(decoded);
    });
}
function flattenCore(path, treeEntries, blobMap) {
    const entries = new Array();
    for (const treeEntry of treeEntries) {
        const subPath = `${path}${treeEntry.path}`;
        if (treeEntry.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"].Blob]) {
            const blob = treeEntry.value;
            const buffer = Buffer.from(blob.contents, blob.encoding);
            const sha = gitHashFile(buffer);
            blobMap.set(sha, buffer.toString("base64"));
            const entry = {
                mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"][treeEntry.mode],
                path: subPath,
                sha,
                size: buffer.length,
                type: "blob",
                url: "",
            };
            entries.push(entry);
        }
        else {
            const t = treeEntry.value;
            const entry = {
                mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"][treeEntry.mode],
                path: subPath,
                sha: null,
                size: -1,
                type: "tree",
                url: "",
            };
            entries.push(entry);
            const subTreeEntries = flattenCore(subPath + "/", t.entries, blobMap);
            entries.push(...subTreeEntries);
        }
    }
    return entries;
}
function buildHierarchy(flatTree) {
    if (!flatTree) {
        return null;
    }
    const lookup = {};
    const root = { sha: flatTree.sha, blobs: {}, commits: {}, trees: {} };
    lookup[""] = root;
    for (const entry of flatTree.tree) {
        const lastIndex = entry.path.lastIndexOf("/");
        const entryPathDir = entry.path.slice(0, Math.max(0, lastIndex));
        const entryPathBase = entry.path.slice(lastIndex + 1);
        // The flat output is breadth-first so we can assume we see tree nodes prior to their contents
        const node = lookup[entryPathDir];
        // Add in either the blob or tree
        if (entry.type === "tree") {
            const newTree = { sha: entry.sha, blobs: {}, commits: {}, trees: {} };
            node.trees[entryPathBase] = newTree;
            lookup[entry.path] = newTree;
        }
        else if (entry.type === "blob") {
            node.blobs[entryPathBase] = entry.sha;
        }
        else if (entry.type === "commit") {
            node.commits[entryPathBase] = entry.sha;
        }
    }
    return root;
}
//# sourceMappingURL=blobs.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/heap.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/heap.js ***!
  \*******************************************************************************/
/*! exports provided: NumberComparer, Heap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberComparer", function() { return NumberComparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return Heap; });
// tslint:disable:no-bitwise
// tslint:disable:no-increment-decrement
// tslint:disable:no-parameter-reassignment
const NumberComparer = {
    compare: (a, b) => a - b,
    min: Number.MIN_VALUE,
};
class Heap {
    constructor(comp) {
        this.comp = comp;
        this.L = [{ value: comp.min, position: 0 }];
    }
    peek() {
        return this.L[1];
    }
    get() {
        this.swap(1, this.count());
        const x = this.L.pop();
        this.fixdown(1);
        return x.value;
    }
    add(x) {
        const node = { value: x, position: this.L.length };
        this.L.push(node);
        this.fixup(this.count());
        return node;
    }
    /**
     * Allows for heap to be updated after a node's value changes
     */
    update(node) {
        const k = node.position;
        if (this.isGreaterThanParent(k)) {
            this.fixup(k);
        }
        else {
            this.fixdown(k);
        }
    }
    /**
     * Removes the given node from the heap
     */
    remove(node) {
        // Move the node we want to remove to the end of the array
        const position = node.position;
        this.swap(node.position, this.L.length - 1);
        this.L.splice(this.L.length - 1);
        // Update the swapped node assuming we didn't remove the end of the list
        if (position !== this.L.length) {
            this.update(this.L[position]);
        }
    }
    count() {
        return this.L.length - 1;
    }
    fixup(k) {
        while (this.isGreaterThanParent(k)) {
            const parent = k >> 1;
            this.swap(k, parent);
            k = parent;
        }
    }
    isGreaterThanParent(k) {
        return k > 1 && (this.comp.compare(this.L[k >> 1].value, this.L[k].value) > 0);
    }
    fixdown(k) {
        while ((k << 1) <= this.count()) {
            let j = k << 1;
            if ((j < this.count()) && (this.comp.compare(this.L[j].value, this.L[j + 1].value) > 0)) {
                j++;
            }
            if (this.comp.compare(this.L[k].value, this.L[j].value) <= 0) {
                break;
            }
            this.swap(k, j);
            k = j;
        }
    }
    swap(k, j) {
        const tmp = this.L[k];
        this.L[k] = this.L[j];
        this.L[k].position = k;
        this.L[j] = tmp;
        this.L[j].position = j;
    }
}
//# sourceMappingURL=heap.js.map

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/index.js ***!
  \********************************************************************************/
/*! exports provided: BatchManager, gitHashFile, flatten, readAndParse, buildHierarchy, NumberComparer, Heap, Deferred, assertNotRejected, RangeTracker, RateLimitter, safelyParseJSON, isSystemType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _batchManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batchManager */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/batchManager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BatchManager", function() { return _batchManager__WEBPACK_IMPORTED_MODULE_0__["BatchManager"]; });

/* harmony import */ var _blobs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blobs */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/blobs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gitHashFile", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["gitHashFile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["flatten"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "readAndParse", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["readAndParse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildHierarchy", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["buildHierarchy"]; });

/* harmony import */ var _heap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./heap */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/heap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumberComparer", function() { return _heap__WEBPACK_IMPORTED_MODULE_2__["NumberComparer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return _heap__WEBPACK_IMPORTED_MODULE_2__["Heap"]; });

/* harmony import */ var _promises__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./promises */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/promises.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _promises__WEBPACK_IMPORTED_MODULE_3__["Deferred"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertNotRejected", function() { return _promises__WEBPACK_IMPORTED_MODULE_3__["assertNotRejected"]; });

/* harmony import */ var _rangeTracker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rangeTracker */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/rangeTracker.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RangeTracker", function() { return _rangeTracker__WEBPACK_IMPORTED_MODULE_4__["RangeTracker"]; });

/* harmony import */ var _rateLimitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rateLimitter */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/rateLimitter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RateLimitter", function() { return _rateLimitter__WEBPACK_IMPORTED_MODULE_5__["RateLimitter"]; });

/* harmony import */ var _safeParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./safeParser */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/safeParser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "safelyParseJSON", function() { return _safeParser__WEBPACK_IMPORTED_MODULE_6__["safelyParseJSON"]; });

/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./node_modules/@prague/component/node_modules/@prague/utils/lib/utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSystemType", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__["isSystemType"]; });









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/promises.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/promises.js ***!
  \***********************************************************************************/
/*! exports provided: Deferred, assertNotRejected */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return Deferred; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertNotRejected", function() { return assertNotRejected; });
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);

/**
 * A deferred creates a promise and the ability to resolve or reject it
 */
class Deferred {
    constructor() {
        /* tslint:disable:promise-must-complete */
        this.p = new Promise((resolve, reject) => {
            this.res = resolve;
            this.rej = reject;
        });
    }
    /**
     * Retrieves the underlying promise for the deferred
     */
    get promise() {
        return this.p;
    }
    /**
     * Resolves the promise
     */
    resolve(value) {
        this.res(value);
    }
    /**
     * Rejects the promise
     */
    reject(error) {
        this.rej(error);
    }
}
/**
 * Helper function that asserts that the given promise only resolves
 */
/* tslint:disable:promise-function-async */
function assertNotRejected(promise) {
    // Assert that the given promise only resolves
    promise.catch((error) => {
        assert__WEBPACK_IMPORTED_MODULE_0__["ok"](false);
    });
    return promise;
}
//# sourceMappingURL=promises.js.map

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/rangeTracker.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/rangeTracker.js ***!
  \***************************************************************************************/
/*! exports provided: RangeTracker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RangeTracker", function() { return RangeTracker; });
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);

// tslint:disable:no-var-requires
// tslint:disable-next-line:no-submodule-imports
const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/**
 * Helper class that keeps track of the relation between two ranges in a 1:N fashion. Primary
 * is continuous and always maps to a single value in secondary above the base value. The range
 * defines an increasing step function.
 */
class RangeTracker {
    get base() {
        return this.ranges[0].primary;
    }
    get primaryHead() {
        return this.lastPrimary;
    }
    get secondaryHead() {
        return this.lastSecondary;
    }
    constructor(primary, secondary) {
        if (typeof primary === "number") {
            this.ranges = [{ length: 0, primary, secondary }];
            this.lastPrimary = primary;
            this.lastSecondary = secondary;
        }
        else {
            /* tslint:disable:no-unsafe-any */
            this.ranges = cloneDeep(primary.ranges);
            this.lastPrimary = primary.lastPrimary;
            this.lastSecondary = primary.lastSecondary;
        }
    }
    /**
     * Returns a serialized form of the RangeTracker
     */
    serialize() {
        return {
            lastPrimary: this.lastPrimary,
            lastSecondary: this.lastSecondary,
            ranges: cloneDeep(this.ranges),
        };
    }
    // primary is time - secondary is the MSN
    add(primary, secondary) {
        // Both values must continuously be increasing - we won't always track the last value we saw so we do so
        // below to check invariants
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.lastPrimary);
        assert__WEBPACK_IMPORTED_MODULE_0__(secondary >= this.lastSecondary);
        this.lastPrimary = primary;
        this.lastSecondary = secondary;
        // Get quicker references to the head of the range
        const head = this.ranges[this.ranges.length - 1];
        const primaryHead = head.primary + head.length;
        const secondaryHead = head.secondary + head.length;
        // Same secondary indicates this is not a true inflection point - we can ignore it
        if (secondary === secondaryHead) {
            return;
        }
        // New secondary - need to update the ranges
        if (primary === primaryHead) {
            // Technically this code path has us supporting N:N ranges. But we simply overwrite duplicate values to
            // preserve 1:N since you can only lookup from the primary to a secondary
            if (head.length === 0) {
                // No range represented - we can simply update secondary with the overwritten value
                head.secondary = secondary;
            }
            else {
                // The values in the range before this one are valid - but we need to create a new one for this update
                // tslint:disable-next-line:no-increment-decrement
                head.length--;
                this.ranges.push({ length: 0, primary, secondary });
            }
        }
        else {
            if (primaryHead + 1 === primary && secondaryHead + 1 === secondary) {
                // extend the length if both increase by the same amount
                // tslint:disable-next-line:no-increment-decrement
                head.length++;
            }
            else {
                // Insert a new node
                this.ranges.push({ length: 0, primary, secondary });
            }
        }
    }
    get(primary) {
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[0].primary);
        // Find the first range where the starting position is greater than the primary. Our target range is
        // the one before it.
        let index = 1;
        // tslint:disable-next-line:no-increment-decrement
        for (; index < this.ranges.length; index++) {
            if (primary < this.ranges[index].primary) {
                break;
            }
        }
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[index - 1].primary);
        // If the difference is within the stored range use it - otherwise add in the length - 1 as the highest
        // stored secondary value to use.
        const closestRange = this.ranges[index - 1];
        return Math.min(primary - closestRange.primary, closestRange.length) + closestRange.secondary;
    }
    updateBase(primary) {
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[0].primary);
        // Walk the ranges looking for the first one that is greater than the primary. Primary is then within the
        // previous index by definition (since it's less than the current index's primary but greather than the
        // previous index's primary) and we know primary must be greater than the base.
        let index = 1;
        // tslint:disable-next-line:no-increment-decrement
        for (; index < this.ranges.length; index++) {
            if (primary < this.ranges[index].primary) {
                break;
            }
        }
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[index - 1].primary);
        // Update the last range values
        const range = this.ranges[index - 1];
        const delta = primary - range.primary;
        range.secondary = range.secondary + Math.min(delta, range.length);
        range.length = Math.max(range.length - delta, 0);
        range.primary = primary;
        // And remove unnecessary ranges
        this.ranges = index - 1 > 0 ? this.ranges.slice(index - 1) : this.ranges;
        // assert that the lowest value is now the input to this method
        assert__WEBPACK_IMPORTED_MODULE_0__["equal"](primary, this.ranges[0].primary);
    }
}
//# sourceMappingURL=rangeTracker.js.map

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/rateLimitter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/rateLimitter.js ***!
  \***************************************************************************************/
/*! exports provided: RateLimitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RateLimitter", function() { return RateLimitter; });
// A rate limiter to make sure that a client can only request help for one task within a time window.
class RateLimitter {
    constructor(windowMSec) {
        this.windowMSec = windowMSec;
        this.requestMap = new Map();
    }
    filter(clientId, messages) {
        const approvedList = [];
        const currentTime = Date.now();
        for (const message of messages) {
            const key = `${clientId}/${message}`;
            if (!this.requestMap.has(key)) {
                this.requestMap.set(key, currentTime);
                approvedList.push(message);
            }
            else if (this.requestMap.get(key) + this.windowMSec > currentTime) {
                continue;
            }
            else {
                this.requestMap.set(key, currentTime);
                approvedList.push(message);
            }
        }
        return approvedList;
    }
}
//# sourceMappingURL=rateLimitter.js.map

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/safeParser.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/safeParser.js ***!
  \*************************************************************************************/
/*! exports provided: safelyParseJSON */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safelyParseJSON", function() { return safelyParseJSON; });
function safelyParseJSON(json) {
    let parsed;
    try {
        parsed = JSON.parse(json);
    }
    catch (e) {
        //
    }
    return parsed;
}
//# sourceMappingURL=safeParser.js.map

/***/ }),

/***/ "./node_modules/@prague/component/node_modules/@prague/utils/lib/utils.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@prague/component/node_modules/@prague/utils/lib/utils.js ***!
  \********************************************************************************/
/*! exports provided: isSystemType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSystemType", function() { return isSystemType; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);

function isSystemType(type) {
    return (type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].RemoteHelp ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Integrate ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].ClientJoin ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].ClientLeave ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Fork);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@prague/container-definitions/dist/blobs.js":
/*!******************************************************************!*\
  !*** ./node_modules/@prague/container-definitions/dist/blobs.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getFileBlobType(mimeType) {
    switch (mimeType) {
        case "image/jpeg":
        case "image/png":
        case "image/gif":
        case "image/bmp": {
            return "image";
        }
        case "video/mp4": {
            return "video";
        }
        case "text/plain": {
            return "text";
        }
        default: {
            return "generic";
        }
    }
}
exports.getFileBlobType = getFileBlobType;
//# sourceMappingURL=blobs.js.map

/***/ }),

/***/ "./node_modules/@prague/container-definitions/dist/chaincode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@prague/container-definitions/dist/chaincode.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ConnectionState;
(function (ConnectionState) {
    /**
     * The document is no longer connected to the delta server
     */
    ConnectionState[ConnectionState["Disconnected"] = 0] = "Disconnected";
    /**
     * The document has an inbound connection but is still pending for outbound deltas
     */
    ConnectionState[ConnectionState["Connecting"] = 1] = "Connecting";
    /**
     * The document is fully connected
     */
    ConnectionState[ConnectionState["Connected"] = 2] = "Connected";
})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));
//# sourceMappingURL=chaincode.js.map

/***/ }),

/***/ "./node_modules/@prague/container-definitions/dist/clients.js":
/*!********************************************************************!*\
  !*** ./node_modules/@prague/container-definitions/dist/clients.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Browser = "browser";
exports.Robot = "robot";
//# sourceMappingURL=clients.js.map

/***/ }),

/***/ "./node_modules/@prague/container-definitions/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@prague/container-definitions/dist/index.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./blobs */ "./node_modules/@prague/container-definitions/dist/blobs.js"));
__export(__webpack_require__(/*! ./chaincode */ "./node_modules/@prague/container-definitions/dist/chaincode.js"));
__export(__webpack_require__(/*! ./clients */ "./node_modules/@prague/container-definitions/dist/clients.js"));
__export(__webpack_require__(/*! ./protocol */ "./node_modules/@prague/container-definitions/dist/protocol.js"));
__export(__webpack_require__(/*! ./storage */ "./node_modules/@prague/container-definitions/dist/storage.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/container-definitions/dist/protocol.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@prague/container-definitions/dist/protocol.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MessageType;
(function (MessageType) {
    // Empty operation message. Used to send an updated reference sequence number.
    MessageType["NoOp"] = "noop";
    // System message sent to indicate a new client has joined the collaboration
    MessageType["ClientJoin"] = "join";
    // System message sent to indicate a client has left the collaboration
    MessageType["ClientLeave"] = "leave";
    // Proposes a new consensus value
    MessageType["Propose"] = "propose";
    // Message used to reject a pending proposal
    MessageType["Reject"] = "reject";
    // Blob uploaded
    MessageType["BlobUploaded"] = "blobUploaded";
    // TODO the attach and operation names are partially historican. We may want to rename to align with changes
    // coming from code loading.
    // Creates a new channel and attaches chaincode to it
    MessageType["Attach"] = "attach";
    // Channel operation.
    MessageType["Operation"] = "op";
    // Chunked operation.
    MessageType["ChunkedOp"] = "chunkedOp";
    // Forced snapshot
    MessageType["Save"] = "saveOp";
    // System message to indicate the creation of a new fork
    MessageType["Fork"] = "fork";
    // Message sent when forwarding a sequenced message to an upstream branch
    MessageType["Integrate"] = "integrate";
    // Message to indicate the need of a remote agent for a document.
    MessageType["RemoteHelp"] = "remoteHelp";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
//# sourceMappingURL=protocol.js.map

/***/ }),

/***/ "./node_modules/@prague/container-definitions/dist/storage.js":
/*!********************************************************************!*\
  !*** ./node_modules/@prague/container-definitions/dist/storage.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FileMode;
(function (FileMode) {
    FileMode["File"] = "100644";
    FileMode["Executable"] = "100755";
    FileMode["Directory"] = "040000";
    FileMode["Commit"] = "160000";
    FileMode["Symlink"] = "120000";
})(FileMode = exports.FileMode || (exports.FileMode = {}));
/**
 * Type of entries that can be stored in a tree
 */
var TreeEntry;
(function (TreeEntry) {
    TreeEntry[TreeEntry["Blob"] = 0] = "Blob";
    TreeEntry[TreeEntry["Commit"] = 1] = "Commit";
    TreeEntry[TreeEntry["Tree"] = 2] = "Tree";
})(TreeEntry = exports.TreeEntry || (exports.TreeEntry = {}));
//# sourceMappingURL=storage.js.map

/***/ }),

/***/ "./node_modules/@prague/map/lib/counter.js":
/*!*************************************************!*\
  !*** ./node_modules/@prague/map/lib/counter.js ***!
  \*************************************************/
/*! exports provided: CounterFactory, Counter, CounterValueType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CounterFactory", function() { return CounterFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Counter", function() { return Counter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CounterValueType", function() { return CounterValueType; });
class CounterFactory {
    load(emitter, raw) {
        // tslint:disable-next-line:strict-boolean-expressions
        return new Counter(emitter, raw || 0);
    }
    store(value) {
        return value.value;
    }
}
class Counter {
    // tslint:disable-next-line:variable-name
    constructor(emitter, _value) {
        this.emitter = emitter;
        this._value = _value;
        /**
         * Can be set to register an event listener for when the counter is incremented. The callback indicates the
         * amount the counter was incremented by.
         */
        this.onIncrement = (value) => { return; };
    }
    get value() {
        return this._value;
    }
    increment(value, submit = true) {
        this._value = this._value + value;
        if (submit) {
            this.emitter.emit("increment", value);
        }
        this.onIncrement(value);
        return this;
    }
}
class CounterValueType {
    // tslint:enable:variable-name
    constructor() {
        this._factory = new CounterFactory();
        this._ops = new Map([[
                "increment",
                {
                    prepare: (value, params, local, op) => {
                        return Promise.resolve();
                    },
                    process: (value, params, context, local, op) => {
                        // Local ops were applied when the message was created
                        if (local) {
                            return;
                        }
                        value.increment(params, false);
                    },
                },
            ]]);
    }
    get name() {
        return CounterValueType.Name;
    }
    get factory() {
        return this._factory;
    }
    get ops() {
        return this._ops;
    }
}
CounterValueType.Name = "counter";
//# sourceMappingURL=counter.js.map

/***/ }),

/***/ "./node_modules/@prague/map/lib/debug.js":
/*!***********************************************!*\
  !*** ./node_modules/@prague/map/lib/debug.js ***!
  \***********************************************/
/*! exports provided: debug */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debug", function() { return debug; });
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);

const debug = debug__WEBPACK_IMPORTED_MODULE_0__("prague:map");
//# sourceMappingURL=debug.js.map

/***/ }),

/***/ "./node_modules/@prague/map/lib/extension.js":
/*!***************************************************!*\
  !*** ./node_modules/@prague/map/lib/extension.js ***!
  \***************************************************/
/*! exports provided: registerDefaultValueType, MapExtension */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerDefaultValueType", function() { return registerDefaultValueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapExtension", function() { return MapExtension; });
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./node_modules/@prague/map/lib/map.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

// register default types
const defaultValueTypes = new Array();
function registerDefaultValueType(type) {
    defaultValueTypes.push(type);
}
/**
 * The extension that defines the map
 */
class MapExtension {
    constructor() {
        this.type = MapExtension.Type;
    }
    load(runtime, id, minimumSequenceNumber, services, headerOrigin) {
        return __awaiter(this, void 0, void 0, function* () {
            const map = new _map__WEBPACK_IMPORTED_MODULE_0__["SharedMap"](id, runtime, MapExtension.Type);
            this.registerValueTypes(map, defaultValueTypes);
            yield map.load(minimumSequenceNumber, headerOrigin, services);
            return map;
        });
    }
    create(document, id) {
        const map = new _map__WEBPACK_IMPORTED_MODULE_0__["SharedMap"](id, document, MapExtension.Type);
        this.registerValueTypes(map, defaultValueTypes);
        map.initializeLocal();
        return map;
    }
    registerValueTypes(map, valueTypes) {
        for (const type of valueTypes) {
            map.registerValueType(type);
        }
    }
}
MapExtension.Type = "https://graph.microsoft.com/types/map";
//# sourceMappingURL=extension.js.map

/***/ }),

/***/ "./node_modules/@prague/map/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@prague/map/lib/index.js ***!
  \***********************************************/
/*! exports provided: CounterFactory, Counter, CounterValueType, registerDefaultValueType, MapExtension, copyMap, SharedMap, DistributedSetFactory, DistributedSet, DistributedSetValueType, MapView, DirectoryView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _counter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./counter */ "./node_modules/@prague/map/lib/counter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CounterFactory", function() { return _counter__WEBPACK_IMPORTED_MODULE_0__["CounterFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Counter", function() { return _counter__WEBPACK_IMPORTED_MODULE_0__["Counter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CounterValueType", function() { return _counter__WEBPACK_IMPORTED_MODULE_0__["CounterValueType"]; });

/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/map/lib/extension.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "registerDefaultValueType", function() { return _extension__WEBPACK_IMPORTED_MODULE_1__["registerDefaultValueType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MapExtension", function() { return _extension__WEBPACK_IMPORTED_MODULE_1__["MapExtension"]; });

/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ "./node_modules/@prague/map/lib/map.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "copyMap", function() { return _map__WEBPACK_IMPORTED_MODULE_2__["copyMap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedMap", function() { return _map__WEBPACK_IMPORTED_MODULE_2__["SharedMap"]; });

/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./set */ "./node_modules/@prague/map/lib/set.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DistributedSetFactory", function() { return _set__WEBPACK_IMPORTED_MODULE_3__["DistributedSetFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DistributedSet", function() { return _set__WEBPACK_IMPORTED_MODULE_3__["DistributedSet"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DistributedSetValueType", function() { return _set__WEBPACK_IMPORTED_MODULE_3__["DistributedSetValueType"]; });

/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view */ "./node_modules/@prague/map/lib/view.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MapView", function() { return _view__WEBPACK_IMPORTED_MODULE_4__["MapView"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DirectoryView", function() { return _view__WEBPACK_IMPORTED_MODULE_4__["DirectoryView"]; });






//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/map/lib/map.js":
/*!*********************************************!*\
  !*** ./node_modules/@prague/map/lib/map.js ***!
  \*********************************************/
/*! exports provided: copyMap, SharedMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyMap", function() { return copyMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedMap", function() { return SharedMap; });
/* harmony import */ var _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/api-definitions */ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/index.js");
/* harmony import */ var _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug */ "./node_modules/@prague/map/lib/debug.js");
/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/map/lib/extension.js");
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view */ "./node_modules/@prague/map/lib/view.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const snapshotFileName = "header";
const contentPath = "content";
/**
 * Copies all values from the provided SharedMap to the given Map
 */
function copyMap(from, to) {
    from.forEach((value, key) => {
        /* tslint:disable:no-unsafe-any */
        to.set(key, value);
    });
}
class ContentObjectStorage {
    constructor(storage) {
        this.storage = storage;
    }
    /* tslint:disable:promise-function-async */
    read(path) {
        return this.storage.read(`content/${path}`);
    }
}
/**
 * Implementation of a map shared object
 */
class SharedMap extends _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["SharedObject"] {
    /**
     * Constructs a new shared map. If the object is non-local an id and service interfaces will
     * be provided
     */
    constructor(id, runtime, type = _extension__WEBPACK_IMPORTED_MODULE_3__["MapExtension"].Type) {
        super(id, runtime, type);
        this.valueTypes = new Map();
        this.serializeFilter = (key, value, valueType) => value;
        this.messageHandler = new Map();
        this.pendingKeys = new Map();
        this.pendingClearClientSequenceNumber = -1;
        this.setMessageHandlers();
        this.initializeView();
        this[Symbol.toStringTag] = this.view.data[Symbol.toStringTag];
    }
    internalView() {
        return this.view;
    }
    keys() {
        return this.view.keys();
    }
    // TODO: entries and values will have incorrect content until
    // map contains plain values and meta-data is segregated into
    // separate map
    entries() {
        return this.view.data.entries();
    }
    values() {
        return this.view.data.values();
    }
    [Symbol.iterator]() {
        return this.view.data[Symbol.iterator]();
    }
    get size() {
        return this.view.data.size;
    }
    forEach(callbackFn) {
        this.view.forEach(callbackFn);
    }
    /**
     * Retrieves the value with the given key from the map.
     */
    get(key) {
        return this.view.get(key);
    }
    wait(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.view.wait(key);
        });
    }
    has(key) {
        return this.view.has(key);
    }
    set(key, value, type) {
        this.view.set(key, value, type);
        return this;
    }
    delete(key) {
        return this.view.delete(key);
    }
    clear() {
        return this.view.clear();
    }
    snapshot() {
        const tree = {
            entries: [
                {
                    mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["FileMode"].File,
                    path: snapshotFileName,
                    type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["TreeEntry"].Blob],
                    value: {
                        contents: this.view.serialize(this.serializeFilter),
                        encoding: "utf-8",
                    },
                },
            ],
            sha: null,
        };
        // Add the snapshot of the content to the tree
        const contentSnapshot = this.snapshotContent();
        if (contentSnapshot) {
            tree.entries.push({
                mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["FileMode"].Directory,
                path: contentPath,
                type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["TreeEntry"].Tree],
                value: contentSnapshot,
            });
        }
        return tree;
    }
    submitMapClearMessage(op) {
        const clientSequenceNumber = this.submitMapMessage(op);
        if (clientSequenceNumber !== -1) {
            this.pendingClearClientSequenceNumber = clientSequenceNumber;
        }
    }
    submitMapKeyMessage(op) {
        const clientSequenceNumber = this.submitMapMessage(op);
        if (clientSequenceNumber !== -1) {
            this.pendingKeys.set(op.key, clientSequenceNumber);
        }
    }
    submitMapMessage(op) {
        // Local operations do not require any extra processing
        if (this.isLocal()) {
            return -1;
        }
        // Once we have performed the attach submit the local operation
        return this.submitLocalMessage(op);
    }
    /**
     * Registers a new value type on the map
     */
    registerValueType(type) {
        this.valueTypes.set(type.name, type);
        function getOpHandler(op) {
            const handler = type.ops.get(op.value.type);
            if (!handler) {
                throw new Error("Unknown type message");
            }
            return handler;
        }
        const valueTypeMessageHandler = {
            prepare: (op, local, message) => __awaiter(this, void 0, void 0, function* () {
                const handler = getOpHandler(op);
                const value = this.view.get(op.key);
                return handler.prepare(value, op.value.value, local, message);
            }),
            process: (op, context, local, message) => {
                const handler = getOpHandler(op);
                const value = this.view.get(op.key);
                handler.process(value, op.value.value, context, local, message);
                this.emit("valueChanged", { key: op.key }, local, message);
            },
            submit: (op) => {
                this.submitLocalMessage(op);
            },
        };
        this.messageHandler.set(type.name, valueTypeMessageHandler);
    }
    hasValueType(type) {
        return this.valueTypes.has(type);
    }
    getValueType(type) {
        return this.valueTypes.get(type);
    }
    registerSerializeFilter(filter) {
        this.serializeFilter = filter;
    }
    /* tslint:disable:no-unnecessary-override */
    on(event, listener) {
        return super.on(event, listener);
    }
    onDisconnect() {
        Object(_debug__WEBPACK_IMPORTED_MODULE_2__["debug"])(`Map ${this.id} is now disconnected`);
        this.onDisconnectContent();
    }
    onConnect(pending) {
        Object(_debug__WEBPACK_IMPORTED_MODULE_2__["debug"])(`Map ${this.id} is now connected`);
        // REVIEW: Does it matter that the map and content message get out of order?
        // Filter the nonAck and pending messages into a map set and a content set.
        const mapMessages = [];
        const contentMessages = [];
        for (const message of pending) {
            if (this.isMapMessage(message)) {
                mapMessages.push(message);
            }
            else {
                contentMessages.push(message);
            }
        }
        // Deal with the map messages - for the map it's always last one wins so we just resend
        for (const message of mapMessages) {
            const handler = this.messageHandler.get(message.type);
            handler.submit(message);
        }
        // Allow content to catch up
        this.onConnectContent(contentMessages);
    }
    loadCore(minimumSequenceNumber, headerOrigin, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const header = yield storage.read(snapshotFileName);
            const data = header ? JSON.parse(Buffer.from(header, "base64")
                .toString("utf-8")) : {};
            yield this.view.populate(data);
            const contentStorage = new ContentObjectStorage(storage);
            yield this.loadContent(minimumSequenceNumber, headerOrigin, contentStorage);
        });
    }
    initializeLocalCore() {
        this.initializeContent();
    }
    processMinSequenceNumberChanged(value) {
        this.processMinSequenceNumberChangedContent(value);
    }
    loadContent(minimumSequenceNumber, headerOrigin, services) {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
    initializeContent() {
        return;
    }
    prepareCore(message, local) {
        if (message.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Operation) {
            const op = message.contents;
            if (this.messageHandler.has(op.type)) {
                return this.messageHandler.get(op.type)
                    .prepare(op, local, message);
            }
        }
        return this.prepareContent(message, local);
    }
    processCore(message, local, context) {
        let handled = false;
        if (message.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Operation) {
            const op = message.contents;
            if (this.messageHandler.has(op.type)) {
                this.messageHandler.get(op.type)
                    .process(op, context, local, message);
                handled = true;
            }
        }
        if (!handled) {
            this.processContent(message, local, context);
        }
    }
    attachCore() {
        this.view.attachAll();
        this.attachContent();
    }
    // The following three methods enable derived classes to provide custom content that is stored
    // with the map
    attachContent() {
        return;
    }
    prepareContent(message, local) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve();
        });
    }
    /**
     * Processes a content message
     */
    processContent(message, local, context) {
        return;
    }
    /**
     * Message sent to notify derived content of disconnection
     */
    onDisconnectContent() {
        return;
    }
    /**
     * Message sent upon reconnecting to the delta stream
     */
    onConnectContent(pending) {
        for (const message of pending) {
            this.submitLocalMessage(message);
        }
        return;
    }
    /**
     * Snapshots the content
     */
    snapshotContent() {
        return null;
    }
    /**
     * Notifies the content that the minimum sequence number has changed
     */
    processMinSequenceNumberChangedContent(value) {
        return;
    }
    needProcessKeyOperations(op, local, message) {
        if (this.pendingClearClientSequenceNumber !== -1) {
            // If I have a NACK clear, we can ignore all ops.
            return false;
        }
        if ((this.pendingKeys.size !== 0 && this.pendingKeys.has(op.key))) {
            // Found an NACK op, clear it from the map if the latest sequence number in the map match the message's
            // and don't process the op.
            if (local) {
                const pendingKeyClientSequenceNumber = this.pendingKeys.get(op.key);
                if (pendingKeyClientSequenceNumber === message.clientSequenceNumber) {
                    this.pendingKeys.delete(op.key);
                }
            }
            return false;
        }
        // If we don't have a NACK op on the key, we need to process the remote ops.
        return !local;
    }
    initializeView() {
        this.view = new _view__WEBPACK_IMPORTED_MODULE_4__["MapView"](this, this.runtime, this.id);
    }
    setMessageHandlers() {
        const defaultPrepare = (op, local) => Promise.resolve();
        // tslint:disable:no-backbone-get-set-outside-model
        this.messageHandler.set("clear", {
            prepare: defaultPrepare,
            process: (op, context, local, message) => {
                if (local) {
                    if (this.pendingClearClientSequenceNumber === message.clientSequenceNumber) {
                        this.pendingClearClientSequenceNumber = -1;
                    }
                    return false;
                }
                if (this.pendingKeys.size !== 0) {
                    this.view.clearExceptPendingKeys(this.pendingKeys);
                    return;
                }
                this.view.clearCore(local, message);
            },
            submit: (op) => {
                this.submitMapClearMessage(op);
            },
        });
        this.messageHandler.set("delete", {
            prepare: defaultPrepare,
            process: (op, context, local, message) => {
                if (!this.needProcessKeyOperations(op, local, message)) {
                    return;
                }
                return this.view.deleteCore(op.key, local, message);
            },
            submit: (op) => {
                this.submitMapKeyMessage(op);
            },
        });
        this.messageHandler.set("set", {
            prepare: (op, local) => {
                return local ? Promise.resolve(null) : this.view.prepareSetCore(op.key, op.value);
            },
            process: (op, context, local, message) => {
                if (!this.needProcessKeyOperations(op, local, message)) {
                    return;
                }
                this.view.setCore(op.key, context, local, message);
            },
            submit: (op) => {
                this.submitMapKeyMessage(op);
            },
        });
    }
    isMapMessage(message) {
        const type = message.type;
        return this.messageHandler.has(type);
    }
}
//# sourceMappingURL=map.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/map/lib/set.js":
/*!*********************************************!*\
  !*** ./node_modules/@prague/map/lib/set.js ***!
  \*********************************************/
/*! exports provided: DistributedSetFactory, DistributedSet, DistributedSetValueType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DistributedSetFactory", function() { return DistributedSetFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DistributedSet", function() { return DistributedSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DistributedSetValueType", function() { return DistributedSetValueType; });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class DistributedSetFactory {
    load(emitter, raw) {
        return new DistributedSet(emitter, raw || []);
    }
    store(value) {
        return value.entries();
    }
}
class DistributedSet {
    constructor(emitter, value) {
        this.emitter = emitter;
        /**
         * Can be set to register an event listener for when values are added or deleted from the set.
         */
        this.onAdd = (value) => { return; };
        this.onDelete = (value) => { return; };
        this.internalSet = new Set(value);
    }
    add(value, submitEvent = true) {
        this.internalSet.add(value);
        if (submitEvent) {
            this.emitter.emit("add", value);
        }
        this.onAdd(value);
        return this;
    }
    delete(value, submitEvent = true) {
        this.internalSet.delete(value);
        if (submitEvent) {
            this.emitter.emit("delete", value);
        }
        this.onDelete(value);
        return this;
    }
    entries() {
        return Array.from(this.internalSet.values());
    }
}
class DistributedSetValueType {
    // tslint:enable:variable-name
    constructor() {
        this._factory = new DistributedSetFactory();
        this._ops = new Map([[
                "add",
                {
                    prepare: (value, params, local, op) => __awaiter(this, void 0, void 0, function* () {
                        return;
                    }),
                    process: (value, params, context, local, op) => {
                        // Local ops were applied when the message was created
                        if (local) {
                            return;
                        }
                        value.add(params, false);
                    },
                },
            ],
            [
                "delete",
                {
                    prepare: (value, params, local, op) => __awaiter(this, void 0, void 0, function* () {
                        return;
                    }),
                    process: (value, params, context, local, op) => {
                        // Local ops were applied when the message was created
                        if (local) {
                            return;
                        }
                        value.delete(params, false);
                    },
                },
            ]]);
    }
    get name() {
        return DistributedSetValueType.Name;
    }
    get factory() {
        return this._factory;
    }
    get ops() {
        return this._ops;
    }
}
DistributedSetValueType.Name = "distributedSet";
//# sourceMappingURL=set.js.map

/***/ }),

/***/ "./node_modules/@prague/map/lib/view.js":
/*!**********************************************!*\
  !*** ./node_modules/@prague/map/lib/view.js ***!
  \**********************************************/
/*! exports provided: MapView, DirectoryView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapView", function() { return MapView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectoryView", function() { return DirectoryView; });
/* harmony import */ var _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/api-definitions */ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/index.js");
/* harmony import */ var _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// tslint:disable:align

class ValueOpEmitter {
    constructor(type, key, map) {
        this.type = type;
        this.key = key;
        this.map = map;
    }
    emit(name, params) {
        const op = {
            key: this.key,
            type: this.type,
            value: {
                type: name,
                value: params,
            },
        };
        this.map.submitMapMessage(op);
        this.map.emit("valueChanged", { key: this.key }, true, null);
    }
}
class MapView {
    constructor(map, runtime, id) {
        this.map = map;
        this.runtime = runtime;
        this.data = new Map();
    }
    populate(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const localValuesP = new Array();
            // tslint:disable-next-line:forin
            for (const key in data) {
                const value = data[key];
                const localValueP = this.fill(key, value)
                    .then((filledValue) => ({ key, value: filledValue }));
                localValuesP.push(localValueP);
            }
            const localValues = yield Promise.all(localValuesP);
            for (const localValue of localValues) {
                this.data.set(localValue.key, localValue.value);
            }
        });
    }
    // TODO: fix to pass-through when meta-data moved to separate map
    forEach(callbackFn) {
        this.data.forEach((value, key, m) => {
            callbackFn(value.localValue, key, m);
        });
    }
    get(key) {
        if (!this.data.has(key)) {
            return undefined;
        }
        // Let's stash the *type* of the object on the key
        const value = this.data.get(key);
        return value.localValue;
    }
    getMap() {
        return this.map;
    }
    wait(key) {
        return __awaiter(this, void 0, void 0, function* () {
            // Return immediately if the value already exists
            if (this.has(key)) {
                /* tslint:disable:no-unsafe-any */
                /* tslint:disable:no-object-literal-type-assertion */
                return this.get(key);
            }
            // Otherwise subscribe to changes
            return new Promise((resolve, reject) => {
                const callback = (value) => {
                    if (key === value.key) {
                        resolve(this.get(value.key));
                        this.map.removeListener("valueChanged", callback);
                    }
                };
                this.map.on("valueChanged", callback);
            });
        });
    }
    has(key) {
        return this.data.has(key);
    }
    attachAll() {
        for (const [, value] of this.data) {
            if (value.localValue instanceof _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["SharedObject"]) {
                value.localValue.attach();
            }
        }
    }
    prepareOperationValue(key, value, type) {
        let operationValue;
        if (type) {
            const valueType = this.map.getValueType(type);
            if (!valueType) {
                throw new Error(`Unknown type '${type}' specified`);
            }
            // set operationValue first with the raw value params prior to doing the load
            operationValue = {
                type,
                value,
            };
            // tslint:disable-next-line:no-parameter-reassignment
            value = valueType.factory.load(new ValueOpEmitter(type, key, this.map), value);
        }
        else {
            const valueType = value instanceof _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["SharedObject"]
                ? _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"][_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"].Shared]
                : _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"][_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"].Plain];
            operationValue = this.spill({ localType: valueType, localValue: value });
        }
        return { operationValue, localValue: value };
    }
    set(key, value, type) {
        const values = this.prepareOperationValue(key, value, type);
        const op = {
            key,
            type: "set",
            value: values.operationValue,
        };
        this.setCore(op.key, {
            localType: values.operationValue.type,
            localValue: values.localValue,
        }, true, null);
        this.map.submitMapKeyMessage(op);
    }
    delete(key) {
        const op = {
            key,
            type: "delete",
        };
        const successfullyRemoved = this.deleteCore(op.key, true, null);
        this.map.submitMapKeyMessage(op);
        return successfullyRemoved;
    }
    keys() {
        return this.data.keys();
    }
    clear() {
        const op = {
            type: "clear",
        };
        this.clearCore(true, null);
        this.map.submitMapClearMessage(op);
    }
    /**
     * Serializes the shared map to a JSON string
     */
    serialize(filter) {
        const serialized = {};
        this.data.forEach((value, key) => {
            const spilledValue = this.spill(value);
            const filteredValue = filter(key, spilledValue.value, spilledValue.type);
            serialized[key] = { type: spilledValue.type, value: filteredValue };
        });
        return JSON.stringify(serialized);
    }
    setCore(key, value, local, op) {
        this.data.set(key, value);
        this.map.emit("valueChanged", { key }, local, op);
    }
    prepareSetCore(key, value) {
        return this.fill(key, value);
    }
    clearCore(local, op) {
        this.data.clear();
        this.map.emit("clear", local, op);
    }
    deleteCore(key, local, op) {
        const successfullyRemoved = this.data.delete(key);
        this.map.emit("valueChanged", { key }, local, op);
        return successfullyRemoved;
    }
    clearExceptPendingKeys(pendingKeys) {
        // Assuming the pendingKeys is small and the map is large
        // we will get the value for the pendingKeys and clear the map
        const temp = new Map();
        pendingKeys.forEach((value, key, map) => {
            temp.set(key, this.data.get(key));
        });
        this.data.clear();
        temp.forEach((value, key, map) => {
            this.data.set(key, value);
        });
    }
    fill(key, remote) {
        return __awaiter(this, void 0, void 0, function* () {
            let translatedValue;
            if (remote.type === _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"][_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"].Shared]) {
                const distributedObject = yield this.runtime.getChannel(remote.value);
                translatedValue = distributedObject;
            }
            else if (remote.type === _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"][_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"].Plain]) {
                translatedValue = remote.value;
            }
            else if (this.map.hasValueType(remote.type)) {
                const valueType = this.map.getValueType(remote.type);
                translatedValue = valueType.factory.load(new ValueOpEmitter(remote.type, key, this.map), remote.value);
            }
            else {
                return Promise.reject("Unknown value type");
            }
            return {
                localType: remote.type,
                localValue: translatedValue,
            };
        });
    }
    spill(local) {
        if (local.localType === _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"][_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"].Shared]) {
            const distributedObject = local.localValue;
            // Attach the collab object to the document. If already attached the attach call will noop.
            // This feels slightly out of place here since it has a side effect. But is part of spilling a document.
            // Not sure if there is some kind of prep call to separate the op creation from things needed to make it
            // (like attaching)
            if (!this.map.isLocal()) {
                distributedObject.attach();
            }
            return {
                type: _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"][_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"].Shared],
                value: distributedObject.id,
            };
        }
        else if (this.map.hasValueType(local.localType)) {
            const valueType = this.map.getValueType(local.localType);
            return {
                type: local.localType,
                value: valueType.factory.store(local.localValue),
            };
        }
        else {
            return {
                type: _prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"][_prague_api_definitions__WEBPACK_IMPORTED_MODULE_0__["ValueType"].Plain],
                value: local.localValue,
            };
        }
    }
}
class DirectoryView extends MapView {
    constructor(directory, runtime, id) {
        super(directory, runtime, id);
    }
}
//# sourceMappingURL=view.js.map

/***/ }),

/***/ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/debug.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/debug.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const registerDebug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
exports.debug = registerDebug("prague:api-definitions");
//# sourceMappingURL=debug.js.map

/***/ }),

/***/ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/extension.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/extension.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class that contains a collection of collaboration extensions
 */
class Registry {
    constructor() {
        this.extensions = [];
        this.extensionsMap = {};
    }
    /**
     * Registers a new extension
     * @param extension The extension to register
     */
    register(extension) {
        this.extensions.push(extension);
        this.extensionsMap[extension.type] = extension;
    }
    /**
     * Retrieves the extension with the given id
     * @param id ID for the extension to retrieve
     */
    getExtension(type) {
        if (!(type in this.extensionsMap)) {
            throw new Error("Extension not found");
        }
        return this.extensionsMap[type];
    }
}
exports.Registry = Registry;
//# sourceMappingURL=extension.js.map

/***/ }),

/***/ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sharedObject */ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/sharedObject.js"));
__export(__webpack_require__(/*! ./extension */ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/extension.js"));
__export(__webpack_require__(/*! ./valueType */ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/valueType.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/sharedObject.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/sharedObject.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const container_definitions_1 = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
const assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
const Deque = __webpack_require__(/*! double-ended-queue */ "./node_modules/double-ended-queue/js/deque.js");
const events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
const debug_1 = __webpack_require__(/*! ./debug */ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/debug.js");
const valueType_1 = __webpack_require__(/*! ./valueType */ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/valueType.js");
class SharedObject extends events_1.EventEmitter {
    constructor(id, runtime, type) {
        super();
        this.id = id;
        this.runtime = runtime;
        this.type = type;
        // tslint:disable-next-line:variable-name
        this.__sharedObject__ = true;
        // tslint:disable-next-line:variable-name private fields exposed via getters
        this._state = container_definitions_1.ConnectionState.Disconnected;
        // Locally applied operations not yet ACK'd by the server
        this.pendingOps = new Deque();
    }
    get state() {
        return this._state;
    }
    toJSON() {
        return {
            type: valueType_1.ValueType[valueType_1.ValueType.Shared],
            value: this.id,
        };
    }
    /**
     * A shared object, after construction, can either be loaded in the case that it is already part of
     * a shared document. Or later attached if it is being newly added.
     */
    load(minimumSequenceNumber, headerOrigin, services) {
        return __awaiter(this, void 0, void 0, function* () {
            this.services = services;
            yield this.loadCore(minimumSequenceNumber, headerOrigin, services.objectStorage);
            this.attachDeltaHandler();
        });
    }
    /**
     * Initializes the object as a local, non-shared object. This object can become shared after
     * it is attached to the document.
     */
    initializeLocal() {
        this.initializeLocalCore();
    }
    /**
     * Attaches the given shared object to its containing document
     */
    attach() {
        if (!this.isLocal()) {
            return this;
        }
        // Allow derived classes to perform custom processing prior to attaching this object
        this.attachCore();
        // Notify the document of the attachment
        this.services = this.runtime.attachChannel(this);
        this.attachDeltaHandler();
        return this;
    }
    /**
     * Returns whether the given shared object is local
     */
    isLocal() {
        return !this.services;
    }
    /* tslint:disable:no-unnecessary-override */
    on(event, listener) {
        return super.on(event, listener);
    }
    /**
     * Processes a message by the local client
     */
    submitLocalMessage(content) {
        assert(!this.isLocal());
        // Send if we are connected - otherwise just add to the sent list
        let clientSequenceNumber = -1;
        if (this.state === container_definitions_1.ConnectionState.Connected) {
            clientSequenceNumber = this.services.deltaConnection.submit(content);
        }
        else {
            debug_1.debug(`${this.id} Not fully connected - adding to pending list`, content);
            // Store the message for when it is ACKed and then submit to the server if connected
        }
        this.pendingOps.push({ clientSequenceNumber, content });
        return clientSequenceNumber;
    }
    attachDeltaHandler() {
        this.services.deltaConnection.attach({
            minSequenceNumberChanged: (value) => {
                this.processMinSequenceNumberChanged(value);
            },
            prepare: (message, local) => {
                return this.prepare(message, local);
            },
            process: (message, local, context) => {
                this.process(message, local, context);
            },
            setConnectionState: (state) => {
                this.setConnectionState(state);
            },
        });
        // Trigger initial state
        this.setConnectionState(this.services.deltaConnection.state);
    }
    prepare(message, local) {
        return this.prepareCore(message, local);
    }
    setConnectionState(state) {
        // Should I change the state at the end? So that we *can't* send new stuff before we send old?
        this._state = state;
        switch (state) {
            case container_definitions_1.ConnectionState.Disconnected:
                // Things that are true now...
                // - if we had a connection we can no longer send messages over it
                // - if we had outbound messages some may or may not be ACK'd. Won't know until next message
                //
                // - nack could get a new msn - but might as well do it in the join?
                this.onDisconnect();
                break;
            case container_definitions_1.ConnectionState.Connecting:
                // Things that are now true...
                // - we will begin to receive inbound messages
                // - we know what our new client id is.
                // - still not safe to send messages
                // While connecting we are still ticking off the previous messages
                debug_1.debug(`${this.id} is now connecting`);
                break;
            case container_definitions_1.ConnectionState.Connected:
                // Extract all un-ack'd payload operation
                const pendingOps = this.pendingOps.toArray().map((value) => value.content);
                this.pendingOps.clear();
                // And now we are fully connected
                // - we have a client ID
                // - we are caught up enough to attempt to send messages
                this.onConnect(pendingOps);
                break;
            default:
                assert.ok(false, `Unknown ConnectionState ${state}`);
        }
    }
    /**
     * Handles a message being received from the remote delta server
     */
    process(message, local, context) {
        if (message.type === container_definitions_1.MessageType.Operation && local) {
            // disconnected ops should never be processed. They should have been fully sent on connected
            assert(this.pendingOps.length === 0 || this.pendingOps.peekFront().clientSequenceNumber !== -1, `process for disconnected op ${this.pendingOps.peekFront().clientSequenceNumber}`);
            // One of our messages was sequenced. We can remove it from the local message list. Given these arrive
            // in order we only need to check the beginning of the local list.
            if (this.pendingOps.length > 0 &&
                this.pendingOps.peekFront().clientSequenceNumber === message.clientSequenceNumber) {
                this.pendingOps.shift();
                if (this.pendingOps.length === 0) {
                    this.emit("processed");
                }
            }
            else {
                debug_1.debug(`Duplicate ack received ${message.clientSequenceNumber}`);
            }
        }
        this.emit("pre-op", message, local);
        this.processCore(message, local, context);
        this.emit("op", message, local);
    }
}
exports.SharedObject = SharedObject;
//# sourceMappingURL=sharedObject.js.map

/***/ }),

/***/ "./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/valueType.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@prague/map/node_modules/@prague/api-definitions/dist/valueType.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// TODO this is probably too map specific - but is used to serailize objects in certain cases
var ValueType;
(function (ValueType) {
    // The value is a shared object
    ValueType[ValueType["Shared"] = 0] = "Shared";
    // The value is a plain JavaScript object
    ValueType[ValueType["Plain"] = 1] = "Plain";
    // The value is a counter
    ValueType[ValueType["Counter"] = 2] = "Counter";
    // The value is a set
    ValueType[ValueType["Set"] = 3] = "Set";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
//# sourceMappingURL=valueType.js.map

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/client.js":
/*!*******************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/client.js ***!
  \*******************************************************/
/*! exports provided: Client */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Client", function() { return Client; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mergeTree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeTree */ "./node_modules/@prague/merge-tree/lib/mergeTree.js");
/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./collections */ "./node_modules/@prague/merge-tree/lib/collections.js");
// tslint:disable



class Client {
    constructor(initText, options) {
        this.accumTime = 0;
        this.localTime = 0;
        this.localOps = 0;
        this.accumWindowTime = 0;
        this.maxWindowTime = 0;
        this.accumWindow = 0;
        this.accumOps = 0;
        this.verboseOps = false;
        this.noVerboseRemoteAnnote = false;
        this.measureOps = false;
        this.clientSequenceNumber = 1;
        this.clientNameToIds = new _collections__WEBPACK_IMPORTED_MODULE_2__["RedBlackTree"](_mergeTree__WEBPACK_IMPORTED_MODULE_1__["compareStrings"]);
        this.shortClientIdMap = [];
        this.shortClientBranchIdMap = [];
        this.shortClientUserInfoMap = [];
        this.registerCollection = new _mergeTree__WEBPACK_IMPORTED_MODULE_1__["RegisterCollection"]();
        this.localSequenceNumber = _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"];
        this.opMarkersModified = [];
        this.pendingConsensus = new Map();
        this.mergeTree = new _mergeTree__WEBPACK_IMPORTED_MODULE_1__["MergeTree"](initText, options);
        this.mergeTree.getLongClientId = id => this.getLongClientId(id);
        this.mergeTree.getUserInfo = id => this.getUserInfo(id);
        this.mergeTree.markerModifiedHandler = marker => this.markerModified(marker);
        this.mergeTree.clientIdToBranchId = this.shortClientBranchIdMap;
        this.q = _collections__WEBPACK_IMPORTED_MODULE_2__["ListMakeHead"]();
        this.checkQ = _collections__WEBPACK_IMPORTED_MODULE_2__["ListMakeHead"]();
    }
    resetModifiedMarkers() {
        this.opMarkersModified = [];
    }
    markerModified(marker) {
        this.opMarkersModified.push(marker);
    }
    setLocalSequenceNumber(seq) {
        this.localSequenceNumber = seq;
    }
    resetLocalSequenceNumber() {
        this.localSequenceNumber = _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"];
    }
    undoSingleSequenceNumber(undoSegments, redoSegments) {
        let len = undoSegments.length;
        let index = len - 1;
        let seq = undoSegments[index].seq;
        if (seq === 0) {
            return 0;
        }
        while (index >= 0) {
            let undoInfo = undoSegments[index];
            if (seq === undoInfo.seq) {
                this.mergeTree.cherryPickedUndo(undoInfo);
                redoSegments.push(undoInfo);
            }
            else {
                break;
            }
            index--;
        }
        undoSegments.length = index + 1;
        return seq;
    }
    historyToPct(pct) {
        let count = this.undoSegments.length + this.redoSegments.length;
        let curPct = this.undoSegments.length / count;
        let seq = -1;
        if (curPct >= pct) {
            while (curPct > pct) {
                seq = this.undoSingleSequenceNumber(this.undoSegments, this.redoSegments);
                curPct = this.undoSegments.length / count;
            }
        }
        else {
            while (curPct < pct) {
                seq = this.undoSingleSequenceNumber(this.redoSegments, this.undoSegments);
                curPct = this.undoSegments.length / count;
            }
        }
        return seq;
    }
    undo() {
        return this.undoSingleSequenceNumber(this.undoSegments, this.redoSegments);
    }
    redo() {
        return this.undoSingleSequenceNumber(this.redoSegments, this.undoSegments);
    }
    cloneFromSegments() {
        let clone = new Client("", this.mergeTree.options);
        let segments = [];
        let newRoot = this.mergeTree.blockClone(this.mergeTree.root, segments);
        clone.mergeTree.root = newRoot;
        let undoSeg = [];
        for (let segment of segments) {
            if (segment.seq !== 0) {
                undoSeg.push({
                    seq: segment.seq,
                    seg: segment,
                    op: 0 /* INSERT */
                });
            }
            if (segment.removedSeq !== undefined) {
                undoSeg.push({
                    seq: segment.removedSeq,
                    seg: segment,
                    op: 1 /* REMOVE */
                });
            }
        }
        undoSeg = undoSeg.sort((a, b) => {
            if (b.seq === a.seq) {
                return 0;
            }
            else if (b.seq === _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"]) {
                return -1;
            }
            else if (a.seq === _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"]) {
                return 1;
            }
            else {
                return a.seq - b.seq;
            }
        });
        clone.undoSegments = undoSeg;
        clone.redoSegments = [];
        return clone;
    }
    getOrAddShortClientId(longClientId, branchId = 0) {
        if (!this.clientNameToIds.get(longClientId)) {
            this.addLongClientId(longClientId, branchId);
        }
        return this.getShortClientId(longClientId);
    }
    getShortClientId(longClientId) {
        return this.clientNameToIds.get(longClientId).data.clientId;
    }
    getLongClientId(shortClientId) {
        if (shortClientId >= 0) {
            return this.shortClientIdMap[shortClientId];
        }
        else {
            return "original";
        }
    }
    getUserInfo(shortClientId) {
        if (shortClientId >= 0) {
            return this.shortClientUserInfoMap[shortClientId];
        }
        else {
            return null;
        }
    }
    addLongClientId(longClientId, branchId = 0) {
        this.clientNameToIds.put(longClientId, {
            branchId,
            clientId: this.shortClientIdMap.length,
        });
        this.shortClientIdMap.push(longClientId);
        this.shortClientBranchIdMap.push(branchId);
    }
    getBranchId(clientId) {
        return this.shortClientBranchIdMap[clientId];
    }
    // TODO: props, end
    makeInsertMarkerMsg(markerType, behaviors, pos, seq, refSeq, objectId) {
        return {
            clientId: this.longClientId,
            minimumSequenceNumber: undefined,
            clientSequenceNumber: this.clientSequenceNumber,
            sequenceNumber: seq,
            referenceSequenceNumber: refSeq,
            objectId: objectId,
            userId: undefined,
            offset: seq,
            origin: null,
            contents: {
                type: 0 /* INSERT */, marker: { type: markerType, behaviors }, pos1: pos
            },
            timestamp: Date.now(),
            traces: [],
            type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Operation,
        };
    }
    makeInsertMsg(text, pos, seq, refSeq, objectId) {
        return {
            clientId: this.longClientId,
            sequenceNumber: seq,
            referenceSequenceNumber: refSeq,
            clientSequenceNumber: this.clientSequenceNumber,
            minimumSequenceNumber: undefined,
            objectId: objectId,
            userId: undefined,
            offset: seq,
            origin: null,
            contents: {
                type: 0 /* INSERT */, text: text, pos1: pos
            },
            timestamp: Date.now(),
            traces: [],
            type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Operation,
        };
    }
    makeRemoveMsg(start, end, seq, refSeq, objectId) {
        return {
            clientId: this.longClientId,
            sequenceNumber: seq,
            referenceSequenceNumber: refSeq,
            clientSequenceNumber: this.clientSequenceNumber,
            minimumSequenceNumber: undefined,
            objectId: objectId,
            userId: undefined,
            offset: seq,
            origin: null,
            contents: {
                type: 1 /* REMOVE */, pos1: start, pos2: end,
            },
            timestamp: Date.now(),
            traces: [],
            type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Operation,
        };
    }
    makeAnnotateMsg(props, start, end, seq, refSeq, objectId) {
        return {
            clientId: this.longClientId,
            sequenceNumber: seq,
            referenceSequenceNumber: refSeq,
            objectId: objectId,
            clientSequenceNumber: this.clientSequenceNumber,
            userId: undefined,
            minimumSequenceNumber: undefined,
            offset: seq,
            origin: null,
            contents: {
                type: 2 /* ANNOTATE */, pos1: start, pos2: end, props
            },
            timestamp: Date.now(),
            traces: [],
            type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Operation,
        };
    }
    hasMessages() {
        return this.q.count() > 0;
    }
    enqueueMsg(msg) {
        this.q.enqueue(msg);
    }
    dequeueMsg() {
        return this.q.dequeue();
    }
    enqueueTestString() {
        this.checkQ.enqueue(this.getText());
    }
    segmentToOps(segment, opList) {
        // TODO: branches
        if (segment.seq === _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"]) {
            let pos = this.mergeTree.getOffset(segment, this.getCurrentSeq(), this.getClientId());
            let insertOp = {
                pos1: pos,
                type: 0 /* INSERT */,
            };
            if (segment.getType() === _mergeTree__WEBPACK_IMPORTED_MODULE_1__["SegmentType"].Text) {
                let textSegment = segment;
                insertOp.text = textSegment.text;
            }
            else {
                // assume marker
                let marker = segment;
                insertOp.marker = { refType: marker.refType };
            }
            if (segment.properties) {
                insertOp.props = segment.properties;
            }
            opList.push(insertOp);
        }
        if (segment.removedSeq === _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"]) {
            let start = this.mergeTree.getOffset(segment, this.getCurrentSeq(), this.getClientId());
            let removeOp = {
                pos1: start,
                pos2: start + segment.cachedLength,
                type: 1 /* REMOVE */,
            };
            opList.push(removeOp);
        }
    }
    transformOp(op, referenceSequenceNumber, toSequenceNumber) {
        if ((op.type == 2 /* ANNOTATE */) ||
            (op.type == 1 /* REMOVE */)) {
            let ranges = this.mergeTree.tardisRange(op.pos1, op.pos2, referenceSequenceNumber, toSequenceNumber);
            if (ranges.length == 1) {
                op.pos1 = ranges[0].start;
                op.pos2 = ranges[0].end;
            }
            else {
                let groupOp = { type: 3 /* GROUP */ };
                groupOp.ops = ranges.map((range) => ({
                    type: op.type,
                    pos1: range.start,
                    pos2: range.end,
                }));
                return groupOp;
            }
        }
        else if (op.type == 0 /* INSERT */) {
            op.pos1 = this.mergeTree.tardisPosition(op.pos1, referenceSequenceNumber, toSequenceNumber);
        }
        else if (op.type === 3 /* GROUP */) {
            for (let i = 0, len = op.ops.length; i < len; i++) {
                op.ops[i] = this.transformOp(op.ops[i], referenceSequenceNumber, toSequenceNumber);
            }
        }
        return op;
    }
    transform(op, referenceSequenceNumber, toSequenceNumber) {
        if (referenceSequenceNumber >= toSequenceNumber) {
            return op;
        }
        return this.transformOp(op, referenceSequenceNumber, toSequenceNumber);
    }
    copy(start, end, registerId, refSeq, clientId, longClientId) {
        let segs = this.mergeTree.cloneSegments(refSeq, clientId, start, end);
        this.registerCollection.set(longClientId, registerId, segs);
    }
    pasteLocal(register, pos, opArgs) {
        let segs = this.registerCollection.get(this.longClientId, register);
        if (segs) {
            this.mergeTree.startGroupOperation();
            // TODO: build tree from segs and insert all at once
            for (let seg of segs) {
                if (seg.getType() === _mergeTree__WEBPACK_IMPORTED_MODULE_1__["SegmentType"].Text) {
                    let textSegment = seg;
                    this.insertTextLocal(textSegment.text, pos, textSegment.properties, opArgs);
                    pos += textSegment.cachedLength;
                }
                else {
                    let marker = seg;
                    this.insertMarkerLocal(pos, marker.refType, marker.properties, opArgs);
                    pos += marker.cachedLength;
                }
            }
            this.mergeTree.endGroupOperation();
        }
        return pos;
    }
    pasteRemote(pos, registerId, seq, refSeq, clientId, longClientId, opArgs) {
        let segs = this.registerCollection.get(longClientId, registerId);
        if (segs) {
            // TODO: build tree from segs and insert all at once
            for (let seg of segs) {
                if (seg.getType() === _mergeTree__WEBPACK_IMPORTED_MODULE_1__["SegmentType"].Text) {
                    let textSegment = seg;
                    this.insertTextRemote(textSegment.text, pos, textSegment.properties, seq, refSeq, clientId, opArgs);
                    pos += textSegment.cachedLength;
                }
                else {
                    let marker = seg;
                    this.insertMarkerRemote({ refType: marker.refType }, pos, marker.properties, seq, refSeq, clientId, opArgs);
                    pos += marker.cachedLength;
                }
            }
        }
        // TODO: error reporting
    }
    checkNest(op, msg, clid) {
        let beginMarker = this.mergeTree.getSegmentFromId(op.checkNest.id1);
        let endMarker = this.mergeTree.getSegmentFromId(op.checkNest.id2);
        let beginPos = this.mergeTree.getOffset(beginMarker, msg.referenceSequenceNumber, clid);
        let endPos = endMarker.cachedLength + this.mergeTree.getOffset(endMarker, msg.referenceSequenceNumber, clid);
        if ((beginPos !== op.pos1) || (endPos !== op.pos2)) {
            console.log(`remove nest mismatch ${beginPos} ${op.pos1} ${endPos} ${op.pos2}`);
        }
    }
    applyOp(opArgs) {
        const op = opArgs.op;
        const msg = opArgs.sequencedMessage;
        let clid = this.getOrAddShortClientId(msg.clientId);
        switch (op.type) {
            case 0 /* INSERT */:
                if (op.relativePos1) {
                    op.pos1 = this.mergeTree.posFromRelativePos(op.relativePos1, msg.referenceSequenceNumber, clid);
                    if (op.pos1 < 0) {
                        // TODO: event when marker id not found
                        return;
                    }
                }
                if (op.text !== undefined) {
                    if (op.pos2 !== undefined) {
                        // replace
                        this.removeSegmentRemote(op.pos1, op.pos2, msg.sequenceNumber, msg.referenceSequenceNumber, clid, opArgs);
                    }
                    this.insertTextRemote(op.text, op.pos1, op.props, msg.sequenceNumber, msg.referenceSequenceNumber, clid, opArgs);
                }
                else if (op.marker !== undefined) {
                    this.insertMarkerRemote(op.marker, op.pos1, op.props, msg.sequenceNumber, msg.referenceSequenceNumber, clid, opArgs);
                }
                else if (op.items !== undefined) {
                    this.insertItemsRemote(op.items, op.isNumberSequence, op.pos1, op.props, msg.sequenceNumber, msg.referenceSequenceNumber, clid, opArgs);
                }
                else if (op.register !== undefined) {
                    // TODO: relative addressing
                    if (op.pos2 !== undefined) {
                        // copy
                        this.copy(op.pos1, op.pos2, op.register, msg.referenceSequenceNumber, clid, msg.clientId);
                    }
                    else {
                        // paste
                        this.pasteRemote(op.pos1, op.register, msg.sequenceNumber, msg.referenceSequenceNumber, clid, msg.clientId, opArgs);
                    }
                }
                break;
            case 1 /* REMOVE */:
                if (op.relativePos1) {
                    op.pos1 = this.mergeTree.posFromRelativePos(op.relativePos1, msg.referenceSequenceNumber, clid);
                    if (op.pos1 < 0) {
                        // TODO: event when marker id not found
                        return;
                    }
                }
                if (op.relativePos2) {
                    op.pos2 = this.mergeTree.posFromRelativePos(op.relativePos2, msg.referenceSequenceNumber, clid);
                    if (op.pos2 < 0) {
                        // TODO: event when marker id not found
                        return;
                    }
                }
                if (op.register) {
                    // cut
                    this.copy(op.pos1, op.pos2, op.register, msg.referenceSequenceNumber, clid, msg.clientId);
                }
                if (op.checkNest) {
                    this.checkNest(op, msg, clid);
                }
                this.removeSegmentRemote(op.pos1, op.pos2, msg.sequenceNumber, msg.referenceSequenceNumber, clid, opArgs);
                break;
            case 2 /* ANNOTATE */:
                if (op.relativePos1) {
                    op.pos1 = this.mergeTree.posFromRelativePos(op.relativePos1, msg.referenceSequenceNumber, clid);
                    if (op.pos1 < 0) {
                        // TODO: event when marker id not found
                        return;
                    }
                }
                if (op.relativePos2) {
                    op.pos2 = this.mergeTree.posFromRelativePos(op.relativePos2, msg.referenceSequenceNumber, clid);
                    if (op.pos2 < 0) {
                        // TODO: event when marker id not found
                        return;
                    }
                }
                this.annotateSegmentRemote(op.props, op.pos1, op.pos2, msg.sequenceNumber, msg.referenceSequenceNumber, clid, op.combiningOp, opArgs);
                break;
            case 3 /* GROUP */: {
                for (let memberOp of op.ops) {
                    this.applyOp({
                        op: memberOp,
                        groupOp: op,
                        sequencedMessage: msg,
                    });
                }
                break;
            }
        }
    }
    getModifiedMarkersForOp() {
        return this.opMarkersModified;
    }
    coreApplyMsg(msg) {
        this.resetModifiedMarkers();
        this.applyOp({
            op: msg.contents,
            sequencedMessage: msg
        });
    }
    applyMsg(msg) {
        if ((msg !== undefined) && (msg.minimumSequenceNumber > this.mergeTree.getCollabWindow().minSeq)) {
            this.updateMinSeq(msg.minimumSequenceNumber);
        }
        // Ensure client ID is registered
        // TODO support for more than two branch IDs
        // The existance of msg.origin means we are a branch message - and so should be marked as 0
        // The non-existance of msg.origin indicates we are local - and should inherit the collab mode ID
        const branchId = msg.origin ? 0 : this.mergeTree.localBranchId;
        this.getOrAddShortClientId(msg.clientId, branchId);
        // Apply if an operation message
        if (msg.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Operation) {
            const operationMessage = msg;
            if (msg.clientId === this.longClientId) {
                let op = msg.contents;
                if (op.type !== 2 /* ANNOTATE */) {
                    this.ackPendingSegment(operationMessage.sequenceNumber);
                }
                else {
                    if (op.combiningOp && (op.combiningOp.name === "consensus")) {
                        this.updateConsensusProperty(op, operationMessage);
                    }
                }
            }
            else {
                this.coreApplyMsg(operationMessage);
            }
        }
    }
    applyMessages(msgCount) {
        while (msgCount > 0) {
            let msg = this.q.dequeue();
            if (msg) {
                this.applyMsg(msg);
            }
            else {
                break;
            }
            msgCount--;
        }
        return true;
    }
    getLocalSequenceNumber() {
        let segWindow = this.mergeTree.getCollabWindow();
        if (segWindow.collaborating) {
            return this.localSequenceNumber;
        }
        else {
            return _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UniversalSequenceNumber"];
        }
    }
    localTransaction(groupOp, segmentGroup) {
        segmentGroup = this.mergeTree.startGroupOperation(segmentGroup);
        for (let op of groupOp.ops) {
            const opArgs = {
                op,
                groupOp,
            };
            switch (op.type) {
                case 0 /* INSERT */:
                    if (op.relativePos1) {
                        op.pos1 = this.mergeTree.posFromRelativePos(op.relativePos1);
                        if (op.pos1 < 0) {
                            // TODO: raise exception or other error flow
                            break;
                        }
                    }
                    if (op.marker) {
                        this.insertMarkerLocal(op.pos1, op.marker.refType, op.props, opArgs);
                    }
                    else {
                        this.insertTextLocal(op.text, op.pos1, op.props, opArgs);
                    }
                    break;
                case 2 /* ANNOTATE */:
                    if (op.relativePos1) {
                        op.pos1 = this.mergeTree.posFromRelativePos(op.relativePos1);
                        if (op.pos1 < 0) {
                            // TODO: raise exception or other error flow
                            break;
                        }
                    }
                    if (op.relativePos2) {
                        op.pos2 = this.mergeTree.posFromRelativePos(op.relativePos2);
                        if (op.pos2 < 0) {
                            // TODO: raise exception or other error flow
                            break;
                        }
                    }
                    this.annotateSegmentLocal(op.props, op.pos1, op.pos2, op.combiningOp, opArgs);
                    break;
                case 1 /* REMOVE */:
                    if (op.relativePos1) {
                        op.pos1 = this.mergeTree.posFromRelativePos(op.relativePos1);
                        if (op.pos1 < 0) {
                            // TODO: raise exception or other error flow
                            break;
                        }
                    }
                    if (op.relativePos2) {
                        op.pos2 = this.mergeTree.posFromRelativePos(op.relativePos2);
                        if (op.pos2 < 0) {
                            // TODO: raise exception or other error flow
                            break;
                        }
                    }
                    this.removeSegmentLocal(op.pos1, op.pos2, opArgs);
                    break;
                case 3 /* GROUP */:
                    console.log("unhandled nested group op");
                    break;
            }
        }
        this.mergeTree.endGroupOperation();
        return segmentGroup;
    }
    updateConsensusProperty(op, msg) {
        let markerId = op.relativePos1.id;
        let consensusInfo = this.pendingConsensus.get(markerId);
        if (consensusInfo) {
            consensusInfo.marker.addProperties(op.props, op.combiningOp, msg.sequenceNumber);
        }
        this.mergeTree.addMinSeqListener(msg.sequenceNumber, (minSeq) => consensusInfo.callback(consensusInfo.marker));
    }
    // marker must have an id
    annotateMarkerNotifyConsensus(marker, props, consensusCallback, opArgs) {
        let combiningOp = {
            name: "consensus"
        };
        let consensusInfo = {
            callback: consensusCallback,
            marker,
        };
        let id = marker.getId();
        this.pendingConsensus.set(id, consensusInfo);
        this.annotateMarker(props, marker, combiningOp, opArgs);
    }
    annotateMarker(props, marker, op, opArgs) {
        let segWindow = this.mergeTree.getCollabWindow();
        let clientId = segWindow.clientId;
        let refSeq = segWindow.currentSeq;
        let seq = this.getLocalSequenceNumber();
        this.resetModifiedMarkers();
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        let start = this.mergeTree.getOffset(marker, _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UniversalSequenceNumber"], this.getClientId());
        this.mergeTree.annotateRange(props, start, start + marker.cachedLength, refSeq, clientId, seq, op, opArgs);
        if (this.measureOps) {
            this.localTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.localOps++;
        }
        if (this.verboseOps) {
            console.log(`annotate local cli ${this.getLongClientId(clientId)} ref seq ${refSeq}`);
        }
    }
    annotateSegmentLocal(props, start, end, op, opArgs) {
        let segWindow = this.mergeTree.getCollabWindow();
        let clientId = segWindow.clientId;
        let refSeq = segWindow.currentSeq;
        let seq = this.getLocalSequenceNumber();
        this.resetModifiedMarkers();
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.annotateRange(props, start, end, refSeq, clientId, seq, op, opArgs);
        if (this.measureOps) {
            this.localTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.localOps++;
        }
        if (this.verboseOps) {
            console.log(`annotate local cli ${this.getLongClientId(clientId)} ref seq ${refSeq}`);
        }
    }
    annotateSegmentRemote(props, start, end, seq, refSeq, clientId, combiningOp, opArgs) {
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.annotateRange(props, start, end, refSeq, clientId, seq, combiningOp, opArgs);
        this.mergeTree.getCollabWindow().currentSeq = seq;
        if (this.measureOps) {
            this.accumTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.accumOps++;
            this.accumWindow += (this.getCurrentSeq() - this.mergeTree.getCollabWindow().minSeq);
        }
        if (this.verboseOps && (!this.noVerboseRemoteAnnote)) {
            console.log(`@cli ${this.getLongClientId(this.mergeTree.getCollabWindow().clientId)} seq ${seq} annotate remote start ${start} end ${end} refseq ${refSeq} cli ${clientId} props ${props}`);
        }
    }
    removeSegmentLocal(start, end, opArgs) {
        let segWindow = this.mergeTree.getCollabWindow();
        let clientId = segWindow.clientId;
        let refSeq = segWindow.currentSeq;
        let seq = this.getLocalSequenceNumber();
        this.resetModifiedMarkers();
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.markRangeRemoved(start, end, refSeq, clientId, seq, false, opArgs);
        if (this.measureOps) {
            this.localTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.localOps++;
        }
        if (this.verboseOps) {
            console.log(`remove local cli ${this.getLongClientId(clientId)} ref seq ${refSeq} [${start},${end})`);
        }
    }
    removeSegmentRemote(start, end, seq, refSeq, clientId, opArgs) {
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.markRangeRemoved(start, end, refSeq, clientId, seq, false, opArgs);
        this.mergeTree.getCollabWindow().currentSeq = seq;
        if (this.measureOps) {
            this.accumTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.accumOps++;
            this.accumWindow += (this.getCurrentSeq() - this.mergeTree.getCollabWindow().minSeq);
        }
        if (this.verboseOps) {
            console.log(`@cli ${this.getLongClientId(this.mergeTree.getCollabWindow().clientId)} seq ${seq} remove remote start ${start} end ${end} refseq ${refSeq} cli ${this.getLongClientId(clientId)}`);
        }
    }
    insertTextLocal(text, pos, props, opArgs) {
        let segWindow = this.mergeTree.getCollabWindow();
        let clientId = segWindow.clientId;
        let refSeq = segWindow.currentSeq;
        let seq = this.getLocalSequenceNumber();
        this.resetModifiedMarkers();
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.insertText(pos, refSeq, clientId, seq, text, props, opArgs);
        if (this.measureOps) {
            this.localTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.localOps++;
        }
        if (this.verboseOps) {
            console.log(`insert local text ${text} pos ${pos} cli ${this.getLongClientId(clientId)} ref seq ${refSeq}`);
        }
    }
    insertTextMarkerRelative(text, markerPos, props, opArgs) {
        let segWindow = this.mergeTree.getCollabWindow();
        let clientId = segWindow.clientId;
        let refSeq = segWindow.currentSeq;
        let seq = this.getLocalSequenceNumber();
        this.resetModifiedMarkers();
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.insertTextMarkerRelative(markerPos, refSeq, clientId, seq, text, props, opArgs);
        if (this.measureOps) {
            this.localTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.localOps++;
        }
        if (this.verboseOps) {
            console.log(`insert local text marker relative ${text} pos ${markerPos.id} cli ${this.getLongClientId(clientId)} ref seq ${refSeq}`);
        }
    }
    insertSegmentLocal(pos, segment, props, opArgs) {
        let segWindow = this.mergeTree.getCollabWindow();
        let clientId = segWindow.clientId;
        let refSeq = segWindow.currentSeq;
        let seq = this.getLocalSequenceNumber();
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        segment.seq = seq;
        segment.clientId = clientId;
        this.mergeTree.insertSegment(pos, refSeq, clientId, seq, segment, opArgs);
        if (this.measureOps) {
            this.localTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.localOps++;
        }
        if (this.verboseOps) {
            console.log(`insert local segment pos ${pos} cli ${this.getLongClientId(clientId)} ${segment.toString()} ref seq ${refSeq}`);
        }
    }
    insertMarkerLocal(pos, behaviors, props, opArgs) {
        let segWindow = this.mergeTree.getCollabWindow();
        let clientId = segWindow.clientId;
        let refSeq = segWindow.currentSeq;
        let seq = this.getLocalSequenceNumber();
        this.resetModifiedMarkers();
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        let marker = this.mergeTree.insertMarker(pos, refSeq, clientId, seq, behaviors, props, opArgs);
        if (this.measureOps) {
            this.localTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.localOps++;
        }
        if (this.verboseOps) {
            console.log(`insert local marker pos ${pos} cli ${this.getLongClientId(clientId)} ${marker.toString()} ref seq ${refSeq}`);
        }
    }
    insertItemsRemote(items, isNumberSequence, pos, props, seq, refSeq, clientId, opArgs) {
        const traceItems = false;
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        let segment;
        if (isNumberSequence) {
            segment = new _mergeTree__WEBPACK_IMPORTED_MODULE_1__["SubSequence"](items, seq, clientId);
        }
        else {
            segment = new _mergeTree__WEBPACK_IMPORTED_MODULE_1__["SubSequence"](items, seq, clientId);
        }
        if (props) {
            segment.addProperties(props);
        }
        if (traceItems) {
            console.log(`pre-length: ${this.mergeTree.getLength(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["UniversalSequenceNumber"], this.mergeTree.collabWindow.clientId)} pos: ${pos}`);
        }
        this.mergeTree.insertSegment(pos, refSeq, clientId, seq, segment, opArgs);
        if (traceItems) {
            console.log(`post-length: ${this.mergeTree.getLength(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["UniversalSequenceNumber"], this.mergeTree.collabWindow.clientId)} pos: ${pos}`);
        }
        this.mergeTree.getCollabWindow().currentSeq = seq;
        if (this.measureOps) {
            this.accumTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.accumOps++;
            this.accumWindow += (this.getCurrentSeq() - this.mergeTree.getCollabWindow().minSeq);
        }
        if (this.verboseOps) {
            console.log(`@cli ${this.getLongClientId(this.mergeTree.getCollabWindow().clientId)} ${segment.toString()} seq ${seq} insert remote pos ${pos} refseq ${refSeq} cli ${clientId}`);
        }
    }
    insertMarkerRemote(markerDef, pos, props, seq, refSeq, clientId, opArgs) {
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        let marker = this.mergeTree.insertMarker(pos, refSeq, clientId, seq, markerDef.refType, props, opArgs);
        this.mergeTree.getCollabWindow().currentSeq = seq;
        if (this.measureOps) {
            this.accumTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.accumOps++;
            this.accumWindow += (this.getCurrentSeq() - this.mergeTree.getCollabWindow().minSeq);
        }
        if (this.verboseOps) {
            console.log(`@cli ${this.getLongClientId(this.mergeTree.getCollabWindow().clientId)} ${marker.toString()} seq ${seq} insert remote pos ${pos} refseq ${refSeq} cli ${clientId}`);
        }
    }
    insertTextRemote(text, pos, props, seq, refSeq, clientId, opArgs) {
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.insertText(pos, refSeq, clientId, seq, text, props, opArgs);
        this.mergeTree.getCollabWindow().currentSeq = seq;
        if (this.measureOps) {
            this.accumTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.accumOps++;
            this.accumWindow += (this.getCurrentSeq() - this.mergeTree.getCollabWindow().minSeq);
        }
        if (this.verboseOps) {
            console.log(`@cli ${this.getLongClientId(this.mergeTree.getCollabWindow().clientId)} text ${text} seq ${seq} insert remote pos ${pos} refseq ${refSeq} cli ${this.getLongClientId(clientId)}`);
        }
    }
    ackPendingSegment(seq) {
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.ackPendingSegment(seq, this.verboseOps);
        this.mergeTree.getCollabWindow().currentSeq = seq;
        if (this.measureOps) {
            this.accumTime += Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.accumOps++;
            this.accumWindow += (this.getCurrentSeq() - this.mergeTree.getCollabWindow().minSeq);
        }
        if (this.verboseOps) {
            console.log(`@cli ${this.getLongClientId(this.mergeTree.getCollabWindow().clientId)} ack seq # ${seq}`);
        }
    }
    updateMinSeq(minSeq) {
        let clockStart;
        if (this.measureOps) {
            clockStart = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["clock"])();
        }
        this.mergeTree.updateGlobalMinSeq(minSeq);
        if (this.measureOps) {
            let elapsed = Object(_mergeTree__WEBPACK_IMPORTED_MODULE_1__["elapsedMicroseconds"])(clockStart);
            this.accumWindowTime += elapsed;
            if (elapsed > this.maxWindowTime) {
                this.maxWindowTime = elapsed;
            }
        }
    }
    getPropertiesAtPosition(pos) {
        let segWindow = this.mergeTree.getCollabWindow();
        if (this.verboseOps) {
            console.log(`getPropertiesAtPosition cli ${this.getLongClientId(segWindow.clientId)} ref seq ${segWindow.currentSeq}`);
        }
        let propertiesAtPosition;
        let segoff = this.mergeTree.getContainingSegment(pos, segWindow.currentSeq, segWindow.clientId);
        let seg = segoff.segment;
        if (seg) {
            propertiesAtPosition = seg.properties;
        }
        return propertiesAtPosition;
    }
    getRangeExtentsOfPosition(pos) {
        let segWindow = this.mergeTree.getCollabWindow();
        if (this.verboseOps) {
            console.log(`getRangeExtentsOfPosition cli ${this.getLongClientId(segWindow.clientId)} ref seq ${segWindow.currentSeq}`);
        }
        let startPos;
        let endPos;
        let segoff = this.mergeTree.getContainingSegment(pos, segWindow.currentSeq, segWindow.clientId);
        let seg = segoff.segment;
        if (seg) {
            startPos = this.mergeTree.getOffset(seg, segWindow.currentSeq, segWindow.clientId);
            endPos = startPos + seg.cachedLength;
        }
        return { startPos, endPos };
    }
    getCurrentSeq() {
        return this.mergeTree.getCollabWindow().currentSeq;
    }
    getClientId() {
        return this.mergeTree.getCollabWindow().clientId;
    }
    getTextAndMarkers(label) {
        let segmentWindow = this.mergeTree.getCollabWindow();
        return this.mergeTree.getTextAndMarkers(segmentWindow.currentSeq, segmentWindow.clientId, label);
    }
    getText(start, end) {
        let segmentWindow = this.mergeTree.getCollabWindow();
        return this.mergeTree.getText(segmentWindow.currentSeq, segmentWindow.clientId, "", start, end);
    }
    /**
     * Adds spaces for markers and components, so that position calculations account for them
     */
    getTextWithPlaceholders() {
        let segmentWindow = this.mergeTree.getCollabWindow();
        return this.mergeTree.getText(segmentWindow.currentSeq, segmentWindow.clientId, " ");
    }
    getTextRangeWithPlaceholders(start, end) {
        let segmentWindow = this.mergeTree.getCollabWindow();
        return this.mergeTree.getText(segmentWindow.currentSeq, segmentWindow.clientId, " ", start, end);
    }
    getTextRangeWithMarkers(start, end) {
        let segmentWindow = this.mergeTree.getCollabWindow();
        return this.mergeTree.getText(segmentWindow.currentSeq, segmentWindow.clientId, "*", start, end);
    }
    getLength() {
        let segmentWindow = this.mergeTree.getCollabWindow();
        return this.mergeTree.getLength(segmentWindow.currentSeq, segmentWindow.clientId);
    }
    relText(clientId, refSeq) {
        return `cli: ${this.getLongClientId(clientId)} refSeq: ${refSeq}: ` + this.mergeTree.getText(refSeq, clientId);
    }
    relItems(clientId, refSeq) {
        return `cli: ${this.getLongClientId(clientId)} refSeq: ${refSeq}: ` + this.mergeTree.getItems(refSeq, clientId).toString();
    }
    startCollaboration(longClientId, minSeq = 0, branchId = 0) {
        this.longClientId = longClientId;
        this.addLongClientId(longClientId, branchId);
        this.mergeTree.startCollaboration(this.getShortClientId(this.longClientId), minSeq, branchId);
    }
    updateCollaboration(longClientId) {
        const oldClientId = this.longClientId;
        let oldData = this.clientNameToIds.get(oldClientId).data;
        this.longClientId = longClientId;
        this.clientNameToIds.put(longClientId, oldData);
        this.shortClientIdMap[oldData.clientId] = longClientId;
    }
    findTile(startPos, tileLabel, preceding = true) {
        const clientId = this.getClientId();
        return this.mergeTree.findTile(startPos, clientId, tileLabel, preceding);
    }
}
//# sourceMappingURL=client.js.map

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/collections.js":
/*!************************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/collections.js ***!
  \************************************************************/
/*! exports provided: Stack, ListRemoveEntry, ListMakeEntry, ListMakeHead, List, numberComparer, Heap, LinearDictionary, RedBlackTree, integerRangeUnion, integerRangeOverlaps, integerRangeComparer, integerRangeCopy, integerRangeToString, IntegerRangeTree, intervalComparer, IntervalTree, TST */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stack", function() { return Stack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListRemoveEntry", function() { return ListRemoveEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListMakeEntry", function() { return ListMakeEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListMakeHead", function() { return ListMakeHead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "List", function() { return List; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numberComparer", function() { return numberComparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return Heap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearDictionary", function() { return LinearDictionary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedBlackTree", function() { return RedBlackTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integerRangeUnion", function() { return integerRangeUnion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integerRangeOverlaps", function() { return integerRangeOverlaps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integerRangeComparer", function() { return integerRangeComparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integerRangeCopy", function() { return integerRangeCopy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integerRangeToString", function() { return integerRangeToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntegerRangeTree", function() { return IntegerRangeTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intervalComparer", function() { return intervalComparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntervalTree", function() { return IntervalTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TST", function() { return TST; });
/* harmony import */ var _mergeTree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeTree */ "./node_modules/@prague/merge-tree/lib/mergeTree.js");
// tslint:disable

class Stack {
    constructor() {
        this.items = [];
    }
    push(val) {
        this.items.push(val);
    }
    empty() {
        return this.items.length == 0;
    }
    top() {
        return this.items[this.items.length - 1];
    }
    pop() {
        return this.items.pop();
    }
}
function ListRemoveEntry(entry) {
    if (entry === undefined) {
        return undefined;
    }
    else if (entry.isHead) {
        return undefined;
    }
    else {
        entry.next.prev = entry.prev;
        entry.prev.next = entry.next;
    }
    return (entry);
}
function ListMakeEntry(data) {
    var entry = new List(false, data);
    entry.prev = entry;
    entry.next = entry;
    return entry;
}
function ListMakeHead() {
    var entry = new List(true, undefined);
    entry.prev = entry;
    entry.next = entry;
    return entry;
}
class List {
    constructor(isHead, data) {
        this.isHead = isHead;
        this.data = data;
    }
    clear() {
        if (this.isHead) {
            this.prev = this;
            this.next = this;
        }
    }
    add(data) {
        var entry = ListMakeEntry(data);
        this.prev.next = entry;
        entry.next = this;
        entry.prev = this.prev;
        this.prev = entry;
        return (entry);
    }
    dequeue() {
        if (!this.empty()) {
            let removedEntry = ListRemoveEntry(this.next);
            return removedEntry.data;
        }
    }
    enqueue(data) {
        return this.add(data);
    }
    walk(fn) {
        for (var entry = this.next; !(entry.isHead); entry = entry.next) {
            fn(entry.data, entry);
        }
    }
    some(fn, rev) {
        for (var entry = this; !(entry.isHead); entry = rev ? entry.prev : entry.next) {
            if (fn(entry.data, entry)) {
                return (entry.data);
            }
        }
    }
    count() {
        var entry;
        var i;
        entry = this.next;
        for (i = 0; !(entry.isHead); i++) {
            entry = entry.next;
        }
        return (i);
    }
    first() {
        if (!this.empty()) {
            return (this.next.data);
        }
    }
    last() {
        if (!this.empty()) {
            return (this.prev.data);
        }
    }
    empty() {
        return (this.next == this);
    }
    pushEntry(entry) {
        entry.isHead = false;
        entry.next = this.next;
        entry.prev = this;
        this.next = entry;
        entry.next.prev = entry;
    }
    push(data) {
        var entry = ListMakeEntry(data);
        entry.data = data;
        entry.isHead = false;
        entry.next = this.next;
        entry.prev = this;
        this.next = entry;
        entry.next.prev = entry;
    }
    popEntry(head) {
        if (this.next.isHead)
            return (undefined);
        else
            return (ListRemoveEntry(this.next));
    }
    insertEntry(entry) {
        entry.isHead = false;
        this.prev.next = entry;
        entry.next = this;
        entry.prev = this.prev;
        this.prev = entry;
        return entry;
    }
    insertAfter(data) {
        var entry = ListMakeEntry(data);
        entry.next = this.next;
        entry.prev = this;
        this.next = entry;
        entry.next.prev = entry;
        return (entry);
    }
    insertBefore(data) {
        var entry = ListMakeEntry(data);
        return this.insertEntryBefore(entry);
    }
    insertEntryBefore(entry) {
        this.prev.next = entry;
        entry.next = this;
        entry.prev = this.prev;
        this.prev = entry;
        return (entry);
    }
}
var numberComparer = {
    min: Number.MIN_VALUE,
    compare: (a, b) => a - b,
};
class Heap {
    constructor(a, comp) {
        this.comp = comp;
        this.L = [comp.min];
        for (var i = 0, len = a.length; i < len; i++) {
            this.add(a[i]);
        }
    }
    count() {
        return this.L.length - 1;
    }
    peek() {
        return this.L[1];
    }
    get() {
        var x = this.L[1];
        this.L[1] = this.L[this.count()];
        this.L.pop();
        this.fixdown(1);
        return x;
    }
    add(x) {
        this.L.push(x);
        this.fixup(this.count());
    }
    fixup(k) {
        while (k > 1 && (this.comp.compare(this.L[k >> 1], this.L[k]) > 0)) {
            var tmp = this.L[k >> 1];
            this.L[k >> 1] = this.L[k];
            this.L[k] = tmp;
            k = k >> 1;
        }
    }
    fixdown(k) {
        while ((k << 1) <= (this.count())) {
            var j = k << 1;
            if ((j < this.count()) && (this.comp.compare(this.L[j], this.L[j + 1]) > 0)) {
                j++;
            }
            if (this.comp.compare(this.L[k], this.L[j]) <= 0) {
                break;
            }
            var tmp = this.L[k];
            this.L[k] = this.L[j];
            this.L[j] = tmp;
            k = j;
        }
    }
}
// for testing
function LinearDictionary(compareKeys) {
    let a = [];
    function compareProps(a, b) {
        return compareKeys(a.key, b.key);
    }
    function diag() {
        console.log(`size is ${a.length}`);
    }
    function mapRange(action, accum, start, end) {
        if (start === undefined) {
            start = min().key;
        }
        if (end === undefined) {
            end = max().key;
        }
        for (let i = 0, len = a.length; i < len; i++) {
            if (compareKeys(start, a[i].key) <= 0) {
                let ecmp = compareKeys(end, a[i].key);
                if (ecmp < 0) {
                    break;
                }
                if (!action(a[i], accum)) {
                    break;
                }
            }
        }
    }
    function map(action, accum) {
        mapRange(action, accum);
    }
    function min() {
        if (a.length > 0) {
            return a[0];
        }
    }
    function max() {
        if (a.length > 0) {
            return a[a.length - 1];
        }
    }
    function get(key) {
        for (let i = 0, len = a.length; i < len; i++) {
            if (a[i].key == key) {
                return a[i];
            }
        }
    }
    function put(key, data) {
        if (key !== undefined) {
            if (data === undefined) {
                remove(key);
            }
            else {
                a.push({ key: key, data: data });
                a.sort(compareProps); // go to insertion sort if too slow
            }
        }
    }
    function remove(key) {
        if (key !== undefined) {
            for (let i = 0, len = a.length; i < len; i++) {
                if (a[i].key == key) {
                    a[i] = a[len - 1];
                    a.length--;
                    a.sort(compareProps);
                    break;
                }
            }
        }
    }
    return {
        min: min,
        max: max,
        map: map,
        mapRange: mapRange,
        remove: remove,
        get: get,
        put: put,
        diag: diag
    };
}
class RedBlackTree {
    constructor(compareKeys, aug) {
        this.compareKeys = compareKeys;
        this.aug = aug;
    }
    makeNode(key, data, color, size) {
        let node = { key: key, data: data, color: color, size: size };
        if (this.aug && this.aug.init) {
            this.aug.init(node);
        }
        return node;
    }
    isRed(node) {
        return node && (node.color == 0 /* RED */);
    }
    nodeSize(node) {
        return node ? node.size : 0;
    }
    size() {
        return this.nodeSize(this.root);
    }
    isEmpty() {
        return !this.root;
    }
    get(key) {
        if (key !== undefined) {
            return this.nodeGet(this.root, key);
        }
    }
    nodeGet(node, key) {
        while (node) {
            let cmp = this.compareKeys(key, node.key);
            if (cmp < 0) {
                node = node.left;
            }
            else if (cmp > 0) {
                node = node.right;
            }
            else {
                return node;
            }
        }
    }
    contains(key) {
        return this.get(key);
    }
    gather(key, matcher) {
        let results = [];
        if (key !== undefined) {
            this.nodeGather(this.root, results, key, matcher);
        }
        return results;
    }
    nodeGather(node, results, key, matcher) {
        if (node) {
            if (matcher.continueSubtree(node.left, key)) {
                this.nodeGather(node.left, results, key, matcher);
            }
            if (matcher.matchNode(node, key)) {
                results.push(node);
            }
            if (matcher.continueSubtree(node.right, key)) {
                this.nodeGather(node.right, results, key, matcher);
            }
        }
    }
    put(key, data, conflict) {
        if (key !== undefined) {
            if (data === undefined) {
                this.remove(key);
            }
            else {
                this.root = this.nodePut(this.root, key, data, conflict);
                this.root.color = 1 /* BLACK */;
            }
        }
    }
    nodePut(node, key, data, conflict) {
        if (!node) {
            return this.makeNode(key, data, 0 /* RED */, 1);
        }
        else {
            let cmp = this.compareKeys(key, node.key);
            if (cmp < 0) {
                node.left = this.nodePut(node.left, key, data, conflict);
            }
            else if (cmp > 0) {
                node.right = this.nodePut(node.right, key, data, conflict);
            }
            else {
                if (conflict) {
                    const kd = conflict(key, node.key, data, node.data);
                    if (kd.key) {
                        node.key = kd.key;
                    }
                    if (kd.data) {
                        node.data = kd.data;
                    }
                    else {
                        node.data = data;
                    }
                }
                else {
                    node.data = data;
                }
            }
            if (this.isRed(node.right) && (!this.isRed(node.left))) {
                node = this.rotateLeft(node);
            }
            if (this.isRed(node.left) && this.isRed(node.left.left)) {
                node = this.rotateRight(node);
            }
            if (this.isRed(node.left) && this.isRed(node.right)) {
                this.flipColors(node);
            }
            node.size = this.nodeSize(node.left) + this.nodeSize(node.right) + 1;
            if (this.aug) {
                this.updateLocal(node);
            }
            return node;
        }
    }
    updateLocal(node) {
        if (this.aug) {
            if (this.isRed(node.left)) {
                this.aug.update(node.left);
            }
            if (this.isRed(node.right)) {
                this.aug.update(node.right);
            }
            this.aug.update(node);
        }
    }
    removeMin() {
        if (!this.isEmpty()) {
            if ((!this.isRed(this.root.left)) && (!this.isRed(this.root.right))) {
                this.root.color = 0 /* RED */;
            }
            this.root = this.nodeRemoveMin(this.root);
            if (!this.isEmpty()) {
                this.root.color = 1 /* BLACK */;
            }
        }
        // TODO: error on empty
    }
    nodeRemoveMin(node) {
        if (node.left) {
            if ((!this.isRed(node.left)) && (!this.isRed(node.left.left))) {
                node = this.moveRedLeft(node);
            }
            node.left = this.nodeRemoveMin(node.left);
            return this.balance(node);
        }
    }
    removeMax() {
        if (this.isEmpty()) {
            if ((!this.isRed(this.root.left)) && (!this.isRed(this.root.right))) {
                this.root.color = 0 /* RED */;
            }
            this.root = this.nodeRemoveMax(this.root);
            if (!this.isEmpty()) {
                this.root.color = 1 /* BLACK */;
            }
        }
        // TODO: error on empty
    }
    nodeRemoveMax(node) {
        if (this.isRed(node.left)) {
            node = this.rotateRight(node);
        }
        if (!node.right) {
            return undefined;
        }
        if ((!this.isRed(node.right)) && (!this.isRed(node.right.left))) {
            node = this.moveRedRight(node);
        }
        node.right = this.nodeRemoveMax(node.right);
        return this.balance(node);
    }
    remove(key) {
        if (key !== undefined) {
            if (!this.contains(key)) {
                return;
            }
            if ((!this.isRed(this.root.left)) && (!this.isRed(this.root.right))) {
                this.root.color = 0 /* RED */;
            }
            this.root = this.nodeRemove(this.root, key);
        }
        // TODO: error on undefined key
    }
    nodeRemove(node, key) {
        if (this.compareKeys(key, node.key) < 0) {
            if ((!this.isRed(node.left)) && (!this.isRed(node.left.left))) {
                node = this.moveRedLeft(node);
            }
            node.left = this.nodeRemove(node.left, key);
        }
        else {
            if (this.isRed(node.left)) {
                node = this.rotateRight(node);
            }
            if ((this.compareKeys(key, node.key) == 0) && (!node.right)) {
                return undefined;
            }
            if ((!this.isRed(node.right)) && (!this.isRed(node.right.left))) {
                node = this.moveRedRight(node);
            }
            if (this.compareKeys(key, node.key) == 0) {
                let subtreeMin = this.nodeMin(node.right);
                node.key = subtreeMin.key;
                node.data = subtreeMin.data;
                node.right = this.nodeRemoveMin(node.right);
            }
            else {
                node.right = this.nodeRemove(node.right, key);
            }
        }
        return this.balance(node);
    }
    height() {
        return this.nodeHeight(this.root);
    }
    nodeHeight(node) {
        if (node === undefined) {
            return -1;
        }
        else {
            return 1 + Math.max(this.nodeHeight(node.left), this.nodeHeight(node.right));
        }
    }
    floor(key) {
        if (!this.isEmpty()) {
            return this.nodeFloor(this.root, key);
        }
    }
    nodeFloor(node, key) {
        if (node) {
            let cmp = this.compareKeys(key, node.key);
            if (cmp == 0) {
                return node;
            }
            else if (cmp < 0) {
                return this.nodeFloor(node.left, key);
            }
            else {
                let rightFloor = this.nodeFloor(node.right, key);
                if (rightFloor) {
                    return rightFloor;
                }
                else {
                    return node;
                }
            }
        }
    }
    ceil(key) {
        if (!this.isEmpty()) {
            return this.nodeCeil(this.root, key);
        }
    }
    nodeCeil(node, key) {
        if (node) {
            let cmp = this.compareKeys(key, node.key);
            if (cmp == 0) {
                return node;
            }
            else if (cmp > 0) {
                return this.nodeCeil(node.right, key);
            }
            else {
                let leftCeil = this.nodeCeil(node.left, key);
                if (leftCeil) {
                    return leftCeil;
                }
                else {
                    return node;
                }
            }
        }
    }
    min() {
        if (!this.isEmpty()) {
            return this.nodeMin(this.root);
        }
        // TODO: error on empty
    }
    nodeMin(node) {
        if (!node.left) {
            return node;
        }
        else {
            return this.nodeMin(node.left);
        }
    }
    max() {
        if (!this.isEmpty()) {
            return this.nodeMax(this.root);
        }
        // TODO: error on empty
    }
    nodeMax(node) {
        if (!node.right) {
            return node;
        }
        else {
            return this.nodeMax(node.right);
        }
    }
    rotateRight(node) {
        let leftChild = node.left;
        node.left = leftChild.right;
        leftChild.right = node;
        leftChild.color = leftChild.right.color;
        leftChild.right.color = 0 /* RED */;
        leftChild.size = node.size;
        node.size = this.nodeSize(node.left) + this.nodeSize(node.right) + 1;
        if (this.aug) {
            this.updateLocal(node);
            this.updateLocal(leftChild);
        }
        return leftChild;
    }
    rotateLeft(node) {
        let rightChild = node.right;
        node.right = rightChild.left;
        rightChild.left = node;
        rightChild.color = rightChild.left.color;
        rightChild.left.color = 0 /* RED */;
        rightChild.size = node.size;
        node.size = this.nodeSize(node.left) + this.nodeSize(node.right) + 1;
        if (this.aug) {
            this.updateLocal(node);
            this.updateLocal(rightChild);
        }
        return rightChild;
    }
    oppositeColor(c) {
        return (c == 1 /* BLACK */) ? 0 /* RED */ : 1 /* BLACK */;
    }
    flipColors(node) {
        node.color = this.oppositeColor(node.color);
        node.left.color = this.oppositeColor(node.left.color);
        node.right.color = this.oppositeColor(node.right.color);
    }
    moveRedLeft(node) {
        this.flipColors(node);
        if (this.isRed(node.right.left)) {
            node.right = this.rotateRight(node.right);
            node = this.rotateLeft(node);
            this.flipColors(node);
        }
        return node;
    }
    moveRedRight(node) {
        this.flipColors(node);
        if (this.isRed(node.left.left)) {
            node = this.rotateRight(node);
            this.flipColors(node);
        }
        return node;
    }
    balance(node) {
        if (this.isRed(node.right)) {
            node = this.rotateLeft(node);
        }
        if (this.isRed(node.left) && this.isRed(node.left.left)) {
            node = this.rotateRight(node);
        }
        if (this.isRed(node.left) && (this.isRed(node.right))) {
            this.flipColors(node);
        }
        node.size = this.nodeSize(node.left) + this.nodeSize(node.right) + 1;
        if (this.aug) {
            this.aug.update(node);
        }
        return node;
    }
    mapRange(action, accum, start, end) {
        this.nodeMap(this.root, action, start, end);
    }
    map(action, accum) {
        // TODO: optimize to avoid comparisons
        this.nodeMap(this.root, action, accum);
    }
    keys() {
        let keyList = [];
        let actions = {
            showStructure: true,
            infix: (node) => {
                keyList.push(node.key);
                return true;
            }
        };
        this.walk(actions);
        return keyList;
    }
    /**
     * Depth-first traversal with custom action; if action returns
     * false, traversal is halted.
     * @param action action to apply to each node
     */
    walk(actions) {
        this.nodeWalk(this.root, actions);
    }
    nodeWalk(node, actions) {
        let go = true;
        if (node) {
            if (actions.pre) {
                if (actions.showStructure || (node.color === 1 /* BLACK */)) {
                    go = actions.pre(node);
                }
            }
            if (node.left) {
                go = this.nodeWalk(node.left, actions);
            }
            if (go && actions.infix) {
                if (actions.showStructure || (node.color === 1 /* BLACK */)) {
                    go = actions.infix(node);
                }
            }
            if (go) {
                go = this.nodeWalk(node.right, actions);
            }
            if (go && actions.post) {
                if (actions.showStructure || (node.color === 1 /* BLACK */)) {
                    go = actions.post(node);
                }
            }
        }
        return go;
    }
    nodeMap(node, action, accum, start, end) {
        if (!node) {
            return true;
        }
        if (start === undefined) {
            start = this.nodeMin(node).key;
        }
        if (end === undefined) {
            end = this.nodeMax(node).key;
        }
        let cmpStart = this.compareKeys(start, node.key);
        let cmpEnd = this.compareKeys(end, node.key);
        let go = true;
        if (cmpStart < 0) {
            go = this.nodeMap(node.left, action, accum, start, end);
        }
        if (go && (cmpStart <= 0) && (cmpEnd >= 0)) {
            // REVIEW: test for black node here
            go = action(node, accum);
        }
        if (go && (cmpEnd > 0)) {
            go = this.nodeMap(node.right, action, accum, start, end);
        }
        return go;
    }
    diag() {
        console.log(`Height is ${this.height()}`);
    }
}
/**
 * Union of two ranges; assumes for both ranges start <= end.
 * @param a A range
 * @param b A range
 */
function integerRangeUnion(a, b) {
    return {
        start: Math.min(a.start, b.start),
        end: Math.max(a.end, b.end)
    };
}
function integerRangeOverlaps(a, b) {
    return (a.start < b.end) && (a.end > b.start);
}
function integerRangeComparer(a, b) {
    if (a.start === b.start) {
        return a.end - b.end;
    }
    else {
        return a.start - b.start;
    }
}
function integerRangeCopy(r) {
    return { start: r.start, end: r.end };
}
function integerRangeToString(range) {
    return `[${range.start},${range.end})`;
}
// TODO: handle duplicate keys
class IntegerRangeTree {
    constructor() {
        this.ranges = new RedBlackTree(integerRangeComparer, this);
        this.diag = false;
    }
    remove(r) {
        this.ranges.remove(r);
    }
    put(r) {
        this.ranges.put(r, { minmax: integerRangeCopy(r) });
    }
    toString() {
        return this.nodeToString(this.ranges.root);
    }
    nodeToString(node) {
        let buf = "";
        let indentAmt = 0;
        let actions = {
            pre: (node) => {
                let red = "";
                if (node.color === 0 /* RED */) {
                    red = "R ";
                }
                buf += _mergeTree__WEBPACK_IMPORTED_MODULE_0__["internedSpaces"](indentAmt);
                buf += `${red}key: ${integerRangeToString(node.key)} minmax: ${integerRangeToString(node.data.minmax)}\n`;
                indentAmt += 2;
                return true;
            },
            post: (node) => {
                indentAmt -= 2;
                return true;
            },
            showStructure: true
        };
        this.ranges.nodeWalk(node, actions);
        return buf;
    }
    matchPos(pos) {
        return this.match({ start: pos, end: pos + 1 });
    }
    match(r) {
        return this.ranges.gather(r, this);
    }
    matchNode(node, key) {
        return node && integerRangeOverlaps(node.key, key);
    }
    continueSubtree(node, key) {
        let cont = node && integerRangeOverlaps(node.data.minmax, key);
        if (this.diag && (!cont)) {
            if (node) {
                console.log(`skipping subtree of size ${node.size} key ${integerRangeToString(key)}`);
                console.log(this.nodeToString(node));
            }
        }
        return cont;
    }
    update(node) {
        if (node.left && node.right) {
            node.data.minmax = integerRangeUnion(node.key, integerRangeUnion(node.left.data.minmax, node.right.data.minmax));
        }
        else {
            if (node.left) {
                node.data.minmax = integerRangeUnion(node.key, node.left.data.minmax);
            }
            else if (node.right) {
                node.data.minmax = integerRangeUnion(node.key, node.right.data.minmax);
            }
            else {
                node.data.minmax = integerRangeCopy(node.key);
            }
        }
    }
}
function intervalComparer(a, b) {
    return a.compare(b);
}
class IntervalTree {
    constructor() {
        this.intervals = new RedBlackTree(intervalComparer, this);
        this.diag = false;
        this.timePut = false;
        this.putTime = 0;
        this.putCount = 0;
    }
    printTiming() {
        console.log(`put total = ${this.putTime} avg=${(this.putTime / this.putCount).toFixed(2)}`);
    }
    remove(x) {
        this.intervals.remove(x);
    }
    put(x, conflict) {
        let rbConflict;
        if (conflict) {
            rbConflict = (key, currentKey) => {
                const ival = conflict(key, currentKey);
                return {
                    key: ival,
                };
            };
        }
        if (this.timePut) {
            let clockStart = _mergeTree__WEBPACK_IMPORTED_MODULE_0__["clock"]();
            this.intervals.put(x, { minmax: x.clone() }, rbConflict);
            this.putTime += _mergeTree__WEBPACK_IMPORTED_MODULE_0__["elapsedMicroseconds"](clockStart);
            this.putCount++;
        }
        else {
            this.intervals.put(x, { minmax: x.clone() }, rbConflict);
        }
    }
    map(fn) {
        let actions = {
            infix: (node) => {
                fn(node.key);
                return true;
            },
            showStructure: true,
        };
        this.intervals.walk(actions);
    }
    // TODO: toString()
    match(x) {
        return this.intervals.gather(x, this);
    }
    matchNode(node, key) {
        return node && node.key.overlaps(key);
    }
    continueSubtree(node, key) {
        let cont = node && node.data.minmax.overlaps(key);
        if (this.diag && (!cont)) {
            if (node) {
                console.log(`skipping subtree of size ${node.size} key ${key.toString()}`);
                // console.log(this.nodeToString(node));
            }
        }
        return cont;
    }
    update(node) {
        if (node.left && node.right) {
            node.data.minmax = node.key.union(node.left.data.minmax.union(node.right.data.minmax));
        }
        else {
            if (node.left) {
                node.data.minmax = node.key.union(node.left.data.minmax);
            }
            else if (node.right) {
                node.data.minmax = node.key.union(node.right.data.minmax);
            }
            else {
                node.data.minmax = node.key.clone();
            }
        }
    }
}
class TST {
    constructor() {
        this.n = 0;
    }
    size() {
        return this.n;
    }
    contains(key) {
        return this.get(key);
    }
    get(key) {
        let x = this.nodeGet(this.root, key, 0);
        if (x === undefined) {
            return undefined;
        }
        return x.val;
    }
    nodeGet(x, key, d) {
        if (x === undefined) {
            return undefined;
        }
        let c = key.charAt(d);
        if (c < x.c) {
            return this.nodeGet(x.left, key, d);
        }
        else if (c > x.c) {
            return this.nodeGet(x.right, key, d);
        }
        else if (d < (key.length - 1)) {
            return this.nodeGet(x.mid, key, d + 1);
        }
        else
            return x;
    }
    put(key, val) {
        if (!this.contains(key)) {
            this.n++;
        }
        this.root = this.nodePut(this.root, key, val, 0);
        // console.log(`put ${key}`);
    }
    nodePut(x, key, val, d) {
        let c = key.charAt(d);
        if (x === undefined) {
            x = { c };
        }
        if (c < x.c) {
            x.left = this.nodePut(x.left, key, val, d);
        }
        else if (c > x.c) {
            x.right = this.nodePut(x.right, key, val, d);
        }
        else if (d < (key.length - 1)) {
            x.mid = this.nodePut(x.mid, key, val, d + 1);
        }
        else {
            x.val = val;
        }
        return x;
    }
    neighbors(text, distance = 2) {
        let q = [];
        this.nodeProximity(this.root, { text: "" }, 0, text, distance, q);
        q = q.filter(value => (value.text.length > 0));
        return q;
    }
    keysWithPrefix(text) {
        let q = [];
        let x = this.nodeGet(this.root, text, 0);
        if (x === undefined) {
            return q;
        }
        if (x.val !== undefined) {
            q.push(text);
        }
        this.collect(x.mid, { text }, q);
        return q;
    }
    collect(x, prefix, q) {
        if (x === undefined) {
            return;
        }
        this.collect(x.left, prefix, q);
        if (x.val !== undefined) {
            q.push(prefix.text + x.c);
        }
        this.collect(x.mid, { text: prefix.text + x.c }, q);
        this.collect(x.right, prefix, q);
    }
    pairsWithPrefix(text) {
        let q = [];
        let x = this.nodeGet(this.root, text, 0);
        if (x === undefined) {
            return q;
        }
        if (x.val !== undefined) {
            q.push({ key: text, val: x.val });
        }
        this.collectPairs(x.mid, { text }, q);
        return q;
    }
    collectPairs(x, prefix, q) {
        if (x === undefined) {
            return;
        }
        this.collectPairs(x.left, prefix, q);
        if (x.val !== undefined) {
            q.push({ key: prefix.text + x.c, val: x.val });
        }
        this.collectPairs(x.mid, { text: prefix.text + x.c }, q);
        this.collectPairs(x.right, prefix, q);
    }
    patternCollect(x, prefix, d, pattern, q) {
        if (x === undefined) {
            return;
        }
        let c = pattern.charAt(d);
        if ((c === '.') || (c < x.c)) {
            this.patternCollect(x.left, prefix, d, pattern, q);
        }
        else if ((c === '.') || (c === x.c)) {
            if ((d === (pattern.length - 1)) && (x.val !== undefined)) {
                q.push(prefix.text + x.c);
            }
            else if (d < (pattern.length - 1)) {
                this.patternCollect(x.mid, { text: prefix.text + x.c }, d + 1, pattern, q);
            }
        }
        if ((c === '.') || (c > x.c)) {
            this.patternCollect(x.right, prefix, d, pattern, q);
        }
    }
    nodeProximity(x, prefix, d, pattern, distance, q) {
        if ((x === undefined) || (distance < 0)) {
            return;
        }
        let c = pattern.charAt(d);
        if ((distance > 0) || (c < x.c)) {
            this.nodeProximity(x.left, prefix, d, pattern, distance, q);
        }
        if (x.val !== undefined) {
            let remD = distance - (pattern.length - d);
            if (remD >= 0) {
                let invD = distance;
                if (c !== x.c) {
                    invD--;
                }
                q.push({ text: prefix.text + x.c, val: x.val, invDistance: invD });
            }
        }
        let recurD = (d < (pattern.length - 1)) ? d + 1 : d;
        if (c === x.c) {
            this.nodeProximity(x.mid, { text: prefix.text + x.c }, recurD, pattern, distance, q);
        }
        else {
            this.nodeProximity(x.mid, { text: prefix.text + x.c }, recurD, pattern, distance - 1, q);
        }
        if ((distance > 0) || (c > x.c)) {
            this.nodeProximity(x.right, prefix, d, pattern, distance, q);
        }
    }
    match(pattern) {
        let q = [];
        this.patternCollect(this.root, { text: "" }, 0, pattern, q);
        return q;
    }
}
//# sourceMappingURL=collections.js.map

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/index.js ***!
  \******************************************************/
/*! exports provided: loadSegments, LocalReference, SegmentType, MergeNode, ordinalToArray, MaxNodesInBlock, MergeBlock, BaseSegment, SubSequence, runToSeg, ExternalSegment, reservedTileLabelsKey, reservedRangeLabelsKey, reservedMarkerIdKey, reservedMarkerSimpleTypeKey, Marker, TextSegment, segmentCopy, IncrementalExecOp, IncrementalMapState, UniversalSequenceNumber, UnassignedSequenceNumber, TreeMaintenanceSequenceNumber, LocalClientId, NonCollabClient, CollaborationWindow, compareNumbers, compareStrings, PartialSequenceLengths, clock, elapsedMicroseconds, useCheckQ, internedSpaces, RegisterCollection, clientSeqComparer, MergeTree, ReferenceType, IntervalType, combine, matchProperties, extend, addProperties, extendIfUndefined, createMap, Snapshot, Stack, ListRemoveEntry, ListMakeEntry, ListMakeHead, List, numberComparer, Heap, LinearDictionary, RedBlackTree, integerRangeUnion, integerRangeOverlaps, integerRangeComparer, integerRangeCopy, integerRangeToString, IntegerRangeTree, intervalComparer, IntervalTree, TST, Client, SegmentGroupCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _mergeTree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeTree */ "./node_modules/@prague/merge-tree/lib/mergeTree.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalReference", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["LocalReference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SegmentType", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["SegmentType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MergeNode", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["MergeNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ordinalToArray", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["ordinalToArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MaxNodesInBlock", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["MaxNodesInBlock"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MergeBlock", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["MergeBlock"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseSegment", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["BaseSegment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SubSequence", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["SubSequence"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "runToSeg", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["runToSeg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExternalSegment", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["ExternalSegment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reservedTileLabelsKey", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["reservedTileLabelsKey"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reservedRangeLabelsKey", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["reservedRangeLabelsKey"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reservedMarkerIdKey", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["reservedMarkerIdKey"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reservedMarkerSimpleTypeKey", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["reservedMarkerSimpleTypeKey"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Marker", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["Marker"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextSegment", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["TextSegment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "segmentCopy", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["segmentCopy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IncrementalExecOp", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["IncrementalExecOp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IncrementalMapState", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["IncrementalMapState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UniversalSequenceNumber", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnassignedSequenceNumber", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["UnassignedSequenceNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TreeMaintenanceSequenceNumber", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["TreeMaintenanceSequenceNumber"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocalClientId", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["LocalClientId"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonCollabClient", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["NonCollabClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CollaborationWindow", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["CollaborationWindow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compareNumbers", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["compareNumbers"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "compareStrings", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["compareStrings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PartialSequenceLengths", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["PartialSequenceLengths"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clock", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["clock"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elapsedMicroseconds", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["elapsedMicroseconds"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useCheckQ", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["useCheckQ"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "internedSpaces", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["internedSpaces"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RegisterCollection", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["RegisterCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clientSeqComparer", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["clientSeqComparer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MergeTree", function() { return _mergeTree__WEBPACK_IMPORTED_MODULE_0__["MergeTree"]; });

/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ops */ "./node_modules/@prague/merge-tree/lib/ops.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReferenceType", function() { return _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntervalType", function() { return _ops__WEBPACK_IMPORTED_MODULE_1__["IntervalType"]; });

/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties */ "./node_modules/@prague/merge-tree/lib/properties.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "combine", function() { return _properties__WEBPACK_IMPORTED_MODULE_2__["combine"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matchProperties", function() { return _properties__WEBPACK_IMPORTED_MODULE_2__["matchProperties"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return _properties__WEBPACK_IMPORTED_MODULE_2__["extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addProperties", function() { return _properties__WEBPACK_IMPORTED_MODULE_2__["addProperties"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extendIfUndefined", function() { return _properties__WEBPACK_IMPORTED_MODULE_2__["extendIfUndefined"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMap", function() { return _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]; });

/* harmony import */ var _snapshot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./snapshot */ "./node_modules/@prague/merge-tree/lib/snapshot.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Snapshot", function() { return _snapshot__WEBPACK_IMPORTED_MODULE_3__["Snapshot"]; });

/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./collections */ "./node_modules/@prague/merge-tree/lib/collections.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Stack", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["Stack"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListRemoveEntry", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["ListRemoveEntry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListMakeEntry", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["ListMakeEntry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListMakeHead", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["ListMakeHead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "List", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["List"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "numberComparer", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["numberComparer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["Heap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LinearDictionary", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["LinearDictionary"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RedBlackTree", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["RedBlackTree"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "integerRangeUnion", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["integerRangeUnion"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "integerRangeOverlaps", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["integerRangeOverlaps"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "integerRangeComparer", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["integerRangeComparer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "integerRangeCopy", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["integerRangeCopy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "integerRangeToString", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["integerRangeToString"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntegerRangeTree", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["IntegerRangeTree"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "intervalComparer", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["intervalComparer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntervalTree", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["IntervalTree"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TST", function() { return _collections__WEBPACK_IMPORTED_MODULE_4__["TST"]; });

/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./text */ "./node_modules/@prague/merge-tree/lib/text.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadSegments", function() { return _text__WEBPACK_IMPORTED_MODULE_5__["loadSegments"]; });

/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client */ "./node_modules/@prague/merge-tree/lib/client.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Client", function() { return _client__WEBPACK_IMPORTED_MODULE_6__["Client"]; });

/* harmony import */ var _segmentGroupCollection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./segmentGroupCollection */ "./node_modules/@prague/merge-tree/lib/segmentGroupCollection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SegmentGroupCollection", function() { return _segmentGroupCollection__WEBPACK_IMPORTED_MODULE_7__["SegmentGroupCollection"]; });









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/mergeTree.js":
/*!**********************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/mergeTree.js ***!
  \**********************************************************/
/*! exports provided: LocalReference, SegmentType, MergeNode, ordinalToArray, MaxNodesInBlock, MergeBlock, BaseSegment, SubSequence, runToSeg, ExternalSegment, reservedTileLabelsKey, reservedRangeLabelsKey, reservedMarkerIdKey, reservedMarkerSimpleTypeKey, Marker, TextSegment, segmentCopy, IncrementalExecOp, IncrementalMapState, UniversalSequenceNumber, UnassignedSequenceNumber, TreeMaintenanceSequenceNumber, LocalClientId, NonCollabClient, CollaborationWindow, compareNumbers, compareStrings, PartialSequenceLengths, clock, elapsedMicroseconds, useCheckQ, internedSpaces, RegisterCollection, clientSeqComparer, MergeTree */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalReference", function() { return LocalReference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SegmentType", function() { return SegmentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeNode", function() { return MergeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ordinalToArray", function() { return ordinalToArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxNodesInBlock", function() { return MaxNodesInBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeBlock", function() { return MergeBlock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseSegment", function() { return BaseSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubSequence", function() { return SubSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runToSeg", function() { return runToSeg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExternalSegment", function() { return ExternalSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reservedTileLabelsKey", function() { return reservedTileLabelsKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reservedRangeLabelsKey", function() { return reservedRangeLabelsKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reservedMarkerIdKey", function() { return reservedMarkerIdKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reservedMarkerSimpleTypeKey", function() { return reservedMarkerSimpleTypeKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Marker", function() { return Marker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextSegment", function() { return TextSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "segmentCopy", function() { return segmentCopy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncrementalExecOp", function() { return IncrementalExecOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncrementalMapState", function() { return IncrementalMapState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UniversalSequenceNumber", function() { return UniversalSequenceNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnassignedSequenceNumber", function() { return UnassignedSequenceNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeMaintenanceSequenceNumber", function() { return TreeMaintenanceSequenceNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalClientId", function() { return LocalClientId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NonCollabClient", function() { return NonCollabClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollaborationWindow", function() { return CollaborationWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareNumbers", function() { return compareNumbers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareStrings", function() { return compareStrings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PartialSequenceLengths", function() { return PartialSequenceLengths; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clock", function() { return clock; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elapsedMicroseconds", function() { return elapsedMicroseconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useCheckQ", function() { return useCheckQ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "internedSpaces", function() { return internedSpaces; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegisterCollection", function() { return RegisterCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clientSeqComparer", function() { return clientSeqComparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeTree", function() { return MergeTree; });
/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collections */ "./node_modules/@prague/merge-tree/lib/collections.js");
/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ops */ "./node_modules/@prague/merge-tree/lib/ops.js");
/* harmony import */ var _properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./properties */ "./node_modules/@prague/merge-tree/lib/properties.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _segmentGroupCollection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./segmentGroupCollection */ "./node_modules/@prague/merge-tree/lib/segmentGroupCollection.js");





class LocalReference {
    constructor(segment, offset = 0, refType = _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].Simple) {
        this.segment = segment;
        this.offset = offset;
        this.refType = refType;
    }
    min(b) {
        if (this.compare(b) < 0) {
            return this;
        }
        else {
            return b;
        }
    }
    max(b) {
        if (this.compare(b) > 0) {
            return this;
        }
        else {
            return b;
        }
    }
    compare(b) {
        if (this.segment === b.segment) {
            return this.offset - b.offset;
        }
        else {
            if (this.segment.ordinal < b.segment.ordinal) {
                return -1;
            }
            else {
                return 1;
            }
        }
    }
    toPosition(mergeTree, refSeq, clientId) {
        if (this.segment) {
            return this.offset + mergeTree.getOffset(this.segment, refSeq, clientId);
        }
        else {
            return -1;
        }
    }
    hasTileLabels() {
        return refHasTileLabels(this);
    }
    hasRangeLabels() {
        return refHasRangeLabels(this);
    }
    hasTileLabel(label) {
        return refHasTileLabel(this, label);
    }
    hasRangeLabel(label) {
        return refHasRangeLabel(this, label);
    }
    getTileLabels() {
        return refGetTileLabels(this);
    }
    getRangeLabels() {
        return refGetRangeLabels(this);
    }
    isLeaf() {
        return false;
    }
    addProperties(newProps, op) {
        this.properties = _properties__WEBPACK_IMPORTED_MODULE_2__["addProperties"](this.properties, newProps, op);
    }
    getSegment() {
        return this.segment;
    }
    getOffset() {
        return this.offset;
    }
    getProperties() {
        return this.properties;
    }
}
var SegmentType;
(function (SegmentType) {
    SegmentType[SegmentType["Base"] = 0] = "Base";
    SegmentType[SegmentType["Text"] = 1] = "Text";
    SegmentType[SegmentType["Marker"] = 2] = "Marker";
    SegmentType[SegmentType["External"] = 3] = "External";
    SegmentType[SegmentType["Custom"] = 4] = "Custom";
    SegmentType[SegmentType["Run"] = 5] = "Run";
})(SegmentType || (SegmentType = {}));
class MergeNode {
    isLeaf() {
        return false;
    }
}
function addTile(tile, tiles) {
    for (let tileLabel of tile.getTileLabels()) {
        tiles[tileLabel] = tile;
    }
}
function addTileIfNotPresent(tile, tiles) {
    for (let tileLabel of tile.getTileLabels()) {
        if (tiles[tileLabel] === undefined) {
            tiles[tileLabel] = tile;
        }
    }
}
function applyStackDelta(currentStackMap, deltaStackMap) {
    for (let label in deltaStackMap) {
        let deltaStack = deltaStackMap[label];
        if (!deltaStack.empty()) {
            let currentStack = currentStackMap[label];
            if (currentStack === undefined) {
                currentStack = new _collections__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
                currentStackMap[label] = currentStack;
            }
            for (let delta of deltaStack.items) {
                applyRangeReference(currentStack, delta);
            }
        }
    }
}
function applyRangeReference(stack, delta) {
    if (delta.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin) {
        stack.push(delta);
        return true;
    }
    else {
        // assume delta is end reference
        let top = stack.top();
        // TODO: match end with begin
        if (top && (top.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin)) {
            stack.pop();
        }
        else {
            stack.push(delta);
        }
        return false;
    }
}
function addNodeReferences(mergeTree, node, rightmostTiles, leftmostTiles, rangeStacks) {
    function updateRangeInfo(label, refPos) {
        let stack = rangeStacks[label];
        if (stack === undefined) {
            stack = new _collections__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
            rangeStacks[label] = stack;
        }
        applyRangeReference(stack, refPos);
    }
    if (node.isLeaf()) {
        let segment = node;
        if (mergeTree.localNetLength(segment) > 0) {
            if (segment.getType() == SegmentType.Marker) {
                let marker = node;
                let markerId = marker.getId();
                // also in insertMarker but need for reload segs case
                // can add option for this only from reload segs
                if (markerId) {
                    mergeTree.mapIdToSegment(markerId, marker);
                }
                if (marker.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].Tile) {
                    addTile(marker, rightmostTiles);
                    addTileIfNotPresent(marker, leftmostTiles);
                }
                if (marker.refType & (_ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin | _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestEnd)) {
                    for (let label of marker.getRangeLabels()) {
                        updateRangeInfo(label, marker);
                    }
                }
            }
            else {
                // TODO: generalize to other segment types
                let textSegment = node;
                if (textSegment.localRefs && (textSegment.hierRefCount !== undefined) &&
                    (textSegment.hierRefCount > 0)) {
                    for (let lref of textSegment.localRefs) {
                        if (lref.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].Tile) {
                            addTile(lref, rightmostTiles);
                            addTileIfNotPresent(lref, leftmostTiles);
                        }
                        if (lref.refType & (_ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin | _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestEnd)) {
                            for (let label of lref.getRangeLabels()) {
                                updateRangeInfo(label, lref);
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        let block = node;
        applyStackDelta(rangeStacks, block.rangeStacks);
        _properties__WEBPACK_IMPORTED_MODULE_2__["extend"](rightmostTiles, block.rightmostTiles);
        _properties__WEBPACK_IMPORTED_MODULE_2__["extendIfUndefined"](leftmostTiles, block.leftmostTiles);
    }
}
function ordinalToArray(ord) {
    let a = [];
    if (ord) {
        for (let i = 0, len = ord.length; i < len; i++) {
            a.push(ord.charCodeAt(i));
        }
    }
    return a;
}
const MaxNodesInBlock = 8;
class MergeBlock extends MergeNode {
    constructor(childCount) {
        super();
        this.childCount = childCount;
        this.children = new Array(MaxNodesInBlock);
    }
    hierBlock() {
        return undefined;
    }
    setOrdinal(child, index) {
        let childCount = this.childCount;
        if (childCount === 8) {
            childCount = 7;
        }
        assert__WEBPACK_IMPORTED_MODULE_3__((childCount >= 1) && (childCount <= 7));
        let localOrdinal;
        let ordinalWidth = 1 << (MaxNodesInBlock - (childCount + 1));
        if (index === 0) {
            localOrdinal = ordinalWidth - 1;
        }
        else {
            let prevOrd = this.children[index - 1].ordinal;
            let prevOrdCode = prevOrd.charCodeAt(prevOrd.length - 1);
            localOrdinal = prevOrdCode + ordinalWidth;
        }
        child.ordinal = this.ordinal + String.fromCharCode(localOrdinal);
        if (MergeBlock.traceOrdinals) {
            console.log(`so: prnt chld prev ${ordinalToArray(this.ordinal)} ${ordinalToArray(child.ordinal)} ${(index > 0) ? ordinalToArray(this.children[index - 1].ordinal) : "NA"}`);
        }
        assert__WEBPACK_IMPORTED_MODULE_3__(child.ordinal.length === (this.ordinal.length + 1));
        if (index > 0) {
            assert__WEBPACK_IMPORTED_MODULE_3__(child.ordinal > this.children[index - 1].ordinal);
            //console.log(`${ordinalToArray(this.ordinal)} ${ordinalToArray(child.ordinal)} ${ordinalToArray(this.children[index - 1].ordinal)}`);
            //    console.log(`ord width ${ordinalWidth}`);
        }
    }
    assignChild(child, index, updateOrdinal = true) {
        child.parent = this;
        child.index = index;
        if (updateOrdinal) {
            this.setOrdinal(child, index);
        }
        this.children[index] = child;
    }
}
MergeBlock.traceOrdinals = false;
class HierMergeBlock extends MergeBlock {
    constructor(childCount) {
        super(childCount);
        this.rightmostTiles = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
        this.leftmostTiles = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
        this.rangeStacks = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
    }
    addNodeReferences(mergeTree, node) {
        addNodeReferences(mergeTree, node, this.rightmostTiles, this.leftmostTiles, this.rangeStacks);
    }
    hierBlock() {
        return this;
    }
    hierToString(indentCount) {
        let strbuf = "";
        for (let key in this.rangeStacks) {
            let stack = this.rangeStacks[key];
            strbuf += internedSpaces(indentCount);
            strbuf += `${key}: `;
            for (let item of stack.items) {
                strbuf += `${item.toString()} `;
            }
            strbuf += "\n";
        }
        return strbuf;
    }
}
function nodeTotalLength(mergeTree, node) {
    if (!node.isLeaf()) {
        return node.cachedLength;
    }
    else {
        return mergeTree.localNetLength(node);
    }
}
class BaseSegment extends MergeNode {
    constructor(seq, clientId) {
        super();
        this.seq = seq;
        this.clientId = clientId;
        this.segmentGroups = new _segmentGroupCollection__WEBPACK_IMPORTED_MODULE_4__["SegmentGroupCollection"](this);
    }
    addLocalRef(lref) {
        if ((this.hierRefCount === undefined) || (this.hierRefCount === 0)) {
            if (lref.hasRangeLabels() || lref.hasTileLabels()) {
                this.hierRefCount = 1;
            }
        }
        if (!this.localRefs) {
            this.localRefs = [lref];
        }
        else {
            let i = 0, len = this.localRefs.length;
            for (; i < len; i++) {
                if (this.localRefs[i].offset > lref.offset) {
                    break;
                }
            }
            if (i < len) {
                for (let k = len; k > i; k--) {
                    this.localRefs[k] = this.localRefs[k - 1];
                }
                this.localRefs[i] = lref;
            }
            else {
                this.localRefs.push(lref);
            }
        }
    }
    removeLocalRef(lref) {
        if (this.localRefs) {
            for (let i = 0, len = this.localRefs.length; i < len; i++) {
                if (lref === this.localRefs[i]) {
                    for (let j = i; j < (len - 1); j++) {
                        this.localRefs[j] = this.localRefs[j + 1];
                    }
                    this.localRefs.length--;
                    if (lref.hasRangeLabels() || lref.hasTileLabels()) {
                        this.hierRefCount--;
                    }
                    return lref;
                }
            }
        }
    }
    splitLocalRefs(pos, leafSegment) {
        let aRefs = [];
        let bRefs = [];
        for (let localRef of this.localRefs) {
            if (localRef.offset < pos) {
                aRefs.push(localRef);
            }
            else {
                localRef.segment = leafSegment;
                localRef.offset -= pos;
                bRefs.push(localRef);
            }
        }
        this.localRefs = aRefs;
        leafSegment.localRefs = bRefs;
    }
    addProperties(newProps, op, seq) {
        this.properties = _properties__WEBPACK_IMPORTED_MODULE_2__["addProperties"](this.properties, newProps, op, seq);
    }
    hasProperty(key) {
        return this.properties && (this.properties[key] !== undefined);
    }
    isLeaf() {
        return true;
    }
    cloneInto(b) {
        b.clientId = this.clientId;
        // TODO: deep clone properties
        b.properties = _properties__WEBPACK_IMPORTED_MODULE_2__["extend"](_properties__WEBPACK_IMPORTED_MODULE_2__["createMap"](), this.properties);
        b.removedClientId = this.removedClientId;
        // TODO: copy removed client overlap and branch removal info
        b.removedSeq = this.removedSeq;
        b.seq = this.seq;
    }
    canAppend(segment, mergeTree) {
        return false;
    }
    addSerializedProps(jseg) {
        if (this.properties) {
            jseg.props = this.properties;
        }
    }
    toJSONObject() {
        let obj = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
        this.addSerializedProps(obj);
        return obj;
    }
    // TODO: use function in properties.ts
    matchProperties(b) {
        if (this.properties) {
            if (!b.properties) {
                return false;
            }
            else {
                let bProps = b.properties;
                // for now, straightforward; later use hashing
                for (let key in this.properties) {
                    if (bProps[key] === undefined) {
                        return false;
                    }
                    else if (bProps[key] !== this.properties[key]) {
                        return false;
                    }
                }
                for (let key in bProps) {
                    if (this.properties[key] === undefined) {
                        return false;
                    }
                }
            }
        }
        else {
            if (b.properties) {
                return false;
            }
        }
        return true;
    }
}
const MaxRun = 128;
class SubSequence extends BaseSegment {
    constructor(items, seq, clientId) {
        super(seq, clientId);
        this.items = items;
        this.cachedLength = items.length;
    }
    toJSONObject() {
        const obj = { items: this.items };
        super.addSerializedProps(obj);
        return obj;
    }
    splitAt(pos) {
        if (pos > 0) {
            const remainingItems = this.items.slice(pos);
            this.items = this.items.slice(0, pos);
            this.cachedLength = this.items.length;
            const leafSegment = new SubSequence(remainingItems, this.seq, this.clientId);
            if (this.properties) {
                leafSegment.addProperties(_properties__WEBPACK_IMPORTED_MODULE_2__["extend"](_properties__WEBPACK_IMPORTED_MODULE_2__["createMap"](), this.properties));
            }
            segmentCopy(this, leafSegment);
            if (this.localRefs) {
                this.splitLocalRefs(pos, leafSegment);
            }
            return leafSegment;
        }
    }
    clone(start = 0, end) {
        let clonedItems = this.items;
        if (end === undefined) {
            clonedItems = clonedItems.slice(start);
        }
        else {
            clonedItems = clonedItems.slice(start, end);
        }
        const b = new SubSequence(clonedItems, this.seq, this.clientId);
        this.cloneInto(b);
        return b;
    }
    getType() {
        return SegmentType.Run;
    }
    canAppend(segment, mergeTree) {
        if (!this.removedSeq) {
            if (segment.getType() === SegmentType.Run) {
                if (this.matchProperties(segment)) {
                    const branchId = mergeTree.getBranchId(this.clientId);
                    const segBranchId = mergeTree.getBranchId(segment.clientId);
                    if ((segBranchId === branchId) && (mergeTree.localNetLength(segment) > 0)) {
                        return ((this.cachedLength <= MaxRun) ||
                            (segment.cachedLength <= MaxRun));
                    }
                }
            }
        }
        return false;
    }
    toString() {
        return this.items.toString();
    }
    append(segment) {
        if (segment.getType() === SegmentType.Run) {
            const rseg = segment;
            if (segment.localRefs) {
                const adj = this.cachedLength;
                for (const localRef of segment.localRefs) {
                    localRef.offset += adj;
                    localRef.segment = this;
                }
            }
            this.items = this.items.concat(rseg.items);
            this.cachedLength = this.items.length;
            return this;
        }
        else {
            throw new Error("can only append another run segment");
        }
    }
    // TODO: retain removed items for undo
    // returns true if entire run removed
    removeRange(start, end) {
        let remnantItems = [];
        const len = this.items.length;
        if (start > 0) {
            remnantItems = remnantItems.concat(this.items.slice(0, start));
        }
        if (end < len) {
            remnantItems = remnantItems.concat(this.items.slice(end));
        }
        this.items = remnantItems;
        this.cachedLength = this.items.length;
        return (this.items.length === 0);
    }
}
function runToSeg(segSpec) {
    const seg = new SubSequence(segSpec.items, UniversalSequenceNumber, LocalClientId);
    if (segSpec.props) {
        seg.addProperties(segSpec.props);
    }
    return seg;
}
/**
 * A non-shared placeholder for external content.
 */
class ExternalSegment extends BaseSegment {
    constructor(placeholderSeq, sequenceLength, sequenceIndex) {
        super();
        this.placeholderSeq = placeholderSeq;
        this.sequenceLength = sequenceLength;
        this.sequenceIndex = sequenceIndex;
    }
    toJSONObject() {
        let obj = { sequenceIndex: this.sequenceIndex, sequenceLength: this.sequenceLength };
        super.addSerializedProps(obj);
        return obj;
    }
    mergeTreeInsert(mergeTree, pos, refSeq, clientId, seq, opArgs) {
        mergeTree.insert(pos, refSeq, clientId, seq, this, (block, pos, refSeq, clientId, seq, eseg) => mergeTree.blockInsert(block, pos, refSeq, clientId, seq, eseg), opArgs);
    }
    clone() {
        throw new Error('clone not implemented');
    }
    append(segment) {
        throw new Error('Can not append to external segment');
    }
    getType() {
        return SegmentType.External;
    }
    removeRange(start, end) {
        throw new Error('Method not implemented.');
    }
    splitAt(pos) {
        throw new Error('Method not implemented.');
    }
}
let reservedTileLabelsKey = "referenceTileLabels";
let reservedRangeLabelsKey = "referenceRangeLabels";
let reservedMarkerIdKey = "markerId";
let reservedMarkerSimpleTypeKey = "markerSimpleType";
function refHasTileLabels(refPos) {
    return (refPos.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].Tile) &&
        refPos.properties && refPos.properties[reservedTileLabelsKey];
}
function refHasRangeLabels(refPos) {
    return (refPos.refType & (_ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin | _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestEnd)) &&
        refPos.properties && refPos.properties[reservedRangeLabelsKey];
}
function refHasTileLabel(refPos, label) {
    if (refPos.hasTileLabels()) {
        for (let refLabel of refPos.properties[reservedTileLabelsKey]) {
            if (label === refLabel) {
                return true;
            }
        }
    }
    return false;
}
function refHasRangeLabel(refPos, label) {
    if (refPos.hasRangeLabels()) {
        for (let refLabel of refPos.properties[reservedRangeLabelsKey]) {
            if (label === refLabel) {
                return true;
            }
        }
    }
    return false;
}
function refGetTileLabels(refPos) {
    if (refPos.hasTileLabels()) {
        return refPos.properties[reservedTileLabelsKey];
    }
    else {
        return [];
    }
}
function refGetRangeLabels(refPos) {
    if (refPos.hasRangeLabels()) {
        return refPos.properties[reservedRangeLabelsKey];
    }
    else {
        return [];
    }
}
class Marker extends BaseSegment {
    constructor(refType, seq, clientId) {
        super(seq, clientId);
        this.refType = refType;
        this.cachedLength = 1;
    }
    static make(refType, props, seq, clientId) {
        let marker = new Marker(refType, seq, clientId);
        if (props) {
            marker.addProperties(props);
        }
        return marker;
    }
    toJSONObject() {
        let obj = { marker: { refType: this.refType } };
        super.addSerializedProps(obj);
        return obj;
    }
    clone() {
        let b = Marker.make(this.refType, this.properties, this.seq, this.clientId);
        this.cloneInto(b);
        return b;
    }
    getSegment() {
        return this;
    }
    getOffset() {
        return 0;
    }
    hasSimpleType(simpleTypeName) {
        return this.hasProperty(reservedMarkerSimpleTypeKey) &&
            this.properties[reservedMarkerSimpleTypeKey] === simpleTypeName;
    }
    getProperties() {
        return this.properties;
    }
    getId() {
        if (this.properties && this.properties[reservedMarkerIdKey]) {
            return this.properties[reservedMarkerIdKey];
        }
    }
    hasTileLabels() {
        return refHasTileLabels(this);
    }
    hasRangeLabels() {
        return refHasRangeLabels(this);
    }
    hasTileLabel(label) {
        return refHasTileLabel(this, label);
    }
    hasRangeLabel(label) {
        return refHasRangeLabel(this, label);
    }
    getTileLabels() {
        return refGetTileLabels(this);
    }
    getRangeLabels() {
        return refGetRangeLabels(this);
    }
    toString() {
        let bbuf = "";
        if (this.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].Tile) {
            bbuf += "Tile";
        }
        if (this.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin) {
            if (bbuf.length > 0) {
                bbuf += "; ";
            }
            bbuf += "RangeBegin";
        }
        if (this.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestEnd) {
            if (bbuf.length > 0) {
                bbuf += "; ";
            }
            bbuf += "RangeEnd";
        }
        let lbuf = "";
        let id = this.getId();
        if (id) {
            bbuf += ` (${id}) `;
        }
        if (this.hasTileLabels()) {
            lbuf += "tile -- ";
            let labels = this.properties[reservedTileLabelsKey];
            for (let i = 0, len = labels.length; i < len; i++) {
                let tileLabel = labels[i];
                if (i > 0) {
                    lbuf += "; ";
                }
                lbuf += tileLabel;
            }
        }
        if (this.hasRangeLabels()) {
            let rangeKind = "begin";
            if (this.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestEnd) {
                rangeKind = "end";
            }
            if (this.hasTileLabels()) {
                lbuf += " ";
            }
            lbuf += `range ${rangeKind} -- `;
            let labels = this.properties[reservedRangeLabelsKey];
            for (let i = 0, len = labels.length; i < len; i++) {
                let rangeLabel = labels[i];
                if (i > 0) {
                    lbuf += "; ";
                }
                lbuf += rangeLabel;
            }
        }
        let pbuf = "";
        if (this.properties) {
            pbuf += JSON.stringify(this.properties);
        }
        return `M ${bbuf}: ${lbuf} ${pbuf}`;
    }
    getType() {
        return SegmentType.Marker;
    }
    removeRange(start, end) {
        console.log("remove range called on marker");
        return false;
    }
    splitAt(pos) {
        return undefined;
    }
    canAppend(segment) {
        return false;
    }
    append(segment) {
        return undefined;
    }
}
class TextSegment extends BaseSegment {
    constructor(text, seq, clientId) {
        super(seq, clientId);
        this.text = text;
        this.cachedLength = text.length;
    }
    static make(text, props, seq, clientId) {
        let tseg = new TextSegment(text, seq, clientId);
        if (props) {
            tseg.addProperties(props);
        }
        return tseg;
    }
    toJSONObject() {
        let obj = { text: this.text };
        super.addSerializedProps(obj);
        return obj;
    }
    splitAt(pos) {
        if (pos > 0) {
            let remainingText = this.text.substring(pos);
            this.text = this.text.substring(0, pos);
            this.cachedLength = this.text.length;
            let leafSegment = new TextSegment(remainingText, this.seq, this.clientId);
            if (this.properties) {
                leafSegment.addProperties(_properties__WEBPACK_IMPORTED_MODULE_2__["extend"](_properties__WEBPACK_IMPORTED_MODULE_2__["createMap"](), this.properties));
            }
            segmentCopy(this, leafSegment);
            if (this.localRefs) {
                this.splitLocalRefs(pos, leafSegment);
            }
            return leafSegment;
        }
    }
    clone(start = 0, end) {
        let text = this.text;
        if (end === undefined) {
            text = text.substring(start);
        }
        else {
            text = text.substring(start, end);
        }
        let b = TextSegment.make(text, this.properties, this.seq, this.clientId);
        this.cloneInto(b);
        return b;
    }
    getType() {
        return SegmentType.Text;
    }
    canAppend(segment, mergeTree) {
        if ((!this.removedSeq) && (this.text.charAt(this.text.length - 1) != '\n')) {
            if (segment.getType() === SegmentType.Text) {
                if (this.matchProperties(segment)) {
                    let branchId = mergeTree.getBranchId(this.clientId);
                    let segBranchId = mergeTree.getBranchId(segment.clientId);
                    if ((segBranchId === branchId) && (mergeTree.localNetLength(segment) > 0)) {
                        return ((this.cachedLength <= MergeTree.TextSegmentGranularity) ||
                            (segment.cachedLength <= MergeTree.TextSegmentGranularity));
                    }
                }
            }
        }
        return false;
    }
    toString() {
        return this.text;
    }
    append(segment) {
        if (segment.getType() === SegmentType.Text) {
            if (segment.localRefs) {
                let adj = this.text.length;
                for (let localRef of segment.localRefs) {
                    localRef.offset += adj;
                    localRef.segment = this;
                }
            }
            this.text += segment.text;
            this.cachedLength = this.text.length;
            return this;
        }
        else {
            throw new Error("can only append text segment");
        }
    }
    // TODO: retain removed text for undo
    // returns true if entire string removed
    removeRange(start, end) {
        let remnantString = "";
        let len = this.text.length;
        if (start > 0) {
            remnantString += this.text.substring(0, start);
        }
        if (end < len) {
            remnantString += this.text.substring(end);
        }
        this.text = remnantString;
        this.cachedLength = remnantString.length;
        return (remnantString.length == 0);
    }
}
function segmentCopy(from, to) {
    to.parent = from.parent;
    to.removedClientId = from.removedClientId;
    to.removedSeq = from.removedSeq;
    if (from.removalsByBranch) {
        to.removalsByBranch = [];
        for (let i = 0, len = from.removalsByBranch.length; i < len; i++) {
            let fromRemovalInfo = from.removalsByBranch[i];
            if (fromRemovalInfo) {
                to.removalsByBranch[i] = {
                    removedClientId: fromRemovalInfo.removedClientId,
                    removedSeq: fromRemovalInfo.removedSeq,
                    removedClientOverlap: fromRemovalInfo.removedClientOverlap,
                };
            }
        }
    }
    to.seq = from.seq;
    to.clientId = from.clientId;
    to.removedClientOverlap = from.removedClientOverlap;
    from.segmentGroups.copyTo(to);
}
function incrementalGatherText(segment, state) {
    if (segment.getType() == SegmentType.Text) {
        let textSegment = segment;
        if (MergeTree.traceGatherText) {
            console.log(`@cli ${this.collabWindow ? this.collabwindow.clientId : -1} gather seg seq ${textSegment.seq} rseq ${textSegment.removedSeq} text ${textSegment.text}`);
        }
        if ((state.start <= 0) && (state.end >= textSegment.text.length)) {
            state.context.text += textSegment.text;
        }
        else {
            if (state.end >= textSegment.text.length) {
                state.context.text += textSegment.text.substring(state.start);
            }
            else {
                state.context.text += textSegment.text.substring(state.start, state.end);
            }
        }
    }
    state.op = IncrementalExecOp.Go;
}
var IncrementalExecOp;
(function (IncrementalExecOp) {
    IncrementalExecOp[IncrementalExecOp["Go"] = 0] = "Go";
    IncrementalExecOp[IncrementalExecOp["Stop"] = 1] = "Stop";
    IncrementalExecOp[IncrementalExecOp["Yield"] = 2] = "Yield";
})(IncrementalExecOp || (IncrementalExecOp = {}));
class IncrementalMapState {
    constructor(block, actions, pos, refSeq, clientId, context, start, end, childIndex = 0) {
        this.block = block;
        this.actions = actions;
        this.pos = pos;
        this.refSeq = refSeq;
        this.clientId = clientId;
        this.context = context;
        this.start = start;
        this.end = end;
        this.childIndex = childIndex;
        this.op = IncrementalExecOp.Go;
    }
}
/**
 * Sequence numbers for shared segments start at 1 or greater.  Every segment marked
 * with sequence number zero will be counted as part of the requested string.
 */
const UniversalSequenceNumber = 0;
const UnassignedSequenceNumber = -1;
const TreeMaintenanceSequenceNumber = -2;
const LocalClientId = -1;
const NonCollabClient = -2;
class CollaborationWindow {
    constructor() {
        this.clientId = LocalClientId;
        this.collaborating = false;
        // lowest-numbered segment in window; no client can reference a state before this one
        this.minSeq = 0;
        // highest-numbered segment in window and current
        // reference segment for this client
        this.currentSeq = 0;
    }
    loadFrom(a) {
        this.clientId = a.clientId;
        this.collaborating = a.collaborating;
        this.localMinSeq = a.localMinSeq;
        this.globalMinSeq = a.globalMinSeq;
        this.minSeq = a.minSeq;
        this.currentSeq = a.currentSeq;
    }
}
/**
 * Returns the partial length whose sequence number is
 * the greatest sequence number within a that is
 * less than or equal to key.
 * @param {PartialLength[]} a array of partial segment lengths
 * @param {number} key sequence number
 */
function latestLEQ(a, key) {
    let best = -1;
    let lo = 0;
    let hi = a.length - 1;
    while (lo <= hi) {
        let mid = lo + Math.floor((hi - lo) / 2);
        if (a[mid].seq <= key) {
            if ((best < 0) || (a[best].seq < a[mid].seq)) {
                best = mid;
            }
            lo = mid + 1;
        }
        else {
            hi = mid - 1;
        }
    }
    return best;
}
function compareNumbers(a, b) {
    return a - b;
}
function compareStrings(a, b) {
    return a.localeCompare(b);
}
/**
 * Keep track of partial sums of segment lengths for all sequence numbers
 * in the current collaboration window (if any).  Only used during active
 * collaboration.
 */
class PartialSequenceLengths {
    constructor(minSeq) {
        this.minSeq = minSeq;
        this.minLength = 0;
        this.segmentCount = 0;
        this.partialLengths = [];
        this.clientSeqNumbers = [];
    }
    cliLatestLEQ(clientId, refSeq) {
        let cliSeqs = this.clientSeqNumbers[clientId];
        if (cliSeqs) {
            return latestLEQ(cliSeqs, refSeq);
        }
        else {
            return -1;
        }
    }
    cliLatest(clientId) {
        let cliSeqs = this.clientSeqNumbers[clientId];
        if (cliSeqs && (cliSeqs.length > 0)) {
            return cliSeqs.length - 1;
        }
        else {
            return -1;
        }
    }
    compare(b) {
        function comparePartialLengths(aList, bList) {
            let aLen = aList.length;
            let bLen = bList.length;
            if (aLen != bLen) {
                return false;
            }
            for (let i = 0; i < aLen; i++) {
                let aPartial = aList[i];
                let bPartial = bList[i];
                if ((aPartial.seq != bPartial.seq) || (aPartial.clientId != bPartial.clientId) ||
                    (aPartial.seglen != bPartial.seglen) || (aPartial.len != bPartial.len) ||
                    (aPartial.overlapRemoveClients && (!bPartial.overlapRemoveClients))) {
                    return false;
                }
            }
            return true;
        }
        if (!comparePartialLengths(this.partialLengths, b.partialLengths)) {
            return false;
        }
        for (let clientId in this.clientSeqNumbers) {
            if (!b.clientSeqNumbers[clientId]) {
                return false;
            }
            else if (!comparePartialLengths(this.clientSeqNumbers[clientId], b.clientSeqNumbers[clientId])) {
                return false;
            }
        }
        return true;
    }
    branchToString(glc, branchId = 0) {
        let buf = "";
        for (let partial of this.partialLengths) {
            buf += `(${partial.seq},${partial.len}) `;
        }
        for (let clientId in this.clientSeqNumbers) {
            if (this.clientSeqNumbers[clientId].length > 0) {
                buf += `Client `;
                if (glc) {
                    buf += `${glc(+clientId)}`;
                }
                else {
                    buf += `${clientId}`;
                }
                buf += '[';
                for (let partial of this.clientSeqNumbers[clientId]) {
                    buf += `(${partial.seq},${partial.len})`;
                }
                buf += ']';
            }
        }
        buf = `Br ${branchId}, min(seq ${this.minSeq}): ${this.minLength}; sc: ${this.segmentCount};` + buf;
        return buf;
    }
    toString(glc, indentCount = 0) {
        let buf = this.branchToString(glc);
        if (this.downstreamPartialLengths) {
            for (let i = 0, len = this.downstreamPartialLengths.length; i < len; i++) {
                buf += "\n";
                buf += internedSpaces(indentCount);
                buf += this.downstreamPartialLengths[i].branchToString(glc, i + 1);
            }
        }
        return buf;
    }
    getPartialLength(mergeTree, refSeq, clientId) {
        let branchId = mergeTree.getBranchId(clientId);
        if (MergeTree.traceTraversal) {
            console.log(`plen branch ${branchId}`);
        }
        if (branchId > 0) {
            return this.downstreamPartialLengths[branchId - 1].getBranchPartialLength(refSeq, clientId);
        }
        else {
            return this.getBranchPartialLength(refSeq, clientId);
        }
    }
    getBranchPartialLength(refSeq, clientId) {
        let pLen = this.minLength;
        let seqIndex = latestLEQ(this.partialLengths, refSeq);
        let cliLatestindex = this.cliLatest(clientId);
        let cliSeq = this.clientSeqNumbers[clientId];
        if (seqIndex >= 0) {
            pLen += this.partialLengths[seqIndex].len;
            if (cliLatestindex >= 0) {
                let cliLatest = cliSeq[cliLatestindex];
                if (cliLatest.seq > refSeq) {
                    pLen += cliLatest.len;
                    let precedingCliIndex = this.cliLatestLEQ(clientId, refSeq);
                    if (precedingCliIndex >= 0) {
                        pLen -= cliSeq[precedingCliIndex].len;
                    }
                }
            }
        }
        else {
            if (cliLatestindex >= 0) {
                let cliLatest = cliSeq[cliLatestindex];
                pLen += cliLatest.len;
            }
        }
        return pLen;
    }
    // clear away partial sums for sequence numbers earlier than the current window
    zamboni(segmentWindow) {
        function copyDown(partialLengths) {
            let mindex = latestLEQ(partialLengths, segmentWindow.minSeq);
            let minLength = 0;
            //console.log(`mindex ${mindex}`);
            if (mindex >= 0) {
                minLength = partialLengths[mindex].len;
                let seqCount = partialLengths.length;
                if (mindex <= (seqCount - 1)) {
                    // still some entries remaining
                    let remainingCount = (seqCount - mindex) - 1;
                    //copy down
                    for (let i = 0; i < remainingCount; i++) {
                        partialLengths[i] = partialLengths[i + mindex + 1];
                        partialLengths[i].len -= minLength;
                    }
                    partialLengths.length = remainingCount;
                }
            }
            return minLength;
        }
        this.minLength += copyDown(this.partialLengths);
        for (let clientId in this.clientSeqNumbers) {
            let cliPartials = this.clientSeqNumbers[clientId];
            if (cliPartials) {
                copyDown(cliPartials);
            }
        }
    }
    addClientSeqNumber(clientId, seq, seglen) {
        if (this.clientSeqNumbers[clientId] === undefined) {
            this.clientSeqNumbers[clientId] = [];
        }
        let cli = this.clientSeqNumbers[clientId];
        let pLen = seglen;
        if (cli.length > 0) {
            pLen += cli[cli.length - 1].len;
        }
        cli.push({ seq: seq, len: pLen, seglen: seglen });
    }
    // assumes sequence number already coalesced
    addClientSeqNumberFromPartial(partialLength) {
        this.addClientSeqNumber(partialLength.clientId, partialLength.seq, partialLength.seglen);
        if (partialLength.overlapRemoveClients) {
            partialLength.overlapRemoveClients.map((oc) => {
                this.addClientSeqNumber(oc.data.clientId, partialLength.seq, oc.data.seglen);
                return true;
            });
        }
    }
    update(mergeTree, block, seq, clientId, collabWindow) {
        let segBranchId = mergeTree.getBranchId(clientId);
        // console.log(`seg br ${segBranchId} cli ${glc(mergeTree, segment.clientId)} me ${glc(mergeTree, mergeTree.collabWindow.clientId)}`);
        if (segBranchId == 0) {
            this.updateBranch(mergeTree, 0, block, seq, clientId, collabWindow);
        }
        if (mergeTree.localBranchId > 0) {
            for (let i = 0; i < mergeTree.localBranchId; i++) {
                let branchId = i + 1;
                if (segBranchId <= branchId) {
                    this.downstreamPartialLengths[i].updateBranch(mergeTree, branchId, block, seq, clientId, collabWindow);
                }
            }
        }
    }
    // assume: seq is latest sequence number; no structural change to sub-tree, but a segment
    // with sequence number seq has been added within the sub-tree
    // TODO: assert client id matches
    updateBranch(mergeTree, branchId, node, seq, clientId, collabWindow) {
        let seqSeglen = 0;
        let segCount = 0;
        // compute length for seq across children
        for (let i = 0; i < node.childCount; i++) {
            let child = node.children[i];
            if (!child.isLeaf()) {
                let childBlock = child;
                let branchPartialLengths = childBlock.partialLengths.partialLengthsForBranch(branchId);
                let partialLengths = branchPartialLengths.partialLengths;
                let seqIndex = latestLEQ(partialLengths, seq);
                if (seqIndex >= 0) {
                    let leqPartial = partialLengths[seqIndex];
                    if (leqPartial.seq == seq) {
                        seqSeglen += leqPartial.seglen;
                    }
                }
                segCount += branchPartialLengths.segmentCount;
            }
            else {
                let segment = child;
                let segBranchId = mergeTree.getBranchId(segment.clientId);
                let removalInfo = mergeTree.getRemovalInfo(branchId, segBranchId, segment);
                if (segment.seq == seq) {
                    if (removalInfo.removedSeq !== seq) {
                        seqSeglen += segment.cachedLength;
                    }
                }
                else {
                    if (removalInfo.removedSeq === seq) {
                        seqSeglen -= segment.cachedLength;
                    }
                }
                segCount++;
            }
        }
        this.segmentCount = segCount;
        function addSeq(partialLengths, seq, clientId) {
            let seqPartialLen;
            let penultPartialLen;
            let leqIndex = latestLEQ(partialLengths, seq);
            if (leqIndex >= 0) {
                let pLen = partialLengths[leqIndex];
                if (pLen.seq == seq) {
                    seqPartialLen = pLen;
                    leqIndex = latestLEQ(partialLengths, seq - 1);
                    if (leqIndex >= 0) {
                        penultPartialLen = partialLengths[leqIndex];
                    }
                }
                else {
                    penultPartialLen = pLen;
                }
            }
            if (seqPartialLen === undefined) {
                seqPartialLen = {
                    seq: seq,
                    seglen: seqSeglen,
                    clientId: clientId
                };
                partialLengths.push(seqPartialLen);
            }
            else {
                seqPartialLen.seglen = seqSeglen;
                // assert client id matches
            }
            if (penultPartialLen !== undefined) {
                seqPartialLen.len = seqPartialLen.seglen + penultPartialLen.len;
            }
            else {
                seqPartialLen.len = seqPartialLen.seglen;
            }
        }
        addSeq(this.partialLengths, seq, clientId);
        if (this.clientSeqNumbers[clientId] === undefined) {
            this.clientSeqNumbers[clientId] = [];
        }
        addSeq(this.clientSeqNumbers[clientId], seq);
        //    console.log(this.toString());
        if (PartialSequenceLengths.options.zamboni) {
            this.zamboni(collabWindow);
        }
        //   console.log('ZZZ');
        //   console.log(this.toString());
    }
    static fromLeaves(mergeTree, branchId, combinedPartialLengths, block, collabWindow) {
        combinedPartialLengths.minLength = 0;
        combinedPartialLengths.segmentCount = block.childCount;
        function getOverlapClients(overlapClientids, seglen) {
            let bst = new _collections__WEBPACK_IMPORTED_MODULE_0__["RedBlackTree"](compareNumbers);
            for (let clientId of overlapClientids) {
                bst.put(clientId, { clientId: clientId, seglen: seglen });
            }
            return bst;
        }
        function accumulateRemoveClientOverlap(partialLength, overlapRemoveClientIds, seglen) {
            if (partialLength.overlapRemoveClients) {
                for (let clientId of overlapRemoveClientIds) {
                    let ovlapClientNode = partialLength.overlapRemoveClients.get(clientId);
                    if (!ovlapClientNode) {
                        partialLength.overlapRemoveClients.put(clientId, { clientId: clientId, seglen: seglen });
                    }
                    else {
                        ovlapClientNode.data.seglen += seglen;
                    }
                }
            }
            else {
                partialLength.overlapRemoveClients = getOverlapClients(overlapRemoveClientIds, seglen);
            }
        }
        function insertSegment(segment, removedSeq = false, removalInfo = undefined) {
            let seq = segment.seq;
            let segmentLen = segment.cachedLength;
            let clientId = segment.clientId;
            let removeClientOverlap;
            if (removedSeq) {
                seq = removalInfo.removedSeq;
                segmentLen = -segmentLen;
                clientId = removalInfo.removedClientId;
                if (removalInfo.removedClientOverlap) {
                    removeClientOverlap = removalInfo.removedClientOverlap;
                }
            }
            let seqPartials = combinedPartialLengths.partialLengths;
            let seqPartialsLen = seqPartials.length;
            // find the first entry with sequence number greater or equal to seq
            let indexFirstGTE = 0;
            for (; indexFirstGTE < seqPartialsLen; indexFirstGTE++) {
                if (seqPartials[indexFirstGTE].seq >= seq) {
                    break;
                }
            }
            if ((indexFirstGTE < seqPartialsLen) && (seqPartials[indexFirstGTE].seq == seq)) {
                seqPartials[indexFirstGTE].seglen += segmentLen;
                if (removeClientOverlap) {
                    accumulateRemoveClientOverlap(seqPartials[indexFirstGTE], removeClientOverlap, segmentLen);
                }
            }
            else {
                let pLen;
                if (removeClientOverlap) {
                    let overlapClients = getOverlapClients(removeClientOverlap, segmentLen);
                    pLen = { seq: seq, clientId: clientId, len: 0, seglen: segmentLen, overlapRemoveClients: overlapClients };
                }
                else {
                    pLen = { seq: seq, clientId: clientId, len: 0, seglen: segmentLen };
                }
                if (indexFirstGTE < seqPartialsLen) {
                    // shift entries with greater sequence numbers
                    // TODO: investigate performance improvement using BST
                    for (let k = seqPartialsLen; k > indexFirstGTE; k--) {
                        seqPartials[k] = seqPartials[k - 1];
                    }
                    seqPartials[indexFirstGTE] = pLen;
                }
                else {
                    seqPartials.push(pLen);
                }
            }
        }
        function seqLTE(seq, minSeq) {
            return (seq != UnassignedSequenceNumber) && (seq <= minSeq);
        }
        for (let i = 0; i < block.childCount; i++) {
            let child = block.children[i];
            if (child.isLeaf()) {
                // leaf segment
                let segment = child;
                let segBranchId = mergeTree.getBranchId(segment.clientId);
                // console.log(`seg br ${segBranchId} cli ${glc(mergeTree, segment.clientId)} me ${glc(mergeTree, mergeTree.collabWindow.clientId)}`);
                if (segBranchId <= branchId) {
                    if (seqLTE(segment.seq, collabWindow.minSeq)) {
                        combinedPartialLengths.minLength += segment.cachedLength;
                    }
                    else {
                        if (segment.seq != UnassignedSequenceNumber) {
                            insertSegment(segment);
                        }
                    }
                    let removalInfo = mergeTree.getRemovalInfo(branchId, segBranchId, segment);
                    if (seqLTE(removalInfo.removedSeq, collabWindow.minSeq)) {
                        combinedPartialLengths.minLength -= segment.cachedLength;
                    }
                    else {
                        if ((removalInfo.removedSeq !== undefined) &&
                            (removalInfo.removedSeq != UnassignedSequenceNumber)) {
                            insertSegment(segment, true, removalInfo);
                        }
                    }
                }
            }
        }
        // post-process correctly-ordered partials computing sums and creating
        // lists for each present client id
        let seqPartials = combinedPartialLengths.partialLengths;
        let seqPartialsLen = seqPartials.length;
        let prevLen = 0;
        for (let i = 0; i < seqPartialsLen; i++) {
            seqPartials[i].len = prevLen + seqPartials[i].seglen;
            prevLen = seqPartials[i].len;
            combinedPartialLengths.addClientSeqNumberFromPartial(seqPartials[i]);
        }
    }
    static combine(mergeTree, block, collabWindow, recur = false) {
        let partialLengthsTopBranch = PartialSequenceLengths.combineBranch(mergeTree, block, collabWindow, 0, recur);
        if (mergeTree.localBranchId > 0) {
            partialLengthsTopBranch.downstreamPartialLengths = [];
            for (let i = 0; i < mergeTree.localBranchId; i++) {
                partialLengthsTopBranch.downstreamPartialLengths[i] =
                    PartialSequenceLengths.combineBranch(mergeTree, block, collabWindow, i + 1, recur);
            }
        }
        return partialLengthsTopBranch;
    }
    partialLengthsForBranch(branchId) {
        if (branchId > 0) {
            return this.downstreamPartialLengths[branchId - 1];
        }
        else {
            return this;
        }
    }
    /**
     * Combine the partial lengths of block's children
     * @param {IMergeBlock} block an interior node; it is assumed that each interior node child of this block
     * has its partials up to date
     * @param {CollaborationWindow} collabWindow segment window fo the segment tree containing textSegmentBlock
     */
    static combineBranch(mergeTree, block, collabWindow, branchId, recur = false) {
        let combinedPartialLengths = new PartialSequenceLengths(collabWindow.minSeq);
        PartialSequenceLengths.fromLeaves(mergeTree, branchId, combinedPartialLengths, block, collabWindow);
        let prevPartial;
        function combineOverlapClients(a, b) {
            if (a.overlapRemoveClients) {
                if (b.overlapRemoveClients) {
                    b.overlapRemoveClients.map((bProp) => {
                        let aProp = a.overlapRemoveClients.get(bProp.key);
                        if (aProp) {
                            aProp.data.seglen += bProp.data.seglen;
                        }
                        else {
                            a.overlapRemoveClients.put(bProp.data.clientId, bProp.data);
                        }
                        return true;
                    });
                }
            }
            else {
                a.overlapRemoveClients = b.overlapRemoveClients;
            }
        }
        function addNext(partialLength) {
            let seq = partialLength.seq;
            let pLen = 0;
            if (prevPartial) {
                if (prevPartial.seq == partialLength.seq) {
                    prevPartial.seglen += partialLength.seglen;
                    prevPartial.len += partialLength.seglen;
                    combineOverlapClients(prevPartial, partialLength);
                    return;
                }
                else {
                    pLen = prevPartial.len;
                    // previous sequence number is finished
                    combinedPartialLengths.addClientSeqNumberFromPartial(prevPartial);
                }
            }
            prevPartial = {
                seq: seq,
                clientId: partialLength.clientId,
                len: pLen + partialLength.seglen,
                seglen: partialLength.seglen,
                overlapRemoveClients: partialLength.overlapRemoveClients
            };
            combinedPartialLengths.partialLengths.push(prevPartial);
        }
        let childPartials = [];
        for (let i = 0; i < block.childCount; i++) {
            let child = block.children[i];
            if (!child.isLeaf()) {
                let childBlock = child;
                if (recur) {
                    childBlock.partialLengths = PartialSequenceLengths.combine(mergeTree, childBlock, collabWindow, true);
                }
                childPartials.push(childBlock.partialLengths.partialLengthsForBranch(branchId));
            }
        }
        let childPartialsLen = childPartials.length;
        if (childPartialsLen != 0) {
            // some children are interior nodes
            if (combinedPartialLengths.partialLengths.length > 0) {
                // some children were leaves; add combined partials from these segments
                childPartials.push(combinedPartialLengths);
                childPartialsLen++;
                combinedPartialLengths = new PartialSequenceLengths(collabWindow.minSeq);
            }
            let indices = new Array(childPartialsLen);
            let childPartialsCounts = new Array(childPartialsLen);
            for (let i = 0; i < childPartialsLen; i++) {
                indices[i] = 0;
                childPartialsCounts[i] = childPartials[i].partialLengths.length;
                combinedPartialLengths.minLength += childPartials[i].minLength;
                combinedPartialLengths.segmentCount += childPartials[i].segmentCount;
            }
            let outerIndexOfEarliest = 0;
            let earliestPartialLength;
            while (outerIndexOfEarliest >= 0) {
                outerIndexOfEarliest = -1;
                for (let k = 0; k < childPartialsLen; k++) {
                    // find next earliest sequence number
                    if (indices[k] < childPartialsCounts[k]) {
                        let cpLen = childPartials[k].partialLengths[indices[k]];
                        if ((outerIndexOfEarliest < 0) || (cpLen.seq < earliestPartialLength.seq)) {
                            outerIndexOfEarliest = k;
                            earliestPartialLength = cpLen;
                        }
                    }
                }
                if (outerIndexOfEarliest >= 0) {
                    addNext(earliestPartialLength);
                    indices[outerIndexOfEarliest]++;
                }
            }
            // add client entry for last partial, if any
            if (prevPartial) {
                combinedPartialLengths.addClientSeqNumberFromPartial(prevPartial);
            }
        }
        // TODO: incremental zamboni during build
        //console.log(combinedPartialLengths.toString());
        //console.log(`ZZZ...(min ${segmentWindow.minSeq})`);
        if (PartialSequenceLengths.options.zamboni) {
            combinedPartialLengths.zamboni(collabWindow);
        }
        //console.log(combinedPartialLengths.toString());
        return combinedPartialLengths;
    }
}
PartialSequenceLengths.options = {
    zamboni: true
};
function clock() {
    if (process.hrtime) {
        return process.hrtime();
    }
    else {
        return Date.now();
    }
}
function elapsedMicroseconds(start) {
    if (process.hrtime) {
        let end = process.hrtime(start);
        let duration = Math.round((end[0] * 1000000) + (end[1] / 1000));
        return duration;
    }
    else {
        return 1000 * (Date.now() - start);
    }
}
/**
 * Used for in-memory testing.  This will queue a reference string for each client message.
 */
const useCheckQ = false;
let indentStrings = ["", " ", "  "];
function internedSpaces(n) {
    if (indentStrings[n] === undefined) {
        indentStrings[n] = "";
        for (let i = 0; i < n; i++) {
            indentStrings[n] += " ";
        }
    }
    return indentStrings[n];
}
class RegisterCollection {
    constructor() {
        this.clientCollections = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
        // TODO: snapshot
    }
    set(clientId, id, segments) {
        if (!this.clientCollections[clientId]) {
            this.clientCollections[clientId] = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
        }
        this.clientCollections[clientId][id] = segments;
    }
    get(clientId, id) {
        let clientCollection = this.clientCollections[clientId];
        if (clientCollection) {
            return clientCollection[id];
        }
    }
    getLength(clientId, id) {
        let segs = this.get(clientId, id);
        let len = 0;
        if (segs) {
            for (let seg of segs) {
                len += seg.cachedLength;
            }
        }
        return len;
    }
    removeClient(clientId) {
        this.clientCollections[clientId] = undefined;
    }
}
var clientSeqComparer = {
    min: { refSeq: -1, clientId: "" },
    compare: (a, b) => a.refSeq - b.refSeq
};
var LRUSegmentComparer = {
    min: { maxSeq: -2 },
    compare: (a, b) => a.maxSeq - b.maxSeq
};
function glc(mergeTree, id) {
    if (mergeTree.getLongClientId) {
        return mergeTree.getLongClientId(id);
    }
    else {
        return id.toString();
    }
}
function applyLeafRangeMarker(marker, searchInfo) {
    for (let rangeLabel of searchInfo.rangeLabels) {
        if (marker.hasRangeLabel(rangeLabel)) {
            let currentStack = searchInfo.stacks[rangeLabel];
            if (currentStack === undefined) {
                currentStack = new _collections__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
                searchInfo.stacks[rangeLabel] = currentStack;
            }
            applyRangeReference(currentStack, marker);
        }
    }
}
function recordRangeLeaf(segment, segpos, refSeq, clientId, start, end, searchInfo) {
    if (segment.getType() === SegmentType.Marker) {
        let marker = segment;
        if (marker.refType &
            (_ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin | _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestEnd)) {
            applyLeafRangeMarker(marker, searchInfo);
        }
    }
    return false;
}
function rangeShift(node, segpos, refSeq, clientId, offset, end, searchInfo) {
    if (node.isLeaf()) {
        let seg = node;
        if ((searchInfo.mergeTree.localNetLength(seg) > 0) && (seg.getType() === SegmentType.Marker)) {
            let marker = seg;
            if (marker.refType &
                (_ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestBegin | _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].NestEnd)) {
                applyLeafRangeMarker(marker, searchInfo);
            }
        }
    }
    else {
        let block = node;
        applyStackDelta(searchInfo.stacks, block.rangeStacks);
    }
    return true;
}
function recordTileStart(segment, segpos, refSeq, clientId, start, end, searchInfo) {
    if (segment.getType() === SegmentType.Marker) {
        let marker = segment;
        if (marker.hasTileLabel(searchInfo.tileLabel)) {
            searchInfo.tile = marker;
        }
    }
    return false;
}
function tileShift(node, segpos, refSeq, clientId, offset, end, searchInfo) {
    if (node.isLeaf()) {
        let seg = node;
        if ((searchInfo.mergeTree.localNetLength(seg) > 0) && (seg.getType() === SegmentType.Marker)) {
            let marker = seg;
            if (marker.hasTileLabel(searchInfo.tileLabel)) {
                searchInfo.tile = marker;
            }
        }
    }
    else {
        let block = node;
        let marker;
        if (searchInfo.posPrecedesTile) {
            marker = block.rightmostTiles[searchInfo.tileLabel];
        }
        else {
            marker = block.leftmostTiles[searchInfo.tileLabel];
        }
        if (marker !== undefined) {
            searchInfo.tile = marker;
        }
    }
    return true;
}
let minListenerComparer = {
    min: { minRequired: Number.MIN_VALUE },
    compare: (a, b) => a.minRequired - b.minRequired,
};
// represents a sequence of text segments
class MergeTree {
    // TODO: make and use interface describing options
    constructor(text, options) {
        this.text = text;
        this.options = options;
        this.windowTime = 0;
        this.packTime = 0;
        this.ordTime = 0;
        this.maxOrdTime = 0;
        this.blockUpdateMarkers = false;
        this.collabWindow = new CollaborationWindow();
        // TODO: change this to ES6 map; add remove on segment remove
        // for now assume only markers have ids and so point directly at the Segment
        // if we need to have pointers to non-markers, we can change to point at local refs
        this.idToSegment = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
        this.clientIdToBranchId = [];
        this.localBranchId = 0;
        this.minSeqPending = false;
        this.gatherSegment = (segment, pos, refSeq, clientId, start, end, accumSegments) => {
            if (start < 0) {
                start = 0;
            }
            if (end > segment.cachedLength) {
                end = segment.cachedLength;
            }
            if (segment.getType() === SegmentType.Text) {
                let textSegment = segment;
                accumSegments.segments.push(textSegment.clone(start, end));
            }
            else {
                let marker = segment;
                accumSegments.segments.push(marker.clone());
            }
            return true;
        };
        this.gatherText = (segment, pos, refSeq, clientId, start, end, accumText) => {
            if (segment.getType() == SegmentType.Text) {
                let textSegment = segment;
                if (MergeTree.traceGatherText) {
                    console.log(`@cli ${this.getLongClientId(this.collabWindow.clientId)} gather seg seq ${textSegment.seq} rseq ${textSegment.removedSeq} text ${textSegment.text}`);
                }
                let beginTags = "";
                let endTags = "";
                if (accumText.parallelArrays) {
                    // TODO: let clients pass in function to get tag
                    let tags = [];
                    let initTags = [];
                    if (textSegment.properties && (textSegment.properties["font-weight"])) {
                        tags.push("b");
                    }
                    if (textSegment.properties && (textSegment.properties["text-decoration"])) {
                        tags.push("u");
                    }
                    let remTags = [];
                    if (tags.length > 0) {
                        for (let tag of tags) {
                            if (accumText.tagsInProgress.indexOf(tag) < 0) {
                                beginTags += `<${tag}>`;
                                initTags.push(tag);
                            }
                        }
                        for (let accumTag of accumText.tagsInProgress) {
                            if (tags.indexOf(accumTag) < 0) {
                                endTags += `</${accumTag}>`;
                                remTags.push(accumTag);
                            }
                        }
                        for (let initTag of initTags.reverse()) {
                            accumText.tagsInProgress.push(initTag);
                        }
                    }
                    else {
                        for (let accumTag of accumText.tagsInProgress) {
                            endTags += `</${accumTag}>`;
                            remTags.push(accumTag);
                        }
                    }
                    for (let remTag of remTags) {
                        let remdex = accumText.tagsInProgress.indexOf(remTag);
                        if (remdex >= 0) {
                            accumText.tagsInProgress.splice(remdex, 1);
                        }
                    }
                }
                accumText.textSegment.text += endTags;
                accumText.textSegment.text += beginTags;
                if ((start <= 0) && (end >= textSegment.text.length)) {
                    accumText.textSegment.text += textSegment.text;
                }
                else {
                    if (start < 0) {
                        start = 0;
                    }
                    if (end >= textSegment.text.length) {
                        accumText.textSegment.text += textSegment.text.substring(start);
                    }
                    else {
                        accumText.textSegment.text += textSegment.text.substring(start, end);
                    }
                }
            }
            else {
                if (accumText.placeholder && (accumText.placeholder.length > 0)) {
                    if (accumText.placeholder === "*") {
                        let marker = segment;
                        accumText.textSegment.text += `\n${marker.toString()}`;
                    }
                    else {
                        for (let i = 0; i < segment.cachedLength; i++) {
                            accumText.textSegment.text += accumText.placeholder;
                        }
                    }
                }
                else if (accumText.parallelArrays) {
                    let marker = segment;
                    if (marker.hasTileLabel(accumText.parallelMarkerLabel)) {
                        accumText.parallelMarkers.push(marker);
                        accumText.parallelText.push(accumText.textSegment.text);
                        accumText.textSegment.text = "";
                    }
                }
            }
            return true;
        };
        this.splitLeafSegment = (segment, pos) => {
            let segmentChanges = {};
            if (pos > 0) {
                segmentChanges.next = segment.splitAt(pos);
            }
            return segmentChanges;
        };
        this.blockUpdateActions = MergeTree.initBlockUpdateActions;
        if (options) {
            if (options.blockUpdateMarkers) {
                this.blockUpdateMarkers = options.blockUpdateMarkers;
            }
            if (options.localMinSeq !== undefined) {
                this.collabWindow.localMinSeq = options.localMinSeq;
            }
        }
        this.root = this.initialTextNode(this.text);
    }
    makeBlock(childCount) {
        let block;
        if (this.blockUpdateMarkers) {
            block = new HierMergeBlock(childCount);
        }
        else {
            block = new MergeBlock(childCount);
        }
        block.ordinal = "";
        return block;
    }
    initialTextNode(text) {
        let block = this.makeBlock(1);
        block.ordinal = "";
        block.assignChild(new TextSegment(text, UniversalSequenceNumber, LocalClientId), 0);
        block.cachedLength = text.length;
        return block;
    }
    clone() {
        let options = {
            blockUpdateMarkers: this.blockUpdateMarkers,
            localMinSeq: this.collabWindow.localMinSeq
        };
        let b = new MergeTree("", options);
        // for now assume that b will not collaborate
        b.root = b.blockClone(this.root);
    }
    blockClone(block, segments) {
        let bBlock = this.makeBlock(block.childCount);
        for (let i = 0; i < block.childCount; i++) {
            let child = block.children[i];
            if (child.isLeaf()) {
                let segment = this.segmentClone(child);
                bBlock.assignChild(segment, i);
                if (segments) {
                    segments.push(segment);
                }
            }
            else {
                bBlock.assignChild(this.blockClone(child, segments), i);
            }
        }
        this.nodeUpdateLengthNewStructure(bBlock);
        this.nodeUpdateOrdinals(bBlock);
        return bBlock;
    }
    segmentClone(segment) {
        let b = segment.clone();
        return b;
    }
    startGroupOperation(liveSegmentGroup) {
        // TODO: assert undefined
        if (this.collabWindow.collaborating) {
            if (liveSegmentGroup) {
                this.transactionSegmentGroup = liveSegmentGroup;
            }
            else {
                this.transactionSegmentGroup = { segments: [] };
                this.pendingSegments.enqueue(this.transactionSegmentGroup);
            }
            return this.transactionSegmentGroup;
        }
    }
    endGroupOperation() {
        if (this.collabWindow.collaborating) {
            this.transactionSegmentGroup = undefined;
        }
    }
    localNetLength(segment) {
        let segBranchId = this.getBranchId(segment.clientId);
        let removalInfo = segment;
        if (this.localBranchId > segBranchId) {
            removalInfo = this.getRemovalInfo(this.localBranchId, segBranchId, segment);
        }
        if (removalInfo.removedSeq !== undefined) {
            return 0;
        }
        else {
            return segment.cachedLength;
        }
    }
    getBranchId(clientId) {
        if ((this.clientIdToBranchId.length > clientId) && (clientId >= 0)) {
            return this.clientIdToBranchId[clientId];
        }
        else if (clientId === LocalClientId) {
            return 0;
        }
        else {
            return this.localBranchId;
        }
    }
    // TODO: remove id when segment removed
    mapIdToSegment(id, segment) {
        this.idToSegment[id] = segment;
    }
    addNode(block, node) {
        let index = block.childCount++;
        block.assignChild(node, index, false);
        return index;
    }
    reloadFromSegments(segments) {
        let segCap = MaxNodesInBlock - 1;
        const measureReloadTime = false;
        let buildMergeBlock = (nodes) => {
            const nodeCount = Math.ceil(nodes.length / segCap);
            const blocks = [];
            let nodeIndex = 0;
            for (let i = 0; i < nodeCount; i++) {
                let len = 0;
                blocks[i] = this.makeBlock(0);
                for (let j = 0; j < segCap; j++) {
                    if (nodeIndex < nodes.length) {
                        let childIndex = this.addNode(blocks[i], nodes[nodeIndex]);
                        len += nodes[nodeIndex].cachedLength;
                        if (this.blockUpdateMarkers) {
                            let hierBlock = blocks[i].hierBlock();
                            hierBlock.addNodeReferences(this, nodes[nodeIndex]);
                        }
                        if (this.blockUpdateActions) {
                            this.blockUpdateActions.child(blocks[i], childIndex);
                        }
                    }
                    else {
                        break;
                    }
                    nodeIndex++;
                }
                blocks[i].cachedLength = len;
            }
            if (blocks.length == 1) {
                return blocks[0];
            }
            else {
                return buildMergeBlock(blocks);
            }
        };
        let clockStart;
        if (measureReloadTime) {
            clockStart = clock();
        }
        if (segments.length > 0) {
            this.root = this.makeBlock(1);
            let block = buildMergeBlock(segments);
            this.root.assignChild(block, 0, false);
            if (this.blockUpdateMarkers) {
                let hierRoot = this.root.hierBlock();
                hierRoot.addNodeReferences(this, block);
            }
            if (this.blockUpdateActions) {
                this.blockUpdateActions.child(this.root, 0);
            }
            this.nodeUpdateOrdinals(this.root);
            this.root.cachedLength = block.cachedLength;
        }
        else {
            this.root = this.makeBlock(0);
            this.root.cachedLength = 0;
        }
        this.root.index = 0;
        if (measureReloadTime) {
            console.log(`reload time ${elapsedMicroseconds(clockStart)}`);
        }
    }
    // for now assume min starts at zero
    startCollaboration(localClientId, minSeq, branchId) {
        this.collabWindow.clientId = localClientId;
        this.collabWindow.minSeq = minSeq;
        this.collabWindow.collaborating = true;
        this.collabWindow.currentSeq = minSeq;
        this.localBranchId = branchId;
        this.segmentsToScour = new _collections__WEBPACK_IMPORTED_MODULE_0__["Heap"]([], LRUSegmentComparer);
        this.pendingSegments = _collections__WEBPACK_IMPORTED_MODULE_0__["ListMakeHead"]();
        let measureFullCollab = false;
        let clockStart;
        if (measureFullCollab) {
            clockStart = clock();
        }
        this.nodeUpdateLengthNewStructure(this.root, true);
        if (measureFullCollab) {
            console.log(`update partial lengths at start ${elapsedMicroseconds(clockStart)}`);
        }
    }
    addToLRUSet(segment, seq) {
        this.segmentsToScour.add({ segment: segment, maxSeq: seq });
    }
    underflow(node) {
        return node.childCount < (MaxNodesInBlock / 2);
    }
    scourNode(node, holdNodes) {
        let prevSegment;
        for (let k = 0; k < node.childCount; k++) {
            let childNode = node.children[k];
            if (childNode.isLeaf()) {
                let segment = childNode;
                if ((segment.removedSeq !== undefined) && (segment.removedSeq !== UnassignedSequenceNumber)) {
                    let createBrid = this.getBranchId(segment.clientId);
                    let removeBrid = this.getBranchId(segment.removedClientId);
                    if ((removeBrid != createBrid) || (segment.removedSeq > this.collabWindow.minSeq)) {
                        holdNodes.push(segment);
                    }
                    else {
                        if (MergeTree.traceZRemove) {
                            console.log(`${this.getLongClientId(this.collabWindow.clientId)}: Zremove ${segment.text}; cli ${this.getLongClientId(segment.clientId)}`);
                        }
                        segment.parent = undefined;
                    }
                    prevSegment = undefined;
                }
                else {
                    if ((segment.seq <= this.collabWindow.minSeq) &&
                        segment.segmentGroups.empty && (segment.seq != UnassignedSequenceNumber)) {
                        if (prevSegment && prevSegment.canAppend(segment, this)) {
                            if (MergeTree.traceAppend) {
                                console.log(`${this.getLongClientId(this.collabWindow.clientId)}: append ${prevSegment.text} + ${segment.text}; cli ${this.getLongClientId(prevSegment.clientId)} + cli ${this.getLongClientId(segment.clientId)}`);
                            }
                            prevSegment.append(segment);
                            segment.parent = undefined;
                        }
                        else {
                            holdNodes.push(segment);
                            if (this.localNetLength(segment) > 0) {
                                prevSegment = segment;
                            }
                            else {
                                prevSegment = undefined;
                            }
                        }
                    }
                    else {
                        holdNodes.push(segment);
                        prevSegment = undefined;
                    }
                }
            }
            else {
                holdNodes.push(childNode);
                prevSegment = undefined;
            }
        }
    }
    // interior node with all node children
    pack(block) {
        let parent = block.parent;
        let children = parent.children;
        let childIndex;
        let childBlock;
        let holdNodes = [];
        for (childIndex = 0; childIndex < parent.childCount; childIndex++) {
            // debug assert not isLeaf()
            childBlock = children[childIndex];
            this.scourNode(childBlock, holdNodes);
            // will replace this block with a packed block
            childBlock.parent = undefined;
        }
        let totalNodeCount = holdNodes.length;
        let halfCount = MaxNodesInBlock / 2;
        let childCount = Math.min(MaxNodesInBlock - 1, Math.floor(totalNodeCount / halfCount));
        if (childCount < 1) {
            childCount = 1;
        }
        let baseCount = Math.floor(totalNodeCount / childCount);
        let extraCount = totalNodeCount % childCount;
        let packedBlocks = new Array(MaxNodesInBlock);
        let readCount = 0;
        for (let nodeIndex = 0; nodeIndex < childCount; nodeIndex++) {
            let nodeCount = baseCount;
            if (extraCount > 0) {
                nodeCount++;
                extraCount--;
            }
            let packedBlock = this.makeBlock(nodeCount);
            for (let packedNodeIndex = 0; packedNodeIndex < nodeCount; packedNodeIndex++) {
                let nodeToPack = holdNodes[readCount++];
                packedBlock.assignChild(nodeToPack, packedNodeIndex, false);
            }
            packedBlock.parent = parent;
            packedBlocks[nodeIndex] = packedBlock;
            this.nodeUpdateLengthNewStructure(packedBlock);
        }
        if (readCount != totalNodeCount) {
            console.log(`total count ${totalNodeCount} readCount ${readCount}`);
        }
        parent.children = packedBlocks;
        for (let j = 0; j < childCount; j++) {
            parent.assignChild(packedBlocks[j], j, false);
        }
        parent.childCount = childCount;
        if (this.underflow(parent) && (parent.parent)) {
            this.pack(parent);
        }
        else {
            this.nodeUpdateOrdinals(parent);
            this.blockUpdatePathLengths(parent, UnassignedSequenceNumber, -1, true);
        }
    }
    zamboniSegments() {
        //console.log(`scour line ${segmentsToScour.count()}`);
        let clockStart;
        if (MergeTree.options.measureWindowTime) {
            clockStart = clock();
        }
        let segmentToScour = this.segmentsToScour.peek();
        if (segmentToScour && (segmentToScour.maxSeq <= this.collabWindow.minSeq)) {
            for (let i = 0; i < MergeTree.zamboniSegmentsMaxCount; i++) {
                segmentToScour = this.segmentsToScour.get();
                if (segmentToScour && segmentToScour.segment.parent &&
                    (segmentToScour.maxSeq <= this.collabWindow.minSeq)) {
                    let block = segmentToScour.segment.parent;
                    let childrenCopy = [];
                    //                console.log(`scouring from ${segmentToScour.segment.seq}`);
                    this.scourNode(block, childrenCopy);
                    let newChildCount = childrenCopy.length;
                    if (newChildCount < block.childCount) {
                        block.childCount = newChildCount;
                        block.children = childrenCopy;
                        for (let j = 0; j < newChildCount; j++) {
                            block.assignChild(childrenCopy[j], j, false);
                        }
                        if (this.underflow(block) && block.parent) {
                            //nodeUpdatePathLengths(node, UnassignedSequenceNumber, -1, true);
                            let packClockStart;
                            if (MergeTree.options.measureWindowTime) {
                                packClockStart = clock();
                            }
                            this.pack(block);
                            if (MergeTree.options.measureWindowTime) {
                                this.packTime += elapsedMicroseconds(packClockStart);
                            }
                        }
                        else {
                            this.nodeUpdateOrdinals(block);
                            this.blockUpdatePathLengths(block, UnassignedSequenceNumber, -1, true);
                        }
                    }
                }
                else {
                    break;
                }
            }
        }
        if (MergeTree.options.measureWindowTime) {
            this.windowTime += elapsedMicroseconds(clockStart);
        }
    }
    getCollabWindow() {
        return this.collabWindow;
    }
    getStats() {
        let nodeGetStats = (block) => {
            let stats = { maxHeight: 0, nodeCount: 0, leafCount: 0, removedLeafCount: 0, liveCount: 0, histo: [] };
            for (let k = 0; k < MaxNodesInBlock; k++) {
                stats.histo[k] = 0;
            }
            for (let i = 0; i < block.childCount; i++) {
                let child = block.children[i];
                let height = 1;
                if (!child.isLeaf()) {
                    let childStats = nodeGetStats(child);
                    height = 1 + childStats.maxHeight;
                    stats.nodeCount += childStats.nodeCount;
                    stats.leafCount += childStats.leafCount;
                    stats.removedLeafCount += childStats.removedLeafCount;
                    stats.liveCount += childStats.liveCount;
                    for (let i = 0; i < MaxNodesInBlock; i++) {
                        stats.histo[i] += childStats.histo[i];
                    }
                }
                else {
                    stats.leafCount++;
                    let segment = child;
                    if (segment.removedSeq !== undefined) {
                        stats.removedLeafCount++;
                    }
                }
                if (height > stats.maxHeight) {
                    stats.maxHeight = height;
                }
            }
            stats.histo[block.childCount]++;
            stats.nodeCount++;
            stats.liveCount += block.childCount;
            return stats;
        };
        let rootStats = nodeGetStats(this.root);
        if (MergeTree.options.measureWindowTime) {
            rootStats.windowTime = this.windowTime;
            rootStats.packTime = this.packTime;
            rootStats.ordTime = this.ordTime;
            rootStats.maxOrdTime = this.maxOrdTime;
        }
        return rootStats;
    }
    tardisPosition(pos, fromSeq, toSeq, toClientId = NonCollabClient) {
        return this.tardisPositionFromClient(pos, fromSeq, toSeq, NonCollabClient, toClientId);
    }
    tardisPositionFromClient(pos, fromSeq, toSeq, fromClientId, toClientId = NonCollabClient) {
        if (((fromSeq < toSeq) || (toClientId === this.collabWindow.clientId)) && pos < this.getLength(fromSeq, fromClientId)) {
            if ((toSeq <= this.collabWindow.currentSeq) && (fromSeq >= this.collabWindow.minSeq)) {
                let segoff = this.getContainingSegment(pos, fromSeq, fromClientId);
                let toPos = this.getOffset(segoff.segment, toSeq, toClientId);
                let ret = toPos + segoff.offset;
                assert__WEBPACK_IMPORTED_MODULE_3__(ret !== undefined);
                return ret;
            }
            assert__WEBPACK_IMPORTED_MODULE_3__(false);
        }
        else {
            return pos;
        }
    }
    tardisRangeFromClient(rangeStart, rangeEnd, fromSeq, toSeq, fromClientId, toClientId = NonCollabClient) {
        let ranges = [];
        let recordRange = (segment, pos, refSeq, clientId, segStart, segEnd) => {
            if (this.nodeLength(segment, toSeq, toClientId) > 0) {
                let offset = this.getOffset(segment, toSeq, toClientId);
                if (segStart < 0) {
                    segStart = 0;
                }
                if (segEnd > segment.cachedLength) {
                    segEnd = segment.cachedLength;
                }
                ranges.push({ start: offset + segStart, end: offset + segEnd });
            }
            return true;
        };
        this.mapRange({ leaf: recordRange }, fromSeq, fromClientId, undefined, rangeStart, rangeEnd);
        return ranges;
    }
    tardisRange(rangeStart, rangeEnd, fromSeq, toSeq, toClientId = NonCollabClient) {
        return this.tardisRangeFromClient(rangeStart, rangeEnd, fromSeq, toSeq, NonCollabClient, toClientId);
    }
    getLength(refSeq, clientId) {
        return this.blockLength(this.root, refSeq, clientId);
    }
    getOffset(node, refSeq, clientId) {
        let totalOffset = 0;
        let parent = node.parent;
        let prevParent;
        while (parent) {
            let children = parent.children;
            for (let childIndex = 0; childIndex < parent.childCount; childIndex++) {
                let child = children[childIndex];
                if ((prevParent && (child == prevParent)) || (child == node)) {
                    break;
                }
                totalOffset += this.nodeLength(child, refSeq, clientId);
            }
            prevParent = parent;
            parent = parent.parent;
        }
        return totalOffset;
    }
    searchFromPos(pos, target) {
        let start = pos;
        let end = pos + MergeTree.searchChunkSize;
        let chunk = "";
        let found = false;
        while (!found) {
            if (end > this.root.cachedLength) {
                end = this.root.cachedLength;
            }
            chunk += this.getText(UniversalSequenceNumber, this.collabWindow.clientId, "", start, end);
            let result = chunk.match(target);
            if (result !== null) {
                return { text: result[0], pos: result.index };
            }
            start += MergeTree.searchChunkSize;
            if (start >= this.root.cachedLength) {
                break;
            }
            end += MergeTree.searchChunkSize;
        }
    }
    incrementalGetText(refSeq, clientId, start, end) {
        if (start === undefined) {
            start = 0;
        }
        if (end === undefined) {
            end = this.blockLength(this.root, refSeq, clientId);
        }
        let context = new TextSegment("");
        let stack = new _collections__WEBPACK_IMPORTED_MODULE_0__["Stack"]();
        let initialState = new IncrementalMapState(this.root, { leaf: incrementalGatherText }, 0, refSeq, clientId, context, start, end, 0);
        stack.push(initialState);
        while (!stack.empty()) {
            this.incrementalBlockMap(stack);
        }
        return context.text;
    }
    getTextAndMarkers(refSeq, clientId, label, start, end) {
        if (start === undefined) {
            start = 0;
        }
        if (end === undefined) {
            end = this.blockLength(this.root, refSeq, clientId);
        }
        let accum = {
            textSegment: new TextSegment(""), parallelMarkerLabel: label, parallelArrays: true, parallelMarkers: [], parallelText: [],
            tagsInProgress: []
        };
        if (MergeTree.traceGatherText) {
            console.log(`get text on cli ${glc(this, this.collabWindow.clientId)} ref cli ${glc(this, clientId)} refSeq ${refSeq}`);
        }
        this.mapRange({ leaf: this.gatherText }, refSeq, clientId, accum, start, end);
        return { parallelText: accum.parallelText, parallelMarkers: accum.parallelMarkers };
    }
    cloneSegments(refSeq, clientId, start = 0, end) {
        if (end === undefined) {
            end = this.blockLength(this.root, refSeq, clientId);
        }
        let accum = {
            segments: []
        };
        this.mapRange({ leaf: this.gatherSegment }, refSeq, clientId, accum, start, end);
        return accum.segments;
    }
    getItems(refSeq, clientId, start, end) {
        let accum = [];
        function gatherItems(segment, pos, refSeq, clientId, start, end) {
            if (segment.getType() === SegmentType.Run) {
                const runSeg = segment;
                for (const item of runSeg.items) {
                    accum.push(item);
                }
                return true;
            }
        }
        this.mapRange({ leaf: gatherItems }, refSeq, clientId, accum, start, end);
        return accum;
    }
    getText(refSeq, clientId, placeholder = "", start, end) {
        if (start === undefined) {
            start = 0;
        }
        if (end === undefined) {
            end = this.blockLength(this.root, refSeq, clientId);
        }
        let accum = { textSegment: new TextSegment(""), placeholder };
        if (MergeTree.traceGatherText) {
            console.log(`get text on cli ${glc(this, this.collabWindow.clientId)} ref cli ${glc(this, clientId)} refSeq ${refSeq}`);
        }
        this.mapRange({ leaf: this.gatherText }, refSeq, clientId, accum, start, end);
        return accum.textSegment.text;
    }
    getContainingSegment(pos, refSeq, clientId) {
        let segment;
        let offset;
        let leaf = (leafSeg, segpos, refSeq, clientId, start) => {
            segment = leafSeg;
            offset = start;
            return false;
        };
        this.searchBlock(this.root, pos, 0, refSeq, clientId, { leaf });
        return { segment, offset };
    }
    blockLength(node, refSeq, clientId) {
        if ((this.collabWindow.collaborating) && (clientId != this.collabWindow.clientId)) {
            return node.partialLengths.getPartialLength(this, refSeq, clientId);
        }
        else {
            return node.cachedLength;
        }
    }
    getRemovalInfo(branchId, segBranchId, segment) {
        if (branchId > segBranchId) {
            let index = (branchId - segBranchId) - 1;
            if (!segment.removalsByBranch) {
                segment.removalsByBranch = [];
            }
            if (!segment.removalsByBranch[index]) {
                segment.removalsByBranch[index] = {};
            }
            return segment.removalsByBranch[index];
        }
        else {
            return segment;
        }
    }
    nodeLength(node, refSeq, clientId) {
        if ((!this.collabWindow.collaborating) || (this.collabWindow.clientId == clientId)) {
            // local client sees all segments, even when collaborating
            if (!node.isLeaf()) {
                return node.cachedLength;
            }
            else {
                return this.localNetLength(node);
            }
        }
        else {
            // sequence number within window
            let branchId = this.getBranchId(clientId);
            if (!node.isLeaf()) {
                return node.partialLengths.getPartialLength(this, refSeq, clientId);
            }
            else {
                let segment = node;
                let segBranchId = this.getBranchId(segment.clientId);
                if ((segBranchId <= branchId) && ((segment.clientId === clientId) ||
                    ((segment.seq != UnassignedSequenceNumber) && (segment.seq <= refSeq)))) {
                    let removalInfo = segment;
                    if (branchId > segBranchId) {
                        removalInfo = this.getRemovalInfo(branchId, segBranchId, segment);
                    }
                    // segment happened by reference sequence number or segment from requesting client
                    if (removalInfo.removedSeq !== undefined) {
                        if ((removalInfo.removedClientId === clientId) ||
                            (removalInfo.removedClientOverlap && (removalInfo.removedClientOverlap.indexOf(clientId) >= 0)) ||
                            ((removalInfo.removedSeq != UnassignedSequenceNumber) && (removalInfo.removedSeq <= refSeq))) {
                            return 0;
                        }
                        else {
                            return segment.cachedLength;
                        }
                    }
                    else {
                        return segment.cachedLength;
                    }
                }
                else {
                    // segment invisible to client at reference sequence number/branch id/client id of op
                    return 0;
                }
            }
        }
    }
    updateLocalMinSeq(localMinSeq) {
        this.collabWindow.localMinSeq = localMinSeq;
        this.setMinSeq(Math.min(this.collabWindow.globalMinSeq, localMinSeq));
    }
    addMinSeqListener(minRequired, onMinGE) {
        if (!this.minSeqListeners) {
            this.minSeqListeners = new _collections__WEBPACK_IMPORTED_MODULE_0__["Heap"]([], minListenerComparer);
        }
        this.minSeqListeners.add({ minRequired, onMinGE });
    }
    notifyMinSeqListeners() {
        this.minSeqPending = false;
        while ((this.minSeqListeners.count() > 0) &&
            (this.minSeqListeners.peek().minRequired <= this.collabWindow.minSeq)) {
            let minListener = this.minSeqListeners.get();
            minListener.onMinGE(this.collabWindow.minSeq);
        }
    }
    setMinSeq(minSeq) {
        if (minSeq > this.collabWindow.minSeq) {
            this.collabWindow.minSeq = minSeq;
            if (MergeTree.options.zamboniSegments) {
                this.zamboniSegments();
            }
            if (this.minSeqListeners && this.minSeqListeners.count()) {
                this.minSeqPending = true;
            }
        }
    }
    commitGlobalMin() {
        if (this.collabWindow.globalMinSeq !== undefined) {
            this.collabWindow.localMinSeq = this.collabWindow.globalMinSeq;
            this.setMinSeq(this.collabWindow.globalMinSeq);
        }
    }
    updateGlobalMinSeq(globalMinSeq) {
        if (this.collabWindow.localMinSeq === undefined) {
            this.setMinSeq(globalMinSeq);
        }
        else {
            this.collabWindow.globalMinSeq = globalMinSeq;
            this.setMinSeq(Math.min(globalMinSeq, this.collabWindow.localMinSeq));
        }
    }
    referencePositionToLocalPosition(refPos, refSeq = UniversalSequenceNumber, clientId = this.collabWindow.clientId) {
        let seg = refPos.getSegment();
        let offset = refPos.getOffset();
        return offset + this.getOffset(seg, refSeq, clientId);
    }
    getStackContext(startPos, clientId, rangeLabels) {
        let searchInfo = {
            mergeTree: this,
            stacks: _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"](),
            rangeLabels
        };
        this.search(startPos, UniversalSequenceNumber, clientId, { leaf: recordRangeLeaf, shift: rangeShift }, searchInfo);
        return searchInfo.stacks;
    }
    // TODO: with annotation op change value
    cherryPickedUndo(undoInfo) {
        let segment = undoInfo.seg;
        // no branches
        if (segment.removedSeq !== undefined) {
            segment.removedSeq = undefined;
            segment.removedClientId = undefined;
        }
        else {
            if (undoInfo.op === 1 /* REMOVE */) {
                segment.removedSeq = undoInfo.seq;
            }
            else {
                segment.removedSeq = UnassignedSequenceNumber;
            }
            segment.removedClientId = this.collabWindow.clientId;
        }
        this.blockUpdatePathLengths(segment.parent, UnassignedSequenceNumber, -1, true);
    }
    // TODO: filter function
    findTile(startPos, clientId, tileLabel, posPrecedesTile = true) {
        let searchInfo = {
            mergeTree: this,
            posPrecedesTile,
            tileLabel,
        };
        if (posPrecedesTile) {
            this.search(startPos, UniversalSequenceNumber, clientId, { leaf: recordTileStart, shift: tileShift }, searchInfo);
        }
        else {
            this.backwardSearch(startPos, UniversalSequenceNumber, clientId, { leaf: recordTileStart, shift: tileShift }, searchInfo);
        }
        if (searchInfo.tile) {
            let pos;
            if (searchInfo.tile.isLeaf()) {
                let marker = searchInfo.tile;
                pos = this.getOffset(marker, UniversalSequenceNumber, clientId);
            }
            else {
                let localRef = searchInfo.tile;
                pos = localRef.toPosition(this, UniversalSequenceNumber, clientId);
            }
            return { tile: searchInfo.tile, pos };
        }
    }
    search(pos, refSeq, clientId, actions, clientData) {
        return this.searchBlock(this.root, pos, 0, refSeq, clientId, actions, clientData);
    }
    searchBlock(block, pos, segpos, refSeq, clientId, actions, clientData) {
        let children = block.children;
        if (actions && actions.pre) {
            actions.pre(block, segpos, refSeq, clientId, undefined, undefined, clientData);
        }
        let contains = actions && actions.contains;
        for (let childIndex = 0; childIndex < block.childCount; childIndex++) {
            let child = children[childIndex];
            let len = this.nodeLength(child, refSeq, clientId);
            if (((!contains) && (pos < len)) || (contains && contains(child, pos, refSeq, clientId, undefined, undefined, clientData))) {
                // found entry containing pos
                if (!child.isLeaf()) {
                    return this.searchBlock(child, pos, segpos, refSeq, clientId, actions, clientData);
                }
                else {
                    if (actions && actions.leaf) {
                        actions.leaf(child, segpos, refSeq, clientId, pos, -1, clientData);
                    }
                    return child;
                }
            }
            else {
                if (actions && actions.shift) {
                    actions.shift(child, segpos, refSeq, clientId, pos, undefined, clientData);
                }
                pos -= len;
                segpos += len;
            }
        }
        if (actions && actions.post) {
            actions.post(block, segpos, refSeq, clientId, undefined, undefined, clientData);
        }
    }
    backwardSearch(pos, refSeq, clientId, actions, clientData) {
        return this.backwardSearchBlock(this.root, pos, this.getLength(refSeq, clientId), refSeq, clientId, actions, clientData);
    }
    backwardSearchBlock(block, pos, segEnd, refSeq, clientId, actions, clientData) {
        let children = block.children;
        if (actions && actions.pre) {
            actions.pre(block, segEnd, refSeq, clientId, undefined, undefined, clientData);
        }
        let contains = actions && actions.contains;
        for (let childIndex = block.childCount - 1; childIndex >= 0; childIndex--) {
            let child = children[childIndex];
            let len = this.nodeLength(child, refSeq, clientId);
            let segpos = segEnd - len;
            if (((!contains) && (pos >= segpos)) ||
                (contains && contains(child, pos, refSeq, clientId, undefined, undefined, clientData))) {
                // found entry containing pos
                if (!child.isLeaf()) {
                    return this.backwardSearchBlock(child, pos, segEnd, refSeq, clientId, actions, clientData);
                }
                else {
                    if (actions && actions.leaf) {
                        actions.leaf(child, segpos, refSeq, clientId, pos, -1, clientData);
                    }
                    return child;
                }
            }
            else {
                if (actions && actions.shift) {
                    actions.shift(child, segpos, refSeq, clientId, pos, undefined, clientData);
                }
                segEnd = segpos;
            }
        }
        if (actions && actions.post) {
            actions.post(block, segEnd, refSeq, clientId, undefined, undefined, clientData);
        }
    }
    updateRoot(splitNode, refSeq, clientId, seq) {
        if (splitNode !== undefined) {
            let newRoot = this.makeBlock(2);
            newRoot.index = 0;
            newRoot.ordinal = "";
            newRoot.assignChild(this.root, 0, false);
            newRoot.assignChild(splitNode, 1, false);
            this.root = newRoot;
            this.nodeUpdateOrdinals(this.root);
            this.nodeUpdateLengthNewStructure(this.root);
        }
    }
    /**
     * Assign sequence number to existing segment; update partial lengths to reflect the change
     * @param seq sequence number given by server to pending segment
     */
    ackPendingSegment(seq, verboseOps = false) {
        let pendingSegmentGroup = this.pendingSegments.dequeue();
        let nodesToUpdate = [];
        let clientId;
        let overwrite = false;
        if (pendingSegmentGroup !== undefined) {
            if (verboseOps) {
                console.log(`segment group has ${pendingSegmentGroup.segments.length} segments`);
            }
            pendingSegmentGroup.segments.map((pendingSegment) => {
                if (pendingSegment.seq === UnassignedSequenceNumber) {
                    pendingSegment.seq = seq;
                }
                else {
                    let segBranchId = this.getBranchId(pendingSegment.clientId);
                    let removalInfo = this.getRemovalInfo(this.localBranchId, segBranchId, pendingSegment);
                    if (removalInfo.removedSeq !== undefined) {
                        if (removalInfo.removedSeq != UnassignedSequenceNumber) {
                            overwrite = true;
                            if (MergeTree.diagOverlappingRemove) {
                                console.log(`grump @seq ${seq} cli ${glc(this, this.collabWindow.clientId)} from ${pendingSegment.removedSeq} text ${pendingSegment.toString()}`);
                            }
                        }
                        else {
                            removalInfo.removedSeq = seq;
                        }
                    }
                }
                const segmentGroup = pendingSegment.segmentGroups.dequeue();
                assert__WEBPACK_IMPORTED_MODULE_3__["equal"](segmentGroup, pendingSegmentGroup);
                clientId = this.collabWindow.clientId;
                if (nodesToUpdate.indexOf(pendingSegment.parent) < 0) {
                    nodesToUpdate.push(pendingSegment.parent);
                }
            });
            for (let node of nodesToUpdate) {
                this.blockUpdatePathLengths(node, seq, clientId, overwrite);
                //nodeUpdatePathLengths(node, seq, clientId, true);
            }
        }
    }
    addToPendingList(segment, segmentGroup) {
        if (segmentGroup === undefined) {
            if (this.transactionSegmentGroup) {
                segmentGroup = this.transactionSegmentGroup;
            }
            else {
                segmentGroup = { segments: [] };
                this.pendingSegments.enqueue(segmentGroup);
            }
        }
        // TODO: share this group with UNDO
        segment.segmentGroups.enqueue(segmentGroup);
        return segmentGroup;
    }
    // TODO: error checking
    getSegmentFromId(id) {
        return this.idToSegment[id];
    }
    /**
     * Given a position specified relative to a marker id, lookup the marker
     * and convert the position to a character position.
     * @param relativePos Id of marker (may be indirect) and whether position is before or after marker.
     * @param refseq The reference sequence number at which to compute the position.
     * @param clientId The client id with which to compute the position.
     */
    posFromRelativePos(relativePos, refseq = UniversalSequenceNumber, clientId = this.collabWindow.clientId) {
        let pos = -1;
        let marker;
        if (relativePos.id) {
            marker = this.getSegmentFromId(relativePos.id);
        }
        if (marker) {
            pos = this.getOffset(marker, refseq, clientId);
            if (!relativePos.before) {
                pos += marker.cachedLength;
                if (relativePos.offset !== undefined) {
                    pos += relativePos.offset;
                }
            }
            else {
                if (relativePos.offset !== undefined) {
                    pos -= relativePos.offset;
                }
            }
        }
        return pos;
    }
    insert(pos, refSeq, clientId, seq, segData, traverse, opArgs) {
        this.ensureIntervalBoundary(pos, refSeq, clientId);
        if (MergeTree.traceOrdinals) {
            this.ordinalIntegrity();
        }
        //traceTraversal = true;
        let splitNode = traverse(this.root, pos, refSeq, clientId, seq, segData);
        //traceTraversal = false;
        this.updateRoot(splitNode, refSeq, clientId, seq);
        if (this.mergeTreeDeltaCallback) {
            this.mergeTreeDeltaCallback(opArgs, {
                mergeTreeClientId: clientId,
                operation: 0 /* INSERT */,
                mergeTree: this,
                segments: [segData]
            });
        }
    }
    insertSegment(pos, refSeq, clientId, seq, segment, opArgs) {
        // const tt = MergeTree.traceTraversal;
        // MergeTree.traceTraversal = true;
        this.insert(pos, refSeq, clientId, seq, segment, (block, pos, refSeq, clientId, seq, seg) => this.blockInsert(block, pos, refSeq, clientId, seq, seg), opArgs);
        // MergeTree.traceTraversal = tt;
    }
    insertMarker(pos, refSeq, clientId, seq, behaviors, props, opArgs) {
        let marker = Marker.make(behaviors, props, seq, clientId);
        let markerId = marker.getId();
        if (markerId) {
            this.mapIdToSegment(markerId, marker);
        }
        this.insert(pos, refSeq, clientId, seq, marker, (block, pos, refSeq, clientId, seq, marker) => this.blockInsert(block, pos, refSeq, clientId, seq, marker), opArgs);
        // report segment if client interested
        if (this.markerModifiedHandler && (seq !== UnassignedSequenceNumber)) {
            this.markerModifiedHandler(marker);
        }
        return marker;
    }
    insertTextMarkerRelative(markerPos, refSeq, clientId, seq, text, props, opArgs) {
        let pos = this.posFromRelativePos(markerPos, refSeq, clientId);
        if (pos >= 0) {
            let newSegment = TextSegment.make(text, props, seq, clientId);
            // MergeTree.traceTraversal = true;
            this.insert(pos, refSeq, clientId, seq, newSegment, (block, pos, refSeq, clientId, seq, segment) => this.blockInsert(this.root, pos, refSeq, clientId, seq, segment), opArgs);
            MergeTree.traceTraversal = false;
            if (this.collabWindow.collaborating && MergeTree.options.zamboniSegments &&
                (seq != UnassignedSequenceNumber)) {
                this.zamboniSegments();
            }
        }
    }
    insertText(pos, refSeq, clientId, seq, text, props, opArgs) {
        let newSegment = TextSegment.make(text, props, seq, clientId);
        // MergeTree.traceTraversal = true;
        this.insert(pos, refSeq, clientId, seq, newSegment, (block, pos, refSeq, clientId, seq, segment) => this.blockInsert(this.root, pos, refSeq, clientId, seq, segment), opArgs);
        MergeTree.traceTraversal = false;
        if (MergeTree.traceOrdinals) {
            this.ordinalIntegrity();
        }
        if (this.collabWindow.collaborating && MergeTree.options.zamboniSegments &&
            (seq != UnassignedSequenceNumber)) {
            this.zamboniSegments();
        }
    }
    blockInsert(block, pos, refSeq, clientId, seq, newSegment) {
        let segIsLocal = false;
        let checkSegmentIsLocal = (segment, pos, refSeq, clientId) => {
            if (segment.seq == UnassignedSequenceNumber) {
                if (MergeTree.diagInsertTie) {
                    console.log(`@cli ${glc(this, this.collabWindow.clientId)}: promoting continue due to seq ${segment.seq} text ${segment.toString()} ref ${refSeq}`);
                }
                segIsLocal = true;
            }
            // only need to look at first segment that follows finished node
            return false;
        };
        let continueFrom = (node) => {
            segIsLocal = false;
            this.rightExcursion(node, checkSegmentIsLocal);
            if (MergeTree.diagInsertTie && segIsLocal && (newSegment.getType() === SegmentType.Text)) {
                let text = newSegment.toString();
                console.log(`@cli ${glc(this, this.collabWindow.clientId)}: attempting continue with seq ${seq} text ${text} ref ${refSeq}`);
            }
            return segIsLocal;
        };
        let onLeaf = (segment, pos, context) => {
            let saveIfLocal = (locSegment) => {
                // save segment so can assign sequence number when acked by server
                if (this.collabWindow.collaborating) {
                    if ((locSegment.seq == UnassignedSequenceNumber) &&
                        (clientId == this.collabWindow.clientId)) {
                        this.addToPendingList(locSegment);
                    }
                    else if ((locSegment.seq >= this.collabWindow.minSeq) &&
                        MergeTree.options.zamboniSegments) {
                        this.addToLRUSet(locSegment, locSegment.seq);
                    }
                }
            };
            let segmentChanges = {};
            if (segment) {
                // insert before segment
                segmentChanges.replaceCurrent = newSegment;
                segmentChanges.next = segment;
            }
            else {
                segmentChanges.next = newSegment;
            }
            saveIfLocal(newSegment);
            return segmentChanges;
        };
        return this.insertingWalk(block, pos, refSeq, clientId, seq, newSegment.getType(), { leaf: onLeaf, candidateSegment: newSegment, continuePredicate: continueFrom });
    }
    ensureIntervalBoundary(pos, refSeq, clientId) {
        let splitNode = this.insertingWalk(this.root, pos, refSeq, clientId, TreeMaintenanceSequenceNumber, SegmentType.Base, { leaf: this.splitLeafSegment });
        this.updateRoot(splitNode, refSeq, clientId, TreeMaintenanceSequenceNumber);
    }
    // assume called only when pos == len
    breakTie(pos, len, seq, node, refSeq, clientId, candidateSegment) {
        if (node.isLeaf()) {
            let segment = node;
            // TODO: marker/marker tie break & alternate tie break rules
            if (pos == 0) {
                return segment.seq !== UnassignedSequenceNumber;
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
    }
    // visit segments starting from node's right siblings, then up to node's parent
    leftExcursion(node, leafAction) {
        let actions = { leaf: leafAction };
        let go = true;
        let startNode = node;
        let parent = startNode.parent;
        while (parent) {
            let children = parent.children;
            let childIndex;
            let node;
            let matchedStart = false;
            for (childIndex = parent.childCount - 1; childIndex >= 0; childIndex--) {
                node = children[childIndex];
                if (matchedStart) {
                    if (!node.isLeaf()) {
                        let childBlock = node;
                        go = this.nodeMapReverse(childBlock, actions, 0, UniversalSequenceNumber, this.collabWindow.clientId, undefined);
                    }
                    else {
                        go = leafAction(node, 0, UniversalSequenceNumber, this.collabWindow.clientId, 0, 0);
                    }
                    if (!go) {
                        return;
                    }
                }
                else {
                    matchedStart = (startNode === node);
                }
            }
            startNode = parent;
            parent = parent.parent;
        }
    }
    // visit segments starting from node's right siblings, then up to node's parent
    rightExcursion(node, leafAction) {
        let actions = { leaf: leafAction };
        let go = true;
        let startNode = node;
        let parent = startNode.parent;
        while (parent) {
            let children = parent.children;
            let childIndex;
            let node;
            let matchedStart = false;
            for (childIndex = 0; childIndex < parent.childCount; childIndex++) {
                node = children[childIndex];
                if (matchedStart) {
                    if (!node.isLeaf()) {
                        let childBlock = node;
                        go = this.nodeMap(childBlock, actions, 0, UniversalSequenceNumber, this.collabWindow.clientId, undefined);
                    }
                    else {
                        go = leafAction(node, 0, UniversalSequenceNumber, this.collabWindow.clientId, 0, 0);
                    }
                    if (!go) {
                        return;
                    }
                }
                else {
                    matchedStart = (startNode === node);
                }
            }
            startNode = parent;
            parent = parent.parent;
        }
    }
    insertingWalk(block, pos, refSeq, clientId, seq, segType, context) {
        let children = block.children;
        let childIndex;
        let child;
        let newNode;
        let fromSplit;
        let found = false;
        for (childIndex = 0; childIndex < block.childCount; childIndex++) {
            child = children[childIndex];
            let len = this.nodeLength(child, refSeq, clientId);
            if (MergeTree.traceTraversal) {
                let segInfo;
                if ((!child.isLeaf()) && this.collabWindow.collaborating) {
                    segInfo = `minLength: ${child.partialLengths.minLength}`;
                }
                else {
                    let segment = child;
                    segInfo = `cli: ${glc(this, segment.clientId)} seq: ${segment.seq} text: ${segment.toString()}`;
                    if (segment.removedSeq !== undefined) {
                        segInfo += ` rcli: ${glc(this, segment.removedClientId)} rseq: ${segment.removedSeq}`;
                    }
                }
                console.log(`@tcli: ${glc(this, this.collabWindow.clientId)} len: ${len} pos: ${pos} ` + segInfo);
            }
            if ((pos < len) || ((pos == len) && this.breakTie(pos, len, seq, child, refSeq, clientId, context.candidateSegment))) {
                // found entry containing pos
                found = true;
                if (!child.isLeaf()) {
                    let childBlock = child;
                    //internal node
                    let splitNode = this.insertingWalk(childBlock, pos, refSeq, clientId, seq, segType, context);
                    if (splitNode === undefined) {
                        if (context.structureChange) {
                            this.nodeUpdateLengthNewStructure(block);
                        }
                        else {
                            this.blockUpdateLength(block, seq, clientId);
                        }
                        return undefined;
                    }
                    else if (splitNode == MergeTree.theUnfinishedNode) {
                        if (MergeTree.traceTraversal) {
                            console.log(`@cli ${glc(this, this.collabWindow.clientId)} unfinished bus pos ${pos} len ${len}`);
                        }
                        pos -= len; // act as if shifted segment
                        continue;
                    }
                    else {
                        newNode = splitNode;
                        fromSplit = splitNode;
                        childIndex++; // insert after
                    }
                }
                else {
                    if (MergeTree.traceTraversal) {
                        console.log(`@tcli: ${glc(this, this.collabWindow.clientId)}: leaf action`);
                    }
                    const segment = child;
                    const branchId = this.getBranchId(clientId);
                    const segmentBranchId = this.getBranchId(segment.clientId);
                    const removalInfo = this.getRemovalInfo(branchId, segmentBranchId, segment);
                    if (removalInfo && removalInfo.removedSeq) {
                        continue;
                    }
                    let segmentChanges = context.leaf(segment, pos, context);
                    if (segmentChanges.replaceCurrent) {
                        if (MergeTree.traceOrdinals) {
                            console.log(`assign from leaf with block ord ${ordinalToArray(block.ordinal)}`);
                        }
                        block.assignChild(segmentChanges.replaceCurrent, childIndex, false);
                        segmentChanges.replaceCurrent.ordinal = child.ordinal;
                    }
                    if (segmentChanges.next) {
                        newNode = segmentChanges.next;
                        childIndex++; // insert after
                    }
                    else {
                        // no change
                        if (context.structureChange) {
                            this.nodeUpdateLengthNewStructure(block);
                        }
                        return undefined;
                    }
                }
                break;
            }
            else {
                pos -= len;
            }
        }
        if (MergeTree.traceTraversal) {
            if ((!found) && (pos > 0)) {
                console.log(`inserting walk fell through pos ${pos} len: ${this.blockLength(this.root, refSeq, clientId)}`);
            }
        }
        if (!newNode) {
            if (pos == 0) {
                if ((seq != UnassignedSequenceNumber) && context.continuePredicate &&
                    context.continuePredicate(block)) {
                    return MergeTree.theUnfinishedNode;
                }
                else {
                    if (MergeTree.traceTraversal) {
                        console.log(`@tcli: ${glc(this, this.collabWindow.clientId)}: leaf action pos 0`);
                    }
                    let segmentChanges = context.leaf(undefined, pos, context);
                    newNode = segmentChanges.next;
                    // assert segmentChanges.replaceCurrent === undefined
                }
            }
        }
        if (newNode) {
            for (let i = block.childCount; i > childIndex; i--) {
                block.children[i] = block.children[i - 1];
                block.children[i].index = i;
            }
            block.assignChild(newNode, childIndex, false);
            block.childCount++;
            block.setOrdinal(newNode, childIndex);
            if (block.childCount < MaxNodesInBlock) {
                if (fromSplit) {
                    if (MergeTree.traceOrdinals) {
                        console.log(`split ord ${ordinalToArray(fromSplit.ordinal)}`);
                    }
                    this.nodeUpdateOrdinals(fromSplit);
                }
                if (context.structureChange) {
                    this.nodeUpdateLengthNewStructure(block);
                }
                else {
                    this.blockUpdateLength(block, seq, clientId);
                }
                return undefined;
            }
            else {
                // don't update ordinals because higher block will do it
                return this.split(block);
            }
        }
        else {
            return undefined;
        }
    }
    split(node) {
        let halfCount = MaxNodesInBlock / 2;
        let newNode = this.makeBlock(halfCount);
        node.childCount = halfCount;
        // update ordinals to reflect lowered child count
        this.nodeUpdateOrdinals(node);
        for (let i = 0; i < halfCount; i++) {
            newNode.assignChild(node.children[halfCount + i], i, false);
            node.children[halfCount + i] = undefined;
        }
        this.nodeUpdateLengthNewStructure(node);
        this.nodeUpdateLengthNewStructure(newNode);
        return newNode;
    }
    ordinalIntegrity() {
        console.log("chk ordnls");
        this.nodeOrdinalIntegrity(this.root);
    }
    nodeOrdinalIntegrity(block) {
        let olen = block.ordinal.length;
        for (let i = 0; i < block.childCount; i++) {
            if (block.children[i].ordinal) {
                if (olen !== (block.children[i].ordinal.length - 1)) {
                    console.log("node integrity issue");
                }
                if (i > 0) {
                    if (block.children[i].ordinal <= block.children[i - 1].ordinal) {
                        console.log("node sib integrity issue");
                        console.log(`??: prnt chld prev ${ordinalToArray(block.ordinal)} ${ordinalToArray(block.children[i].ordinal)} ${(i > 0) ? ordinalToArray(block.children[i - 1].ordinal) : "NA"}`);
                    }
                }
                if (!block.children[i].isLeaf()) {
                    this.nodeOrdinalIntegrity(block.children[i]);
                }
            }
            else {
                console.log(`node child ordinal not set ${i}`);
                console.log(`??: prnt ${ordinalToArray(block.ordinal)}`);
            }
        }
    }
    nodeUpdateOrdinals(block) {
        if (MergeTree.traceOrdinals) {
            console.log(`update ordinals for children of node with ordinal ${ordinalToArray(block.ordinal)}`);
        }
        let clockStart;
        if (MergeTree.options.measureOrdinalTime) {
            clockStart = clock();
        }
        for (let i = 0; i < block.childCount; i++) {
            let child = block.children[i];
            block.setOrdinal(child, i);
            if (!child.isLeaf()) {
                this.nodeUpdateOrdinals(child);
            }
        }
        if (MergeTree.options.measureOrdinalTime) {
            let elapsed = elapsedMicroseconds(clockStart);
            if (elapsed > this.maxOrdTime) {
                this.maxOrdTime = elapsed;
            }
            this.ordTime += elapsed;
        }
    }
    addOverlappingClient(removalInfo, clientId) {
        if (!removalInfo.removedClientOverlap) {
            removalInfo.removedClientOverlap = [];
        }
        if (MergeTree.diagOverlappingRemove) {
            console.log(`added cli ${glc(this, clientId)} to rseq: ${removalInfo.removedSeq}`);
        }
        removalInfo.removedClientOverlap.push(clientId);
    }
    annotateRange(props, start, end, refSeq, clientId, seq, combiningOp, opArgs) {
        this.ensureIntervalBoundary(start, refSeq, clientId);
        this.ensureIntervalBoundary(end, refSeq, clientId);
        const annotatedSegments = [];
        let annotateSegment = (segment) => {
            let segType = segment.getType();
            if ((segType == SegmentType.Marker) || (segType == SegmentType.Text)) {
                annotatedSegments.push(segment);
                segment.addProperties(props, combiningOp, seq);
                if (this.markerModifiedHandler && (segType === SegmentType.Marker) && (seq !== UnassignedSequenceNumber)) {
                    this.markerModifiedHandler(segment);
                }
            }
            return true;
        };
        this.mapRange({ leaf: annotateSegment }, refSeq, clientId, undefined, start, end);
        if (this.mergeTreeDeltaCallback) {
            this.mergeTreeDeltaCallback(opArgs, {
                mergeTreeClientId: clientId,
                operation: 2 /* ANNOTATE */,
                mergeTree: this,
                segments: annotatedSegments
            });
        }
    }
    markRangeRemoved(start, end, refSeq, clientId, seq, overwrite = false, opArgs) {
        this.ensureIntervalBoundary(start, refSeq, clientId);
        this.ensureIntervalBoundary(end, refSeq, clientId);
        let segmentGroup;
        const removedSegments = [];
        let savedLocalRefs = [];
        let markRemoved = (segment, pos, start, end) => {
            let branchId = this.getBranchId(clientId);
            let segBranchId = this.getBranchId(segment.clientId);
            for (let brid = branchId; brid <= this.localBranchId; brid++) {
                let removalInfo = this.getRemovalInfo(brid, segBranchId, segment);
                if (removalInfo.removedSeq != undefined) {
                    if (MergeTree.diagOverlappingRemove) {
                        console.log(`yump @seq ${seq} cli ${glc(this, this.collabWindow.clientId)}: overlaps deleted segment ${removalInfo.removedSeq} text '${segment.toString()}'`);
                    }
                    overwrite = true;
                    if (removalInfo.removedSeq === UnassignedSequenceNumber) {
                        // will only happen on local branch (brid === this.localBranchId)
                        // replace because comes later
                        removalInfo.removedClientId = clientId;
                        removalInfo.removedSeq = seq;
                    }
                    else {
                        // do not replace earlier sequence number for remove
                        this.addOverlappingClient(removalInfo, clientId);
                    }
                }
                else {
                    removalInfo.removedClientId = clientId;
                    removalInfo.removedSeq = seq;
                    removedSegments.push(segment);
                    if (segment.localRefs && (brid === this.localBranchId)) {
                        savedLocalRefs.push(segment.localRefs);
                        segment.localRefs = undefined;
                    }
                }
            }
            // save segment so can assign removed sequence number when acked by server
            if (this.collabWindow.collaborating) {
                // report segment if client interested
                if (this.markerModifiedHandler && (segment.getType() === SegmentType.Marker) && (seq !== UnassignedSequenceNumber)) {
                    this.markerModifiedHandler(segment);
                }
                // use removal information
                let removalInfo = this.getRemovalInfo(this.localBranchId, segBranchId, segment);
                if ((removalInfo.removedSeq === UnassignedSequenceNumber) && (clientId === this.collabWindow.clientId)) {
                    segmentGroup = this.addToPendingList(segment, segmentGroup);
                }
                else {
                    if (MergeTree.options.zamboniSegments) {
                        this.addToLRUSet(segment, seq);
                    }
                }
                //console.log(`saved local removed seg with text: ${textSegment.text}`);
            }
            return true;
        };
        let afterMarkRemoved = (node, pos, start, end) => {
            if (overwrite) {
                this.nodeUpdateLengthNewStructure(node);
            }
            else {
                this.blockUpdateLength(node, seq, clientId);
            }
            return true;
        };
        // MergeTree.traceTraversal = true;
        this.mapRange({ leaf: markRemoved, post: afterMarkRemoved }, refSeq, clientId, undefined, start, end);
        if (savedLocalRefs.length > 0) {
            let afterSeg;
            for (let segSavedRefs of savedLocalRefs) {
                for (let localRef of segSavedRefs) {
                    if (localRef.refType && (localRef.refType & _ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].SlideOnRemove)) {
                        if (!afterSeg) {
                            let afterSegOff = this.getContainingSegment(start, refSeq, clientId);
                            afterSeg = afterSegOff.segment;
                        }
                        if (afterSeg) {
                            localRef.segment = afterSeg;
                            localRef.offset = 0;
                            afterSeg.addLocalRef(localRef);
                        }
                    }
                }
            }
            if (afterSeg) {
                this.blockUpdatePathLengths(afterSeg.parent, TreeMaintenanceSequenceNumber, LocalClientId);
            }
        }
        if (this.mergeTreeDeltaCallback) {
            this.mergeTreeDeltaCallback(opArgs, {
                mergeTreeClientId: clientId,
                operation: 1 /* REMOVE */,
                mergeTree: this,
                segments: removedSegments
            });
        }
        if (this.collabWindow.collaborating && (seq != UnassignedSequenceNumber)) {
            if (MergeTree.options.zamboniSegments) {
                this.zamboniSegments();
            }
        }
        // MergeTree.traceTraversal = false;
    }
    // This method is deprecated should not be used. It modifies existing segments.
    removeRange(start, end, refSeq, clientId) {
        let removeInfo = {};
        this.nodeRemoveRange(this.root, start, end, refSeq, clientId, removeInfo);
        if (removeInfo.highestBlockRemovingChildren) {
            let remBlock = removeInfo.highestBlockRemovingChildren;
            this.nodeUpdateOrdinals(remBlock);
        }
    }
    nodeRemoveRange(block, start, end, refSeq, clientId, removeInfo) {
        let children = block.children;
        let startIndex;
        if (start < 0) {
            startIndex = -1;
        }
        let endIndex = block.childCount;
        for (let childIndex = 0; childIndex < block.childCount; childIndex++) {
            let child = children[childIndex];
            let len = this.nodeLength(child, refSeq, clientId);
            if ((start >= 0) && (start < len)) {
                startIndex = childIndex;
                if (!child.isLeaf()) {
                    this.nodeRemoveRange(child, start, end, refSeq, clientId, removeInfo);
                }
                else {
                    let segment = child;
                    if (segment.removeRange(start, end)) {
                        startIndex--;
                    }
                }
            }
            // REVIEW: run this clause even if above clause runs
            if (end < len) {
                endIndex = childIndex;
                if (end > 0) {
                    if (endIndex > startIndex) {
                        if (!child.isLeaf()) {
                            this.nodeRemoveRange(child, start, end, refSeq, clientId, removeInfo);
                        }
                        else {
                            let segment = child;
                            if (segment.removeRange(0, end)) {
                                endIndex++;
                            }
                        }
                    }
                }
                break;
            }
            start -= len;
            end -= len;
        }
        let deleteCount = (endIndex - startIndex) - 1;
        let deleteStart = startIndex + 1;
        if (deleteCount > 0) {
            // delete nodes in middle of range
            let copyStart = deleteStart + deleteCount;
            let copyCount = block.childCount - copyStart;
            for (let j = 0; j < copyCount; j++) {
                block.assignChild(children[copyStart + j], deleteStart + j, false);
            }
            block.childCount -= deleteCount;
            if (removeInfo.highestBlockRemovingChildren && removeInfo.highestBlockRemovingChildren.parent &&
                (removeInfo.highestBlockRemovingChildren.parent === block.parent)) {
                removeInfo.highestBlockRemovingChildren = block.parent;
            }
            else {
                removeInfo.highestBlockRemovingChildren = block;
            }
        }
        this.nodeUpdateLengthNewStructure(block);
    }
    nodeUpdateLengthNewStructure(node, recur = false) {
        this.blockUpdate(node);
        if (this.collabWindow.collaborating) {
            node.partialLengths = PartialSequenceLengths.combine(this, node, this.collabWindow, recur);
        }
    }
    removeLocalReference(segment, lref) {
        let removedRef = segment.removeLocalRef(lref);
        if (removedRef) {
            this.blockUpdatePathLengths(segment.parent, TreeMaintenanceSequenceNumber, LocalClientId);
        }
    }
    addLocalReference(lref) {
        let segment = lref.segment;
        segment.addLocalRef(lref);
        this.blockUpdatePathLengths(segment.parent, TreeMaintenanceSequenceNumber, LocalClientId);
    }
    blockUpdate(block) {
        let len = 0;
        let hierBlock;
        if (this.blockUpdateMarkers) {
            hierBlock = block.hierBlock();
            hierBlock.rightmostTiles = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
            hierBlock.leftmostTiles = _properties__WEBPACK_IMPORTED_MODULE_2__["createMap"]();
            hierBlock.rangeStacks = {};
        }
        for (let i = 0; i < block.childCount; i++) {
            let child = block.children[i];
            len += nodeTotalLength(this, child);
            if (this.blockUpdateMarkers) {
                hierBlock.addNodeReferences(this, child);
            }
            if (this.blockUpdateActions) {
                this.blockUpdateActions.child(block, i);
            }
        }
        block.cachedLength = len;
    }
    blockUpdatePathLengths(block, seq, clientId, newStructure = false) {
        while (block !== undefined) {
            if (newStructure) {
                this.nodeUpdateLengthNewStructure(block);
            }
            else {
                this.blockUpdateLength(block, seq, clientId);
            }
            block = block.parent;
        }
    }
    blockUpdateLength(node, seq, clientId) {
        this.blockUpdate(node);
        if (this.collabWindow.collaborating && (seq != UnassignedSequenceNumber) && (seq != TreeMaintenanceSequenceNumber)) {
            if (node.partialLengths !== undefined) {
                if (MergeTree.options.incrementalUpdate) {
                    node.partialLengths.update(this, node, seq, clientId, this.collabWindow);
                }
                else {
                    node.partialLengths = PartialSequenceLengths.combine(this, node, this.collabWindow);
                }
            }
            else {
                node.partialLengths = PartialSequenceLengths.combine(this, node, this.collabWindow);
            }
        }
    }
    map(actions, refSeq, clientId, accum) {
        // TODO: optimize to avoid comparisons
        this.nodeMap(this.root, actions, 0, refSeq, clientId, accum);
    }
    mapRange(actions, refSeq, clientId, accum, start, end) {
        this.nodeMap(this.root, actions, 0, refSeq, clientId, accum, start, end);
    }
    rangeToString(start, end) {
        let strbuf = "";
        for (let childIndex = 0; childIndex < this.root.childCount; childIndex++) {
            let child = this.root.children[childIndex];
            if (!child.isLeaf()) {
                let block = child;
                let len = this.blockLength(block, UniversalSequenceNumber, this.collabWindow.clientId);
                if ((start <= len) && (end > 0)) {
                    strbuf += this.nodeToString(block, strbuf, 0);
                }
                start -= len;
                end -= len;
            }
        }
        return strbuf;
    }
    nodeToString(block, strbuf, indentCount = 0) {
        strbuf += internedSpaces(indentCount);
        strbuf += `Node (len ${block.cachedLength}) p len (${block.parent ? block.parent.cachedLength : 0}) ord ${ordinalToArray(block.ordinal)} with ${block.childCount} segs:\n`;
        if (this.blockUpdateMarkers) {
            strbuf += internedSpaces(indentCount);
            strbuf += block.hierToString(indentCount);
        }
        if (this.collabWindow.collaborating) {
            strbuf += internedSpaces(indentCount);
            strbuf += block.partialLengths.toString((id) => glc(this, id), indentCount) + '\n';
        }
        let children = block.children;
        for (let childIndex = 0; childIndex < block.childCount; childIndex++) {
            let child = children[childIndex];
            if (!child.isLeaf()) {
                strbuf = this.nodeToString(child, strbuf, indentCount + 4);
            }
            else {
                let segment = child;
                strbuf += internedSpaces(indentCount + 4);
                strbuf += `cli: ${glc(this, segment.clientId)} seq: ${segment.seq} ord: ${ordinalToArray(segment.ordinal)}`;
                let segBranchId = this.getBranchId(segment.clientId);
                let branchId = this.localBranchId;
                let removalInfo = this.getRemovalInfo(branchId, segBranchId, segment);
                if (removalInfo.removedSeq !== undefined) {
                    strbuf += ` rcli: ${glc(this, removalInfo.removedClientId)} rseq: ${removalInfo.removedSeq}`;
                }
                strbuf += "\n";
                strbuf += internedSpaces(indentCount + 4);
                strbuf += segment.toString();
                strbuf += "\n";
            }
        }
        return strbuf;
    }
    toString() {
        return this.nodeToString(this.root, "", 0);
    }
    incrementalBlockMap(stateStack) {
        while (!stateStack.empty()) {
            let state = stateStack.top();
            if (state.op != IncrementalExecOp.Go) {
                return;
            }
            if (state.childIndex == 0) {
                if (state.start === undefined) {
                    state.start = 0;
                }
                if (state.end === undefined) {
                    state.end = this.blockLength(state.block, state.refSeq, state.clientId);
                }
                if (state.actions.pre) {
                    state.actions.pre(state);
                }
            }
            if ((state.op == IncrementalExecOp.Go) && (state.childIndex < state.block.childCount)) {
                let child = state.block.children[state.childIndex];
                let len = this.nodeLength(child, state.refSeq, state.clientId);
                if (MergeTree.traceIncrTraversal) {
                    if (child.isLeaf()) {
                        console.log(`considering (r ${state.refSeq} c ${glc(this, state.clientId)}) seg with text ${child.text} len ${len} seq ${child.seq} rseq ${child.removedSeq} cli ${glc(this, child.clientId)}`);
                    }
                }
                if ((len > 0) && (state.start < len) && (state.end > 0)) {
                    if (!child.isLeaf()) {
                        let childState = new IncrementalMapState(child, state.actions, state.pos, state.refSeq, state.clientId, state.context, state.start, state.end, 0);
                        stateStack.push(childState);
                    }
                    else {
                        if (MergeTree.traceIncrTraversal) {
                            console.log(`action on seg with text ${child.text}`);
                        }
                        state.actions.leaf(child, state);
                    }
                }
                state.pos += len;
                state.start -= len;
                state.end -= len;
                state.childIndex++;
            }
            else {
                if (state.childIndex == state.block.childCount) {
                    if ((state.op == IncrementalExecOp.Go) && state.actions.post) {
                        state.actions.post(state);
                    }
                    stateStack.pop();
                }
            }
        }
    }
    nodeMap(node, actions, pos, refSeq, clientId, accum, start, end) {
        if (start === undefined) {
            start = 0;
        }
        if (end === undefined) {
            end = this.blockLength(node, refSeq, clientId);
        }
        let go = true;
        if (actions.pre) {
            go = actions.pre(node, pos, refSeq, clientId, start, end, accum);
            if (!go) {
                // cancel this node but not entire traversal
                return true;
            }
        }
        let children = node.children;
        for (let childIndex = 0; childIndex < node.childCount; childIndex++) {
            let child = children[childIndex];
            let len = this.nodeLength(child, refSeq, clientId);
            if (MergeTree.traceTraversal) {
                let segInfo;
                if ((!child.isLeaf()) && this.collabWindow.collaborating) {
                    segInfo = `minLength: ${child.partialLengths.minLength}`;
                }
                else {
                    let segment = child;
                    segInfo = `cli: ${glc(this, segment.clientId)} seq: ${segment.seq} text: '${segment.toString()}'`;
                    if (segment.removedSeq !== undefined) {
                        segInfo += ` rcli: ${glc(this, segment.removedClientId)} rseq: ${segment.removedSeq}`;
                    }
                }
                console.log(`@tcli ${glc(this, this.collabWindow.clientId)}: map len: ${len} start: ${start} end: ${end} ` + segInfo);
            }
            let isLeaf = child.isLeaf();
            if (go && (end > 0) && (len > 0) && (start < len)) {
                // found entry containing pos
                if (!isLeaf) {
                    if (go) {
                        go = this.nodeMap(child, actions, pos, refSeq, clientId, accum, start, end);
                    }
                }
                else {
                    if (MergeTree.traceTraversal) {
                        console.log(`@tcli ${glc(this, this.collabWindow.clientId)}: map leaf action`);
                    }
                    go = actions.leaf(child, pos, refSeq, clientId, start, end, accum);
                }
            }
            if (!go) {
                break;
            }
            if (actions.shift) {
                actions.shift(child, pos, refSeq, clientId, start, end, accum);
            }
            pos += len;
            start -= len;
            end -= len;
        }
        if (go && actions.post) {
            go = actions.post(node, pos, refSeq, clientId, start, end, accum);
        }
        return go;
    }
    // straight call every segment; goes until leaf action returns false
    nodeMapReverse(block, actions, pos, refSeq, clientId, accum) {
        let go = true;
        let children = block.children;
        for (let childIndex = block.childCount - 1; childIndex >= 0; childIndex--) {
            let child = children[childIndex];
            let isLeaf = child.isLeaf();
            if (go) {
                // found entry containing pos
                if (!isLeaf) {
                    if (go) {
                        go = this.nodeMapReverse(child, actions, pos, refSeq, clientId, accum);
                    }
                }
                else {
                    go = actions.leaf(child, pos, refSeq, clientId, 0, 0, accum);
                }
            }
            if (!go) {
                break;
            }
        }
        return go;
    }
}
// must be an even number
MergeTree.TextSegmentGranularity = 128;
MergeTree.zamboniSegmentsMaxCount = 2;
MergeTree.options = {
    incrementalUpdate: true,
    zamboniSegments: true,
    measureWindowTime: true,
    measureOrdinalTime: true,
};
MergeTree.searchChunkSize = 256;
MergeTree.traceAppend = false;
MergeTree.traceZRemove = false;
MergeTree.traceOrdinals = false;
MergeTree.traceGatherText = false;
MergeTree.diagInsertTie = false;
MergeTree.skipLeftShift = true;
MergeTree.diagOverlappingRemove = false;
MergeTree.traceTraversal = false;
MergeTree.traceIncrTraversal = false;
MergeTree.theUnfinishedNode = { childCount: -1 };
//# sourceMappingURL=mergeTree.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/ops.js":
/*!****************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/ops.js ***!
  \****************************************************/
/*! exports provided: ReferenceType, IntervalType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReferenceType", function() { return ReferenceType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntervalType", function() { return IntervalType; });
// tslint:disable:no-bitwise
// tslint:disable:ban-types
var ReferenceType;
(function (ReferenceType) {
    ReferenceType[ReferenceType["Simple"] = 0] = "Simple";
    ReferenceType[ReferenceType["Tile"] = 1] = "Tile";
    ReferenceType[ReferenceType["NestBegin"] = 2] = "NestBegin";
    ReferenceType[ReferenceType["NestEnd"] = 4] = "NestEnd";
    ReferenceType[ReferenceType["RangeBegin"] = 16] = "RangeBegin";
    ReferenceType[ReferenceType["RangeEnd"] = 32] = "RangeEnd";
    ReferenceType[ReferenceType["SlideOnRemove"] = 64] = "SlideOnRemove";
    ReferenceType[ReferenceType["Transient"] = 256] = "Transient";
})(ReferenceType || (ReferenceType = {}));
var IntervalType;
(function (IntervalType) {
    IntervalType[IntervalType["Simple"] = 0] = "Simple";
    IntervalType[IntervalType["Nest"] = 1] = "Nest";
    IntervalType[IntervalType["SlideOnRemove"] = 2] = "SlideOnRemove";
    IntervalType[IntervalType["Transient"] = 4] = "Transient";
})(IntervalType || (IntervalType = {}));
//# sourceMappingURL=ops.js.map

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/properties.js":
/*!***********************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/properties.js ***!
  \***********************************************************/
/*! exports provided: combine, matchProperties, extend, addProperties, extendIfUndefined, createMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combine", function() { return combine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchProperties", function() { return matchProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addProperties", function() { return addProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extendIfUndefined", function() { return extendIfUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMap", function() { return createMap; });
function combine(combiningInfo, currentValue, newValue, seq) {
    if (currentValue === undefined) {
        currentValue = combiningInfo.defaultValue;
    }
    // fixed set of operations for now
    switch (combiningInfo.name) {
        case "incr":
            currentValue += newValue;
            if (combiningInfo.minValue) {
                if (currentValue < combiningInfo.minValue) {
                    currentValue = combiningInfo.minValue;
                }
            }
            break;
        case "consensus":
            if (currentValue === undefined) {
                currentValue = {
                    value: newValue,
                    seq
                };
            }
            else {
                let cv = currentValue;
                if (cv.seq === -1) {
                    cv.seq = seq;
                }
            }
            break;
    }
    return currentValue;
}
function matchProperties(a, b) {
    if (a) {
        if (!b) {
            return false;
        }
        else {
            // for now, straightforward; later use hashing
            for (let key in a) {
                if (b[key] === undefined) {
                    return false;
                }
                else if (b[key] !== a[key]) {
                    return false;
                }
            }
            for (let key in b) {
                if (a[key] === undefined) {
                    return false;
                }
            }
        }
    }
    else {
        if (b) {
            return false;
        }
    }
    return true;
}
function extend(base, extension, combiningOp, seq) {
    if (extension !== undefined) {
        if ((typeof extension !== "object")) {
            console.log(`oh my ${extension}`);
        }
        for (let key in extension) {
            let v = extension[key];
            if (v === null) {
                delete base[key];
            }
            else {
                if (combiningOp && (combiningOp.name !== "rewrite")) {
                    base[key] = combine(combiningOp, base[key], v, seq);
                }
                else {
                    base[key] = v;
                }
            }
        }
    }
    return base;
}
function addProperties(oldProps, newProps, op, seq) {
    if ((!oldProps) || (op && (op.name === "rewrite"))) {
        oldProps = createMap();
    }
    extend(oldProps, newProps, op, seq);
    return oldProps;
}
function extendIfUndefined(base, extension) {
    if (extension !== undefined) {
        if ((typeof extension !== "object")) {
            console.log(`oh my ${extension}`);
        }
        for (let key in extension) {
            if (base[key] === undefined) {
                base[key] = extension[key];
            }
        }
    }
    return base;
}
/** Create a MapLike with good performance. */
function createMap() {
    const map = Object.create(null); // tslint:disable-line:no-null-keyword
    // Using 'delete' on an object causes V8 to put the object in dictionary mode.
    // This disables creation of hidden classes, which are expensive when an object is
    // constantly changing shape.
    map["__"] = undefined;
    delete map["__"];
    return map;
}
//# sourceMappingURL=properties.js.map

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/segmentGroupCollection.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/segmentGroupCollection.js ***!
  \***********************************************************************/
/*! exports provided: SegmentGroupCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SegmentGroupCollection", function() { return SegmentGroupCollection; });
/* harmony import */ var _collections__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./collections */ "./node_modules/@prague/merge-tree/lib/collections.js");

class SegmentGroupCollection {
    constructor(segment) {
        this.segment = segment;
        this.segmentGroups = Object(_collections__WEBPACK_IMPORTED_MODULE_0__["ListMakeHead"])();
    }
    get size() {
        return this.segmentGroups.count();
    }
    get empty() {
        return this.segmentGroups.empty();
    }
    enqueue(segmentGroup) {
        this.segmentGroups.enqueue(segmentGroup);
        segmentGroup.segments.push(this.segment);
    }
    dequeue() {
        return this.segmentGroups.dequeue();
    }
    clear() {
        this.segmentGroups.clear();
    }
    copyTo(segment) {
        this.segmentGroups.walk((sg) => segment.segmentGroups.enqueue(sg));
    }
}
//# sourceMappingURL=segmentGroupCollection.js.map

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/snapshot.js":
/*!*********************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/snapshot.js ***!
  \*********************************************************/
/*! exports provided: Snapshot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Snapshot", function() { return Snapshot; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mergeTree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mergeTree */ "./node_modules/@prague/merge-tree/lib/mergeTree.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class Snapshot {
    constructor(mergeTree, filename, onCompletion) {
        this.mergeTree = mergeTree;
        this.filename = filename;
        this.onCompletion = onCompletion;
    }
    getSeqLengthSegs(allSegments, allLengths, approxSequenceLength, startIndex = 0) {
        let segs = [];
        let sequenceLength = 0;
        let segCount = 0;
        while ((sequenceLength < approxSequenceLength) && ((startIndex + segCount) < allSegments.length)) {
            let pseg = allSegments[startIndex + segCount];
            segCount++;
            segs.push(pseg);
            sequenceLength += allLengths[startIndex + segCount];
        }
        return {
            chunkStartSegmentIndex: startIndex,
            chunkSegmentCount: segCount,
            chunkLengthChars: sequenceLength,
            totalLengthChars: this.header.segmentsTotalLength,
            totalSegmentCount: allSegments.length,
            chunkSequenceNumber: this.header.seq,
            segmentTexts: segs
        };
    }
    emit() {
        let chunk1 = this.getSeqLengthSegs(this.segments, this.segmentLengths, 10000);
        let chunk2 = this.getSeqLengthSegs(this.segments, this.segmentLengths, chunk1.totalLengthChars, chunk1.chunkSegmentCount);
        const tree = {
            entries: [
                {
                    mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"].File,
                    path: "header",
                    type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"].Blob],
                    value: {
                        contents: JSON.stringify(chunk1),
                        encoding: "utf-8",
                    },
                },
                {
                    mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"].File,
                    path: "body",
                    type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"].Blob],
                    value: {
                        contents: JSON.stringify(chunk2),
                        encoding: "utf-8",
                    },
                },
            ],
            sha: null,
        };
        return tree;
    }
    extractSync() {
        let collabWindow = this.mergeTree.getCollabWindow();
        this.seq = collabWindow.minSeq;
        this.header = {
            segmentsTotalLength: this.mergeTree.getLength(this.mergeTree.collabWindow.minSeq, _mergeTree__WEBPACK_IMPORTED_MODULE_1__["NonCollabClient"]),
            seq: this.mergeTree.collabWindow.minSeq,
        };
        let segs = [];
        let segLengths = [];
        let extractSegment = (segment, pos, refSeq, clientId, start, end) => {
            if ((segment.seq != _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"]) && (segment.seq <= this.seq) &&
                ((segment.removedSeq === undefined) || (segment.removedSeq == _mergeTree__WEBPACK_IMPORTED_MODULE_1__["UnassignedSequenceNumber"]) ||
                    (segment.removedSeq > this.seq))) {
                segs.push(segment.toJSONObject());
                segLengths.push(segment.cachedLength);
            }
            return true;
        };
        this.mergeTree.map({ leaf: extractSegment }, this.seq, _mergeTree__WEBPACK_IMPORTED_MODULE_1__["NonCollabClient"]);
        this.segments = segs;
        this.segmentLengths = segLengths;
        return segs;
    }
    static loadChunk(storage, path) {
        return __awaiter(this, void 0, void 0, function* () {
            let chunkAsString = yield storage.read(path);
            return Snapshot.processChunk(chunkAsString);
        });
    }
    static processChunk(chunk) {
        return JSON.parse(Buffer.from(chunk, "base64").toString("utf-8"));
    }
}
Snapshot.SnapChunkMaxSize = 0x20000;
Snapshot.SegmentLengthSize = 0x4;
Snapshot.SnapshotHeaderSize = 0x14;
Snapshot.EmptyChunk = {
    chunkStartSegmentIndex: -1,
    chunkSegmentCount: -1,
    chunkLengthChars: -1,
    totalLengthChars: -1,
    totalSegmentCount: -1,
    chunkSequenceNumber: 0,
    segmentTexts: [],
};
//# sourceMappingURL=snapshot.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/merge-tree/lib/text.js":
/*!*****************************************************!*\
  !*** ./node_modules/@prague/merge-tree/lib/text.js ***!
  \*****************************************************/
/*! exports provided: loadSegments, loadText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadSegments", function() { return loadSegments; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadText", function() { return loadText; });
/* harmony import */ var _mergeTree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeTree */ "./node_modules/@prague/merge-tree/lib/mergeTree.js");
/* harmony import */ var _ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ops */ "./node_modules/@prague/merge-tree/lib/ops.js");


function loadSegments(content, segLimit, markers = false, withProps = true) {
    // tslint:disable-next-line:no-parameter-reassignment
    content = content.replace(/^\uFEFF/, "");
    const seq = _mergeTree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"];
    const cli = _mergeTree__WEBPACK_IMPORTED_MODULE_0__["LocalClientId"];
    const paragraphs = content.split("\r\n");
    // tslint:disable-next-line:no-increment-decrement
    for (let i = 0, len = paragraphs.length; i < len; i++) {
        paragraphs[i] = paragraphs[i]
            .replace(/\r\n/g, " ")
            .replace(/\u201c|\u201d/g, '"')
            .replace(/\u2019/g, "'");
        if (!markers && i !== paragraphs.length - 1) {
            paragraphs[i] += "\n";
        }
    }
    const segments = [];
    for (const paragraph of paragraphs) {
        let pgMarker;
        if (markers) {
            pgMarker = _mergeTree__WEBPACK_IMPORTED_MODULE_0__["Marker"].make(_ops__WEBPACK_IMPORTED_MODULE_1__["ReferenceType"].Tile, { [_mergeTree__WEBPACK_IMPORTED_MODULE_0__["reservedTileLabelsKey"]]: ["pg"] }, seq, cli);
        }
        if (withProps) {
            if ((paragraph.indexOf("Chapter") >= 0) || (paragraph.indexOf("PRIDE AND PREJ") >= 0)) {
                if (markers) {
                    pgMarker.addProperties({ header: 2 });
                    segments.push(new _mergeTree__WEBPACK_IMPORTED_MODULE_0__["TextSegment"](paragraph, seq, cli));
                }
                else {
                    segments.push(_mergeTree__WEBPACK_IMPORTED_MODULE_0__["TextSegment"].make(paragraph, { fontSize: "140%", lineHeight: "150%" }, seq, cli));
                }
            }
            else {
                const emphStrings = paragraph.split("_");
                // tslint:disable-next-line:no-increment-decrement
                for (let i = 0, len = emphStrings.length; i < len; i++) {
                    // tslint:disable-next-line:no-bitwise
                    if (i & 1) {
                        if (emphStrings[i].length > 0) {
                            segments.push(_mergeTree__WEBPACK_IMPORTED_MODULE_0__["TextSegment"].make(emphStrings[i], { fontStyle: "italic" }, seq, cli));
                        }
                    }
                    else {
                        if (emphStrings[i].length > 0) {
                            segments.push(new _mergeTree__WEBPACK_IMPORTED_MODULE_0__["TextSegment"](emphStrings[i], seq, cli));
                        }
                    }
                }
            }
        }
        else {
            segments.push(new _mergeTree__WEBPACK_IMPORTED_MODULE_0__["TextSegment"](paragraph, seq, cli));
        }
        if (markers) {
            segments.push(pgMarker);
        }
    }
    if (segLimit > 0) {
        segments.length = segLimit;
    }
    return segments;
}
function loadText(content, mergeTree, segLimit, markers = false) {
    const segments = loadSegments(content, segLimit, markers);
    mergeTree.reloadFromSegments(segments);
    // console.log(`Number of Segments: ${segments.length}`);
    // console.log(`Height: ${mergeTree.getStats().maxHeight}`);
    // console.log(segTree.toString());
    return mergeTree;
}
//# sourceMappingURL=text.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/componentRuntime.js":
/*!***************************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/componentRuntime.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const container_definitions_1 = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
const events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
// tslint:disable:no-unsafe-any
class ComponentRuntime extends events_1.EventEmitter {
    constructor(hostRuntime, pkg, id, existing, chaincode, storage, baseSnapshot) {
        super();
        this.hostRuntime = hostRuntime;
        this.pkg = pkg;
        this.id = id;
        this.existing = existing;
        this.chaincode = chaincode;
        this.storage = storage;
        this.baseSnapshot = baseSnapshot;
        this.closed = false;
        // Tracks the base snapshot hash. If no ops effect this component then the sha value can be returned on a
        // snapshot call
        this.baseSha = null;
        this.baseSha = baseSnapshot ? baseSnapshot.sha : null;
    }
    static create(hostRuntime, id, pkg, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const factory = yield hostRuntime.getPackage(pkg);
            const extension = yield factory.instantiateComponent();
            const component = new ComponentRuntime(hostRuntime, pkg, id, false, extension, storage, null);
            return component;
        });
    }
    static LoadFromSnapshot(hostRuntime, id, pkg, storage, channels) {
        return __awaiter(this, void 0, void 0, function* () {
            const factory = yield hostRuntime.getPackage(pkg);
            const extension = yield factory.instantiateComponent();
            const component = new ComponentRuntime(hostRuntime, pkg, id, true, extension, storage, channels);
            return component;
        });
    }
    get tenantId() {
        return this.hostRuntime.tenantId;
    }
    get documentId() {
        return this.hostRuntime.id;
    }
    get parentBranch() {
        return this.hostRuntime.parentBranch;
    }
    get options() {
        return this.hostRuntime.options;
    }
    get clientId() {
        return this.hostRuntime.clientId;
    }
    get blobManager() {
        return this.hostRuntime.blobManager;
    }
    get deltaManager() {
        return this.hostRuntime.deltaManager;
    }
    get connected() {
        return this.hostRuntime.connected;
    }
    get connectionState() {
        return this.hostRuntime.connectionState;
    }
    get submitFn() {
        return this.hostRuntime.submitFn;
    }
    get snapshotFn() {
        return this.hostRuntime.snapshotFn;
    }
    get closeFn() {
        return this.hostRuntime.closeFn;
    }
    get branch() {
        return this.hostRuntime.branch;
    }
    createAndAttachComponent(id, pkg) {
        return this.hostRuntime.createAndAttachComponent(id, pkg);
    }
    getComponent(id, wait) {
        return this.hostRuntime.getComponent(id, wait);
    }
    changeConnectionState(value, clientId) {
        this.verifyNotClosed();
        this.handler.changeConnectionState(value, clientId);
    }
    // Called after a snapshot to update the base sha
    updateBaseSha(sha) {
        this.baseSha = sha;
    }
    prepare(message, local) {
        this.verifyNotClosed();
        return this.handler.prepare(message, local);
    }
    process(message, local, context) {
        this.verifyNotClosed();
        // component has been modified and will need to regenerate its snapshot
        this.baseSha = null;
        return this.handler.process(message, local, context);
    }
    getQuorum() {
        this.verifyNotClosed();
        return this.hostRuntime.getQuorum();
    }
    getBlobMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.blobManager.getBlobMetadata();
        });
    }
    stop() {
        this.verifyNotClosed();
        this.closed = true;
        return this.snapshot();
    }
    close() {
        this.hostRuntime.closeFn();
    }
    updateMinSequenceNumber(msn) {
        this.handler.updateMinSequenceNumber(msn);
    }
    snapshot() {
        const componentAttributes = { pkg: this.pkg };
        const snapshot = this.chaincode.snapshot();
        snapshot.entries.push({
            mode: container_definitions_1.FileMode.File,
            path: ".component",
            type: container_definitions_1.TreeEntry[container_definitions_1.TreeEntry.Blob],
            value: {
                contents: JSON.stringify(componentAttributes),
                encoding: "utf-8",
            },
        });
        // base sha still being set means previous snapshot is still valid
        if (this.baseSha) {
            snapshot.sha = this.baseSha;
        }
        return snapshot;
    }
    request(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.handler.request(request);
        });
    }
    submitMessage(type, content) {
        return this.submit(type, content);
    }
    error(err) {
        return;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyNotClosed();
            this.handler = yield this.chaincode.run(this);
        });
    }
    attach(platform) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.chaincode.attach(platform);
        });
    }
    submit(type, content) {
        this.verifyNotClosed();
        const envelope = {
            address: this.id,
            contents: {
                content,
                type,
            },
        };
        return this.hostRuntime.submitFn(container_definitions_1.MessageType.Operation, envelope);
    }
    verifyNotClosed() {
        if (this.closed) {
            throw new Error("Runtime is closed");
        }
    }
}
exports.ComponentRuntime = ComponentRuntime;
//# sourceMappingURL=componentRuntime.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/componentStorageService.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/componentStorageService.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ComponentStorageService {
    constructor(storageService, blobs) {
        this.storageService = storageService;
        this.blobs = blobs;
    }
    get repositoryUrl() {
        return this.storageService.repositoryUrl;
    }
    // TODO Will a subcomponent ever need this? Or we can probably restrict the ref to itself
    getSnapshotTree(version) {
        return this.storageService.getSnapshotTree(version);
    }
    getVersions(sha, count) {
        return this.storageService.getVersions(sha, count);
    }
    getContent(version, path) {
        return this.storageService.getContent(version, path);
    }
    read(sha) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.blobs.has(sha)) {
                return this.blobs.get(sha);
            }
            return this.storageService.read(sha);
        });
    }
    // TODO the write as well potentially doesn't seem necessary
    write(root, parents, message, ref) {
        return this.storageService.write(root, parents, message, ref);
    }
    createBlob(file) {
        return this.storageService.createBlob(file);
    }
    getRawUrl(sha) {
        return this.storageService.getRawUrl(sha);
    }
}
exports.ComponentStorageService = ComponentStorageService;
//# sourceMappingURL=componentStorageService.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/debug.js":
/*!****************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/debug.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const registerDebug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
exports.debug = registerDebug("prague:process-loader");
//# sourceMappingURL=debug.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./runtime */ "./node_modules/@prague/runtime/dist/runtime.js"));
__export(__webpack_require__(/*! ./webPlatform */ "./node_modules/@prague/runtime/dist/webPlatform.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/leaderElection.js":
/*!*************************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/leaderElection.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
const debug_1 = __webpack_require__(/*! ./debug */ "./node_modules/@prague/runtime/dist/debug.js");
exports.QuorumKey = "leader";
class LeaderElector extends events_1.EventEmitter {
    constructor(quorum, clientId) {
        super();
        this.quorum = quorum;
        this.clientId = clientId;
        this.attachQuorumListeners();
    }
    proposeLeadership() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.quorum.propose(exports.QuorumKey, this.clientId);
        });
    }
    getLeader() {
        return this.leader;
    }
    attachQuorumListeners() {
        this.quorum.on("approveProposal", (sequenceNumber, key, value) => {
            if (key === exports.QuorumKey) {
                this.leader = value;
                this.emit("newLeader", this.leader);
            }
        });
        this.quorum.on("addProposal", (proposal) => {
            if (proposal.key === exports.QuorumKey) {
                if (this.leader !== undefined) {
                    proposal.reject();
                }
            }
        });
        this.quorum.on("removeMember", (removedClientId) => {
            if (this.leader === undefined || removedClientId === this.leader) {
                this.leader = undefined;
                this.emit("leaderLeft", removedClientId);
            }
            else {
                this.emit("memberLeft", removedClientId);
            }
        });
        this.quorum.on("rejectProposal", (sequenceNumber, key, value) => {
            // Use of 'any' in template literal should be as safe as ("" + value) coercion.
            // tslint:disable-next-line:no-unsafe-any
            debug_1.debug(`Proposal rejected @${sequenceNumber}. ${key}:${value}`);
        });
    }
}
exports.LeaderElector = LeaderElector;
//# sourceMappingURL=leaderElection.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/runtime.js":
/*!******************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/runtime.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const container_definitions_1 = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
const utils_1 = __webpack_require__(/*! @prague/utils */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/index.js");
const assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
const events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
const componentRuntime_1 = __webpack_require__(/*! ./componentRuntime */ "./node_modules/@prague/runtime/dist/componentRuntime.js");
const componentStorageService_1 = __webpack_require__(/*! ./componentStorageService */ "./node_modules/@prague/runtime/dist/componentStorageService.js");
const debug_1 = __webpack_require__(/*! ./debug */ "./node_modules/@prague/runtime/dist/debug.js");
const leaderElection_1 = __webpack_require__(/*! ./leaderElection */ "./node_modules/@prague/runtime/dist/leaderElection.js");
const taskAnalyzer_1 = __webpack_require__(/*! ./taskAnalyzer */ "./node_modules/@prague/runtime/dist/taskAnalyzer.js");
// Context will define the component level mappings
class Runtime extends events_1.EventEmitter {
    constructor(registry, context) {
        super();
        this.registry = registry;
        this.context = context;
        this.tasks = [];
        // Components tracked by the Domain
        this.components = new Map();
        this.componentsDeferred = new Map();
        this.closed = false;
        this.pendingAttach = new Map();
        this.lastMinSequenceNumber = context.minimumSequenceNumber;
    }
    static Load(registry, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const runtime = new Runtime(registry, context);
            const components = new Map();
            const snapshotTreesP = Object.keys(context.baseSnapshot.commits).map((key) => __awaiter(this, void 0, void 0, function* () {
                const moduleSha = context.baseSnapshot.commits[key];
                const commit = (yield context.storage.getVersions(moduleSha, 1))[0];
                const moduleTree = yield context.storage.getSnapshotTree(commit);
                return { id: key, tree: moduleTree };
            }));
            const snapshotTree = yield Promise.all(snapshotTreesP);
            for (const value of snapshotTree) {
                components.set(value.id, value.tree);
            }
            const componentsP = new Array();
            for (const [componentId, snapshot] of components) {
                const componentP = runtime.loadComponent(componentId, snapshot, context.blobs);
                componentsP.push(componentP);
            }
            yield Promise.all(componentsP);
            return runtime;
        });
    }
    get connectionState() {
        return this.context.connectionState;
    }
    get tenantId() {
        return this.context.tenantId;
    }
    get id() {
        return this.context.id;
    }
    get parentBranch() {
        return this.context.parentBranch;
    }
    get existing() {
        return this.context.existing;
    }
    // tslint:disable-next-line:no-unsafe-any
    get options() {
        return this.context.options;
    }
    get clientId() {
        return this.context.clientId;
    }
    get blobManager() {
        return this.context.blobManager;
    }
    get deltaManager() {
        return this.context.deltaManager;
    }
    get storage() {
        return this.context.storage;
    }
    get branch() {
        return this.context.branch;
    }
    get minimumSequenceNumber() {
        return this.context.minimumSequenceNumber;
    }
    get submitFn() {
        return this.context.submitFn;
    }
    get snapshotFn() {
        return this.context.snapshotFn;
    }
    get closeFn() {
        return this.context.closeFn;
    }
    get connected() {
        return this.connectionState === container_definitions_1.ConnectionState.Connected;
    }
    loadComponent(id, snapshotTree, extraBlobs) {
        return __awaiter(this, void 0, void 0, function* () {
            // Need to rip through snapshot and use that to populate extraBlobs
            const runtimeStorage = new componentStorageService_1.ComponentStorageService(this.storage, extraBlobs);
            const details = yield utils_1.readAndParse(this.storage, snapshotTree.blobs[".component"]);
            const componentP = componentRuntime_1.ComponentRuntime.LoadFromSnapshot(this, id, details.pkg, runtimeStorage, snapshotTree);
            const deferred = new utils_1.Deferred();
            deferred.resolve(componentP);
            this.componentsDeferred.set(id, deferred);
            const component = yield componentP;
            this.components.set(id, component);
            yield component.start();
        });
    }
    registerRequestHandler(handler) {
        this.requestHandler = handler;
    }
    getPackage(name) {
        return this.registry.get(name);
    }
    request(request) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.requestHandler) {
                return { status: 404, mimeType: "text/plain", value: `${request.url} not found` };
            }
            else {
                return this.requestHandler(request);
            }
        });
    }
    snapshot(tagMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            // Pull in the prior version and snapshot tree to store against
            const lastVersion = yield this.storage.getVersions(this.id, 1);
            const tree = lastVersion.length > 0
                ? yield this.storage.getSnapshotTree(lastVersion[0])
                : { blobs: {}, commits: {}, trees: {} };
            // Iterate over each component and ask it to snapshot
            const channelEntries = new Map();
            this.components.forEach((component, key) => channelEntries.set(key, component.snapshot()));
            // Use base tree to know previous component snapshot and then snapshot each component
            const channelCommitsP = new Array();
            for (const [channelId, channelSnapshot] of channelEntries) {
                // If sha exists then previous commit is still valid
                if (channelSnapshot.sha) {
                    channelCommitsP.push(Promise.resolve({
                        commit: tree.commits[channelId],
                        id: channelId,
                    }));
                }
                else {
                    const parent = channelId in tree.commits ? [tree.commits[channelId]] : [];
                    const channelCommitP = this.storage
                        .write(channelSnapshot, parent, `${channelId} commit ${tagMessage}`, channelId)
                        .then((commit) => {
                        this.components.get(channelId).updateBaseSha(commit.tree.sha);
                        return { id: channelId, commit: commit.sha };
                    });
                    channelCommitsP.push(channelCommitP);
                }
            }
            const root = { entries: [], sha: null };
            // Add in module references to the component snapshots
            const channelCommits = yield Promise.all(channelCommitsP);
            let gitModules = "";
            for (const channelCommit of channelCommits) {
                root.entries.push({
                    mode: container_definitions_1.FileMode.Commit,
                    path: channelCommit.id,
                    type: container_definitions_1.TreeEntry[container_definitions_1.TreeEntry.Commit],
                    value: channelCommit.commit,
                });
                const repoUrl = "https://github.com/kurtb/praguedocs.git"; // this.storageService.repositoryUrl
                gitModules += `[submodule "${channelCommit.id}"]\n\tpath = ${channelCommit.id}\n\turl = ${repoUrl}\n\n`;
            }
            // Write the module lookup details
            root.entries.push({
                mode: container_definitions_1.FileMode.File,
                path: ".gitmodules",
                type: container_definitions_1.TreeEntry[container_definitions_1.TreeEntry.Blob],
                value: {
                    contents: gitModules,
                    encoding: "utf-8",
                },
            });
            return root;
        });
    }
    requestSnapshot(tagMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.context.requestSnapshot(tagMessage);
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyNotClosed();
            this.closed = true;
        });
    }
    changeConnectionState(value, clientId) {
        this.verifyNotClosed();
        // Resend all pending attach messages prior to notifying clients
        if (value === container_definitions_1.ConnectionState.Connected) {
            for (const [, message] of this.pendingAttach) {
                this.submit(container_definitions_1.MessageType.Attach, message);
            }
        }
        for (const [, component] of this.components) {
            component.changeConnectionState(value, clientId);
        }
        if (value === container_definitions_1.ConnectionState.Connected) {
            this.emit("connected", this.clientId);
        }
    }
    prepare(message, local) {
        switch (message.type) {
            case container_definitions_1.MessageType.Operation:
                return this.prepareOperation(message, local);
            case container_definitions_1.MessageType.Attach:
                return this.prepareAttach(message, local);
            default:
                return Promise.resolve();
        }
    }
    process(message, local, context) {
        switch (message.type) {
            case container_definitions_1.MessageType.Operation:
                this.processOperation(message, local, context);
                break;
            case container_definitions_1.MessageType.Attach:
                this.processAttach(message, local, context);
                break;
            default:
        }
        this.emit("op", message);
        if (this.lastMinSequenceNumber !== message.minimumSequenceNumber) {
            this.lastMinSequenceNumber = message.minimumSequenceNumber;
            this.updateMinSequenceNumber(message.minimumSequenceNumber);
        }
    }
    postProcess(message, local, context) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (message.type) {
                case container_definitions_1.MessageType.Attach:
                    return this.postProcessAttach(message, local, context);
                default:
            }
        });
    }
    updateMinSequenceNumber(minimumSequenceNumber) {
        for (const [, component] of this.components) {
            component.updateMinSequenceNumber(minimumSequenceNumber);
        }
    }
    getComponent(id, wait = true) {
        this.verifyNotClosed();
        if (!this.componentsDeferred.has(id)) {
            if (!wait) {
                return Promise.reject(`Process ${id} does not exist`);
            }
            // Add in a deferred that will resolve once the process ID arrives
            this.componentsDeferred.set(id, new utils_1.Deferred());
        }
        return this.componentsDeferred.get(id).promise;
    }
    createAndAttachComponent(id, pkg) {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyNotClosed();
            const runtimeStorage = new componentStorageService_1.ComponentStorageService(this.storage, new Map());
            const component = yield componentRuntime_1.ComponentRuntime.create(this, id, pkg, runtimeStorage);
            // Generate the attach message
            const message = {
                id,
                snapshot: null,
                type: pkg,
            };
            this.pendingAttach.set(id, message);
            this.submit(container_definitions_1.MessageType.Attach, message);
            // Start the component
            yield component.start();
            // Store off the component
            this.components.set(id, component);
            // Resolve any pending requests for the component
            if (this.componentsDeferred.has(id)) {
                this.componentsDeferred.get(id).resolve(component);
            }
            else {
                const deferred = new utils_1.Deferred();
                deferred.resolve(component);
                this.componentsDeferred.set(id, deferred);
            }
            return component;
        });
    }
    getQuorum() {
        return this.context.quorum;
    }
    error(error) {
        this.context.error(error);
    }
    registerTasks(tasks, version) {
        this.verifyNotClosed();
        this.tasks = tasks;
        this.version = version;
        this.startLeaderElection();
    }
    submit(type, content) {
        this.verifyNotClosed();
        this.submitFn(type, content);
    }
    verifyNotClosed() {
        if (this.closed) {
            throw new Error("Runtime is closed");
        }
    }
    prepareOperation(message, local) {
        return __awaiter(this, void 0, void 0, function* () {
            const envelope = message.contents;
            const component = this.components.get(envelope.address);
            assert(component);
            const innerContents = envelope.contents;
            const transformed = {
                clientId: message.clientId,
                clientSequenceNumber: message.clientSequenceNumber,
                contents: innerContents.content,
                metadata: message.metadata,
                minimumSequenceNumber: message.minimumSequenceNumber,
                origin: message.origin,
                referenceSequenceNumber: message.referenceSequenceNumber,
                sequenceNumber: message.sequenceNumber,
                timestamp: message.timestamp,
                traces: message.traces,
                type: innerContents.type,
            };
            return component.prepare(transformed, local);
        });
    }
    processOperation(message, local, context) {
        const envelope = message.contents;
        const component = this.components.get(envelope.address);
        assert(component);
        const innerContents = envelope.contents;
        const transformed = {
            clientId: message.clientId,
            clientSequenceNumber: message.clientSequenceNumber,
            contents: innerContents.content,
            metadata: message.metadata,
            minimumSequenceNumber: message.minimumSequenceNumber,
            origin: message.origin,
            referenceSequenceNumber: message.referenceSequenceNumber,
            sequenceNumber: message.sequenceNumber,
            timestamp: message.timestamp,
            traces: message.traces,
            type: innerContents.type,
        };
        component.process(transformed, local, context);
    }
    prepareAttach(message, local) {
        return __awaiter(this, void 0, void 0, function* () {
            this.verifyNotClosed();
            // the local object has already been attached
            if (local) {
                return;
            }
            const attachMessage = message.contents;
            let snapshotTree = null;
            if (attachMessage.snapshot) {
                const flattened = utils_1.flatten(attachMessage.snapshot.entries, new Map());
                snapshotTree = utils_1.buildHierarchy(flattened);
            }
            // create storage service that wraps the attach data
            const runtimeStorage = new componentStorageService_1.ComponentStorageService(this.storage, new Map());
            const component = yield componentRuntime_1.ComponentRuntime.LoadFromSnapshot(this, attachMessage.id, attachMessage.type, runtimeStorage, snapshotTree);
            return component;
        });
    }
    processAttach(message, local, context) {
        this.verifyNotClosed();
        debug_1.debug("processAttach");
    }
    postProcessAttach(message, local, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const attachMessage = message.contents;
            // If a non-local operation then go and create the object - otherwise mark it as officially attached.
            if (local) {
                assert(this.pendingAttach.has(attachMessage.id));
                this.pendingAttach.delete(attachMessage.id);
            }
            else {
                yield context.start();
                this.components.set(attachMessage.id, context);
                // Resolve pending gets and store off any new ones
                if (this.componentsDeferred.has(attachMessage.id)) {
                    this.componentsDeferred.get(attachMessage.id).resolve(context);
                }
                else {
                    const deferred = new utils_1.Deferred();
                    deferred.resolve(context);
                    this.componentsDeferred.set(attachMessage.id, deferred);
                }
            }
        });
    }
    startLeaderElection() {
        if (this.deltaManager && this.deltaManager.clientType === container_definitions_1.Browser) {
            if (this.connected) {
                this.initLeaderElection();
            }
            else {
                this.once("connected", () => this.initLeaderElection());
            }
        }
    }
    initLeaderElection() {
        this.leaderElector = new leaderElection_1.LeaderElector(this.getQuorum(), this.clientId);
        this.leaderElector.on("newLeader", (clientId) => {
            debug_1.debug(`New leader elected: ${clientId}`);
            this.runTaskAnalyzer();
        });
        this.leaderElector.on("leaderLeft", (clientId) => {
            debug_1.debug(`Leader ${clientId} left`);
            this.proposeLeadership();
        });
        this.leaderElector.on("memberLeft", (clientId) => {
            debug_1.debug(`Member ${clientId} left`);
            this.runTaskAnalyzer();
        });
        this.proposeLeadership();
    }
    proposeLeadership() {
        if (taskAnalyzer_1.getLeaderCandidate(this.getQuorum().getMembers()) === this.clientId) {
            this.leaderElector.proposeLeadership().then(() => {
                debug_1.debug(`Proposal accepted`);
            }, (err) => {
                debug_1.debug(`Proposal rejected: ${err}`);
            });
        }
    }
    /**
     * On a client joining/departure, decide whether this client is the new leader.
     * If so, calculate if there are any unhandled tasks for browsers and remote agents.
     * Emit local help message for this browser and submits a remote help message for agents.
     */
    runTaskAnalyzer() {
        if (this.leaderElector.getLeader() === this.clientId) {
            // Analyze the current state and ask for local and remote help seperately.
            const helpTasks = taskAnalyzer_1.analyzeTasks(this.clientId, this.getQuorum().getMembers(), this.tasks);
            if (helpTasks && (helpTasks.browser.length > 0 || helpTasks.robot.length > 0)) {
                if (helpTasks.browser.length > 0) {
                    const localHelpMessage = {
                        tasks: helpTasks.browser,
                        version: this.version,
                    };
                    console.log(`Requesting local help for ${helpTasks.browser}`);
                    this.emit("localHelp", localHelpMessage);
                }
                if (helpTasks.robot.length > 0) {
                    const remoteHelpMessage = {
                        tasks: helpTasks.robot,
                        version: this.version,
                    };
                    console.log(`Requesting remote help for ${helpTasks.robot}`);
                    this.submit(container_definitions_1.MessageType.RemoteHelp, remoteHelpMessage);
                }
            }
        }
    }
}
exports.Runtime = Runtime;
//# sourceMappingURL=runtime.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/taskAnalyzer.js":
/*!***********************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/taskAnalyzer.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const container_definitions_1 = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
// For a given list of connected clients and tasks to run, this function calculates need for local & remote help.
// Right now only one client (aka leader) is allowed to run tasks and ask for local and remote.
// To become completely distributed, each client should take into account other client permissions
// and calculate help list. Then each client will pick up work independently and only leader will
// ask for help.
// TODO: Make this run on all clients once services are hardened better.
function analyzeTasks(runnerClientId, clients, tasks) {
    const robotClients = [...clients].filter((client) => isRobot(client[1]));
    const handledTasks = robotClients.map((robot) => robot[1].client.type);
    const unhandledTasks = tasks.filter((task) => handledTasks.indexOf(task) === -1);
    if (unhandledTasks.length > 0) {
        const runnerClient = clients.get(runnerClientId);
        /* tslint:disable:strict-boolean-expressions */
        const permission = runnerClient.client && runnerClient.client.permission ? runnerClient.client.permission : [];
        const allowedTasks = unhandledTasks.filter((task) => permission && permission.indexOf(task) !== -1);
        const robotNeeded = unhandledTasks.filter((task) => permission && permission.indexOf(task) === -1);
        return {
            browser: allowedTasks,
            robot: robotNeeded,
        };
    }
}
exports.analyzeTasks = analyzeTasks;
function getLeaderCandidate(clients) {
    const browserClients = [...clients].filter((client) => !isRobot(client[1]));
    if (browserClients.length > 0) {
        const candidate = browserClients.reduce((prev, curr) => {
            return prev[1].sequenceNumber < curr[1].sequenceNumber ? prev : curr;
        });
        return candidate[0];
    }
}
exports.getLeaderCandidate = getLeaderCandidate;
function isRobot(client) {
    return client.client && client.client.type && client.client.type !== container_definitions_1.Browser;
}
//# sourceMappingURL=taskAnalyzer.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/dist/webPlatform.js":
/*!**********************************************************!*\
  !*** ./node_modules/@prague/runtime/dist/webPlatform.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");
class DefinitionGuide extends events_1.EventEmitter {
    constructor() {
        super();
        this.counter = 0;
        this.dts = "";
        setInterval(() => {
            let dts = "declare class Facts {\n";
            for (let i = 0; i < this.counter; i++) {
                dts += `    static next${i}(): string;\n`;
            }
            dts += "}";
            this.dts = dts;
            this.counter++;
            this.emit("definitionsChanged");
        }, 5000);
    }
    getDefinition() {
        return this.dts;
    }
}
class WebPlatform extends events_1.EventEmitter {
    constructor(div) {
        super();
        this.div = div;
        this.definitions = new DefinitionGuide();
    }
    queryInterface(id) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (id) {
                case "dom":
                    return document;
                case "div":
                    return this.div;
                case "dts":
                    return this.definitions;
                default:
                    return null;
            }
        });
    }
    // Temporary measure to indicate the UI changed
    update() {
        this.emit("update");
    }
    detach() {
        return;
    }
}
exports.WebPlatform = WebPlatform;
class WebPlatformFactory {
    constructor(div) {
        this.div = div;
    }
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            return new WebPlatform(this.div);
        });
    }
}
exports.WebPlatformFactory = WebPlatformFactory;
//# sourceMappingURL=webPlatform.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/batchManager.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/batchManager.js ***!
  \*************************************************************************************/
/*! exports provided: BatchManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchManager", function() { return BatchManager; });
const MaxBatchSize = 100;
class BatchManager {
    constructor(process) {
        this.process = process;
        this.pendingWork = new Map();
    }
    add(id, work) {
        if (!this.pendingWork.has(id)) {
            this.pendingWork.set(id, []);
        }
        this.pendingWork.get(id)
            .push(work);
        if (this.pendingWork.get(id).length >= MaxBatchSize) {
            clearTimeout(this.pendingTimer);
            this.pendingTimer = undefined;
            this.startWork();
        }
        else if (this.pendingTimer === undefined) {
            this.pendingTimer = setTimeout(() => {
                this.pendingTimer = undefined;
                this.startWork();
            }, 0);
        }
    }
    /**
     * Resolves once all pending work is complete
     */
    drain() {
        this.startWork();
    }
    startWork() {
        // Clear the internal flags first to avoid issues in case any of the pending work calls back into
        // the batch manager. We could also do this with a second setImmediate call but avodiing in order
        // to process the work quicker.
        const pendingWork = this.pendingWork;
        this.pendingWork = new Map();
        // TODO log to influx how much pending work there is. We want to limit the size of a batch
        for (const [id, batch] of pendingWork) {
            this.process(id, batch);
        }
    }
}
//# sourceMappingURL=batchManager.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/blobs.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/blobs.js ***!
  \******************************************************************************/
/*! exports provided: gitHashFile, flatten, readAndParse, buildHierarchy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gitHashFile", function() { return gitHashFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readAndParse", function() { return readAndParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildHierarchy", function() { return buildHierarchy; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sha.js/sha1 */ "./node_modules/sha.js/sha1.js");
/* harmony import */ var sha_js_sha1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

// tslint:disable-next-line:no-submodule-imports

/**
 * Create Hash (Github hashes the string with blob and size)
 * @param file The contents of the file in a buffer
 */
function gitHashFile(file) {
    const size = file.byteLength;
    const filePrefix = "blob " + size.toString() + String.fromCharCode(0);
    /* tslint:disable:no-unsafe-any */
    const engine = new sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__();
    return engine.update(filePrefix)
        .update(file)
        .digest("hex");
}
function flatten(tree, blobMap) {
    const entries = flattenCore("", tree, blobMap);
    return {
        sha: null,
        tree: entries,
        url: null,
    };
}
function readAndParse(storage, sha) {
    return __awaiter(this, void 0, void 0, function* () {
        const encoded = yield storage.read(sha);
        const decoded = Buffer
            .from(encoded, "base64")
            .toString();
        return JSON.parse(decoded);
    });
}
function flattenCore(path, treeEntries, blobMap) {
    const entries = new Array();
    for (const treeEntry of treeEntries) {
        const subPath = `${path}${treeEntry.path}`;
        if (treeEntry.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"].Blob]) {
            const blob = treeEntry.value;
            const buffer = Buffer.from(blob.contents, blob.encoding);
            const sha = gitHashFile(buffer);
            blobMap.set(sha, buffer.toString("base64"));
            const entry = {
                mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"][treeEntry.mode],
                path: subPath,
                sha,
                size: buffer.length,
                type: "blob",
                url: "",
            };
            entries.push(entry);
        }
        else {
            const t = treeEntry.value;
            const entry = {
                mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"][treeEntry.mode],
                path: subPath,
                sha: null,
                size: -1,
                type: "tree",
                url: "",
            };
            entries.push(entry);
            const subTreeEntries = flattenCore(subPath + "/", t.entries, blobMap);
            entries.push(...subTreeEntries);
        }
    }
    return entries;
}
function buildHierarchy(flatTree) {
    if (!flatTree) {
        return null;
    }
    const lookup = {};
    const root = { sha: flatTree.sha, blobs: {}, commits: {}, trees: {} };
    lookup[""] = root;
    for (const entry of flatTree.tree) {
        const lastIndex = entry.path.lastIndexOf("/");
        const entryPathDir = entry.path.slice(0, Math.max(0, lastIndex));
        const entryPathBase = entry.path.slice(lastIndex + 1);
        // The flat output is breadth-first so we can assume we see tree nodes prior to their contents
        const node = lookup[entryPathDir];
        // Add in either the blob or tree
        if (entry.type === "tree") {
            const newTree = { sha: entry.sha, blobs: {}, commits: {}, trees: {} };
            node.trees[entryPathBase] = newTree;
            lookup[entry.path] = newTree;
        }
        else if (entry.type === "blob") {
            node.blobs[entryPathBase] = entry.sha;
        }
        else if (entry.type === "commit") {
            node.commits[entryPathBase] = entry.sha;
        }
    }
    return root;
}
//# sourceMappingURL=blobs.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/heap.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/heap.js ***!
  \*****************************************************************************/
/*! exports provided: NumberComparer, Heap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberComparer", function() { return NumberComparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return Heap; });
// tslint:disable:no-bitwise
// tslint:disable:no-increment-decrement
// tslint:disable:no-parameter-reassignment
const NumberComparer = {
    compare: (a, b) => a - b,
    min: Number.MIN_VALUE,
};
class Heap {
    constructor(comp) {
        this.comp = comp;
        this.L = [{ value: comp.min, position: 0 }];
    }
    peek() {
        return this.L[1];
    }
    get() {
        this.swap(1, this.count());
        const x = this.L.pop();
        this.fixdown(1);
        return x.value;
    }
    add(x) {
        const node = { value: x, position: this.L.length };
        this.L.push(node);
        this.fixup(this.count());
        return node;
    }
    /**
     * Allows for heap to be updated after a node's value changes
     */
    update(node) {
        const k = node.position;
        if (this.isGreaterThanParent(k)) {
            this.fixup(k);
        }
        else {
            this.fixdown(k);
        }
    }
    /**
     * Removes the given node from the heap
     */
    remove(node) {
        // Move the node we want to remove to the end of the array
        const position = node.position;
        this.swap(node.position, this.L.length - 1);
        this.L.splice(this.L.length - 1);
        // Update the swapped node assuming we didn't remove the end of the list
        if (position !== this.L.length) {
            this.update(this.L[position]);
        }
    }
    count() {
        return this.L.length - 1;
    }
    fixup(k) {
        while (this.isGreaterThanParent(k)) {
            const parent = k >> 1;
            this.swap(k, parent);
            k = parent;
        }
    }
    isGreaterThanParent(k) {
        return k > 1 && (this.comp.compare(this.L[k >> 1].value, this.L[k].value) > 0);
    }
    fixdown(k) {
        while ((k << 1) <= this.count()) {
            let j = k << 1;
            if ((j < this.count()) && (this.comp.compare(this.L[j].value, this.L[j + 1].value) > 0)) {
                j++;
            }
            if (this.comp.compare(this.L[k].value, this.L[j].value) <= 0) {
                break;
            }
            this.swap(k, j);
            k = j;
        }
    }
    swap(k, j) {
        const tmp = this.L[k];
        this.L[k] = this.L[j];
        this.L[k].position = k;
        this.L[j] = tmp;
        this.L[j].position = j;
    }
}
//# sourceMappingURL=heap.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/index.js ***!
  \******************************************************************************/
/*! exports provided: BatchManager, gitHashFile, flatten, readAndParse, buildHierarchy, NumberComparer, Heap, Deferred, assertNotRejected, RangeTracker, RateLimitter, safelyParseJSON, isSystemType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _batchManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batchManager */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/batchManager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BatchManager", function() { return _batchManager__WEBPACK_IMPORTED_MODULE_0__["BatchManager"]; });

/* harmony import */ var _blobs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blobs */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/blobs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gitHashFile", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["gitHashFile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["flatten"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "readAndParse", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["readAndParse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildHierarchy", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["buildHierarchy"]; });

/* harmony import */ var _heap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./heap */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/heap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumberComparer", function() { return _heap__WEBPACK_IMPORTED_MODULE_2__["NumberComparer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return _heap__WEBPACK_IMPORTED_MODULE_2__["Heap"]; });

/* harmony import */ var _promises__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./promises */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/promises.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _promises__WEBPACK_IMPORTED_MODULE_3__["Deferred"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertNotRejected", function() { return _promises__WEBPACK_IMPORTED_MODULE_3__["assertNotRejected"]; });

/* harmony import */ var _rangeTracker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rangeTracker */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/rangeTracker.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RangeTracker", function() { return _rangeTracker__WEBPACK_IMPORTED_MODULE_4__["RangeTracker"]; });

/* harmony import */ var _rateLimitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rateLimitter */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/rateLimitter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RateLimitter", function() { return _rateLimitter__WEBPACK_IMPORTED_MODULE_5__["RateLimitter"]; });

/* harmony import */ var _safeParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./safeParser */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/safeParser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "safelyParseJSON", function() { return _safeParser__WEBPACK_IMPORTED_MODULE_6__["safelyParseJSON"]; });

/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSystemType", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__["isSystemType"]; });









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/promises.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/promises.js ***!
  \*********************************************************************************/
/*! exports provided: Deferred, assertNotRejected */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return Deferred; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertNotRejected", function() { return assertNotRejected; });
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);

/**
 * A deferred creates a promise and the ability to resolve or reject it
 */
class Deferred {
    constructor() {
        /* tslint:disable:promise-must-complete */
        this.p = new Promise((resolve, reject) => {
            this.res = resolve;
            this.rej = reject;
        });
    }
    /**
     * Retrieves the underlying promise for the deferred
     */
    get promise() {
        return this.p;
    }
    /**
     * Resolves the promise
     */
    resolve(value) {
        this.res(value);
    }
    /**
     * Rejects the promise
     */
    reject(error) {
        this.rej(error);
    }
}
/**
 * Helper function that asserts that the given promise only resolves
 */
/* tslint:disable:promise-function-async */
function assertNotRejected(promise) {
    // Assert that the given promise only resolves
    promise.catch((error) => {
        assert__WEBPACK_IMPORTED_MODULE_0__["ok"](false);
    });
    return promise;
}
//# sourceMappingURL=promises.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/rangeTracker.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/rangeTracker.js ***!
  \*************************************************************************************/
/*! exports provided: RangeTracker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RangeTracker", function() { return RangeTracker; });
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);

// tslint:disable:no-var-requires
// tslint:disable-next-line:no-submodule-imports
const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/**
 * Helper class that keeps track of the relation between two ranges in a 1:N fashion. Primary
 * is continuous and always maps to a single value in secondary above the base value. The range
 * defines an increasing step function.
 */
class RangeTracker {
    get base() {
        return this.ranges[0].primary;
    }
    get primaryHead() {
        return this.lastPrimary;
    }
    get secondaryHead() {
        return this.lastSecondary;
    }
    constructor(primary, secondary) {
        if (typeof primary === "number") {
            this.ranges = [{ length: 0, primary, secondary }];
            this.lastPrimary = primary;
            this.lastSecondary = secondary;
        }
        else {
            /* tslint:disable:no-unsafe-any */
            this.ranges = cloneDeep(primary.ranges);
            this.lastPrimary = primary.lastPrimary;
            this.lastSecondary = primary.lastSecondary;
        }
    }
    /**
     * Returns a serialized form of the RangeTracker
     */
    serialize() {
        return {
            lastPrimary: this.lastPrimary,
            lastSecondary: this.lastSecondary,
            ranges: cloneDeep(this.ranges),
        };
    }
    // primary is time - secondary is the MSN
    add(primary, secondary) {
        // Both values must continuously be increasing - we won't always track the last value we saw so we do so
        // below to check invariants
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.lastPrimary);
        assert__WEBPACK_IMPORTED_MODULE_0__(secondary >= this.lastSecondary);
        this.lastPrimary = primary;
        this.lastSecondary = secondary;
        // Get quicker references to the head of the range
        const head = this.ranges[this.ranges.length - 1];
        const primaryHead = head.primary + head.length;
        const secondaryHead = head.secondary + head.length;
        // Same secondary indicates this is not a true inflection point - we can ignore it
        if (secondary === secondaryHead) {
            return;
        }
        // New secondary - need to update the ranges
        if (primary === primaryHead) {
            // Technically this code path has us supporting N:N ranges. But we simply overwrite duplicate values to
            // preserve 1:N since you can only lookup from the primary to a secondary
            if (head.length === 0) {
                // No range represented - we can simply update secondary with the overwritten value
                head.secondary = secondary;
            }
            else {
                // The values in the range before this one are valid - but we need to create a new one for this update
                // tslint:disable-next-line:no-increment-decrement
                head.length--;
                this.ranges.push({ length: 0, primary, secondary });
            }
        }
        else {
            if (primaryHead + 1 === primary && secondaryHead + 1 === secondary) {
                // extend the length if both increase by the same amount
                // tslint:disable-next-line:no-increment-decrement
                head.length++;
            }
            else {
                // Insert a new node
                this.ranges.push({ length: 0, primary, secondary });
            }
        }
    }
    get(primary) {
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[0].primary);
        // Find the first range where the starting position is greater than the primary. Our target range is
        // the one before it.
        let index = 1;
        // tslint:disable-next-line:no-increment-decrement
        for (; index < this.ranges.length; index++) {
            if (primary < this.ranges[index].primary) {
                break;
            }
        }
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[index - 1].primary);
        // If the difference is within the stored range use it - otherwise add in the length - 1 as the highest
        // stored secondary value to use.
        const closestRange = this.ranges[index - 1];
        return Math.min(primary - closestRange.primary, closestRange.length) + closestRange.secondary;
    }
    updateBase(primary) {
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[0].primary);
        // Walk the ranges looking for the first one that is greater than the primary. Primary is then within the
        // previous index by definition (since it's less than the current index's primary but greather than the
        // previous index's primary) and we know primary must be greater than the base.
        let index = 1;
        // tslint:disable-next-line:no-increment-decrement
        for (; index < this.ranges.length; index++) {
            if (primary < this.ranges[index].primary) {
                break;
            }
        }
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[index - 1].primary);
        // Update the last range values
        const range = this.ranges[index - 1];
        const delta = primary - range.primary;
        range.secondary = range.secondary + Math.min(delta, range.length);
        range.length = Math.max(range.length - delta, 0);
        range.primary = primary;
        // And remove unnecessary ranges
        this.ranges = index - 1 > 0 ? this.ranges.slice(index - 1) : this.ranges;
        // assert that the lowest value is now the input to this method
        assert__WEBPACK_IMPORTED_MODULE_0__["equal"](primary, this.ranges[0].primary);
    }
}
//# sourceMappingURL=rangeTracker.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/rateLimitter.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/rateLimitter.js ***!
  \*************************************************************************************/
/*! exports provided: RateLimitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RateLimitter", function() { return RateLimitter; });
// A rate limiter to make sure that a client can only request help for one task within a time window.
class RateLimitter {
    constructor(windowMSec) {
        this.windowMSec = windowMSec;
        this.requestMap = new Map();
    }
    filter(clientId, messages) {
        const approvedList = [];
        const currentTime = Date.now();
        for (const message of messages) {
            const key = `${clientId}/${message}`;
            if (!this.requestMap.has(key)) {
                this.requestMap.set(key, currentTime);
                approvedList.push(message);
            }
            else if (this.requestMap.get(key) + this.windowMSec > currentTime) {
                continue;
            }
            else {
                this.requestMap.set(key, currentTime);
                approvedList.push(message);
            }
        }
        return approvedList;
    }
}
//# sourceMappingURL=rateLimitter.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/safeParser.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/safeParser.js ***!
  \***********************************************************************************/
/*! exports provided: safelyParseJSON */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safelyParseJSON", function() { return safelyParseJSON; });
function safelyParseJSON(json) {
    let parsed;
    try {
        parsed = JSON.parse(json);
    }
    catch (e) {
        //
    }
    return parsed;
}
//# sourceMappingURL=safeParser.js.map

/***/ }),

/***/ "./node_modules/@prague/runtime/node_modules/@prague/utils/lib/utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@prague/runtime/node_modules/@prague/utils/lib/utils.js ***!
  \******************************************************************************/
/*! exports provided: isSystemType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSystemType", function() { return isSystemType; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);

function isSystemType(type) {
    return (type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].RemoteHelp ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Integrate ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].ClientJoin ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].ClientLeave ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Fork);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/lib/extension.js":
/*!********************************************************!*\
  !*** ./node_modules/@prague/sequence/lib/extension.js ***!
  \********************************************************/
/*! exports provided: SharedStringExtension, SharedObjectSequenceExtension, SharedNumberSequenceExtension */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedStringExtension", function() { return SharedStringExtension; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedObjectSequenceExtension", function() { return SharedObjectSequenceExtension; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedNumberSequenceExtension", function() { return SharedNumberSequenceExtension; });
/* harmony import */ var _sequence__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sequence */ "./node_modules/@prague/sequence/lib/sequence.js");
/* harmony import */ var _sharedString__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sharedString */ "./node_modules/@prague/sequence/lib/sharedString.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class SharedStringExtension {
    constructor() {
        this.type = SharedStringExtension.Type;
    }
    load(document, id, minimumSequenceNumber, services, headerOrigin) {
        return __awaiter(this, void 0, void 0, function* () {
            const sharedString = new _sharedString__WEBPACK_IMPORTED_MODULE_1__["SharedString"](document, id, services);
            yield sharedString.load(minimumSequenceNumber, headerOrigin, services);
            return sharedString;
        });
    }
    create(document, id) {
        const sharedString = new _sharedString__WEBPACK_IMPORTED_MODULE_1__["SharedString"](document, id);
        sharedString.initializeLocal();
        return sharedString;
    }
}
// TODO rename back to https://graph.microsoft.com/types/mergeTree/string once paparazzi is able to dynamically
// load code
SharedStringExtension.Type = "https://graph.microsoft.com/types/mergeTree";
class SharedObjectSequenceExtension {
    constructor() {
        this.type = SharedObjectSequenceExtension.Type;
    }
    load(document, id, minimumSequenceNumber, services, headerOrigin) {
        return __awaiter(this, void 0, void 0, function* () {
            const sharedSeq = new _sequence__WEBPACK_IMPORTED_MODULE_0__["SharedObjectSequence"](document, id, services);
            yield sharedSeq.load(minimumSequenceNumber, headerOrigin, services);
            return sharedSeq;
        });
    }
    create(document, id) {
        const sharedString = new _sequence__WEBPACK_IMPORTED_MODULE_0__["SharedObjectSequence"](document, id);
        sharedString.initializeLocal();
        return sharedString;
    }
}
SharedObjectSequenceExtension.Type = "https://graph.microsoft.com/types/mergeTree/object-sequence";
class SharedNumberSequenceExtension {
    constructor() {
        this.type = SharedNumberSequenceExtension.Type;
    }
    load(document, id, minimumSequenceNumber, services, headerOrigin) {
        return __awaiter(this, void 0, void 0, function* () {
            const sharedSeq = new _sequence__WEBPACK_IMPORTED_MODULE_0__["SharedNumberSequence"](document, id, services);
            yield sharedSeq.load(minimumSequenceNumber, headerOrigin, services);
            return sharedSeq;
        });
    }
    create(document, id) {
        const sharedString = new _sequence__WEBPACK_IMPORTED_MODULE_0__["SharedNumberSequence"](document, id);
        sharedString.initializeLocal();
        return sharedString;
    }
}
SharedNumberSequenceExtension.Type = "https://graph.microsoft.com/types/mergeTree/number-sequence";
//# sourceMappingURL=extension.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@prague/sequence/lib/index.js ***!
  \****************************************************/
/*! exports provided: SharedStringInterval, Interval, SharedIntervalCollection, SharedIntervalCollectionView, SharedIntervalCollectionValueType, SharedStringIntervalCollectionValueType, SharedString, SegmentSequence, SharedSequence, SharedObjectSequence, SharedNumberSequence, SharedStringExtension, SharedObjectSequenceExtension, SharedNumberSequenceExtension, SequenceDeltaEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _intervalCollection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./intervalCollection */ "./node_modules/@prague/sequence/lib/intervalCollection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedStringInterval", function() { return _intervalCollection__WEBPACK_IMPORTED_MODULE_0__["SharedStringInterval"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Interval", function() { return _intervalCollection__WEBPACK_IMPORTED_MODULE_0__["Interval"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedIntervalCollection", function() { return _intervalCollection__WEBPACK_IMPORTED_MODULE_0__["SharedIntervalCollection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedIntervalCollectionView", function() { return _intervalCollection__WEBPACK_IMPORTED_MODULE_0__["SharedIntervalCollectionView"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedIntervalCollectionValueType", function() { return _intervalCollection__WEBPACK_IMPORTED_MODULE_0__["SharedIntervalCollectionValueType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedStringIntervalCollectionValueType", function() { return _intervalCollection__WEBPACK_IMPORTED_MODULE_0__["SharedStringIntervalCollectionValueType"]; });

/* harmony import */ var _sharedString__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sharedString */ "./node_modules/@prague/sequence/lib/sharedString.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedString", function() { return _sharedString__WEBPACK_IMPORTED_MODULE_1__["SharedString"]; });

/* harmony import */ var _sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sequence */ "./node_modules/@prague/sequence/lib/sequence.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SegmentSequence", function() { return _sequence__WEBPACK_IMPORTED_MODULE_2__["SegmentSequence"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedSequence", function() { return _sequence__WEBPACK_IMPORTED_MODULE_2__["SharedSequence"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedObjectSequence", function() { return _sequence__WEBPACK_IMPORTED_MODULE_2__["SharedObjectSequence"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedNumberSequence", function() { return _sequence__WEBPACK_IMPORTED_MODULE_2__["SharedNumberSequence"]; });

/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/sequence/lib/extension.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedStringExtension", function() { return _extension__WEBPACK_IMPORTED_MODULE_3__["SharedStringExtension"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedObjectSequenceExtension", function() { return _extension__WEBPACK_IMPORTED_MODULE_3__["SharedObjectSequenceExtension"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharedNumberSequenceExtension", function() { return _extension__WEBPACK_IMPORTED_MODULE_3__["SharedNumberSequenceExtension"]; });

/* harmony import */ var _sequenceDeltaEvent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sequenceDeltaEvent */ "./node_modules/@prague/sequence/lib/sequenceDeltaEvent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SequenceDeltaEvent", function() { return _sequenceDeltaEvent__WEBPACK_IMPORTED_MODULE_4__["SequenceDeltaEvent"]; });






//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/lib/intervalCollection.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@prague/sequence/lib/intervalCollection.js ***!
  \*****************************************************************/
/*! exports provided: Interval, SharedStringInterval, defaultIntervalConflictResolver, createIntervalIndex, LocalIntervalCollection, SharedStringIntervalCollectionValueType, SharedIntervalCollectionValueType, SharedIntervalCollectionView, SharedIntervalCollection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interval", function() { return Interval; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedStringInterval", function() { return SharedStringInterval; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultIntervalConflictResolver", function() { return defaultIntervalConflictResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createIntervalIndex", function() { return createIntervalIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocalIntervalCollection", function() { return LocalIntervalCollection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedStringIntervalCollectionValueType", function() { return SharedStringIntervalCollectionValueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedIntervalCollectionValueType", function() { return SharedIntervalCollectionValueType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedIntervalCollectionView", function() { return SharedIntervalCollectionView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedIntervalCollection", function() { return SharedIntervalCollection; });
/* harmony import */ var _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/merge-tree */ "./node_modules/@prague/merge-tree/lib/index.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class Interval {
    constructor(start, end, props) {
        this.start = start;
        this.end = end;
        if (props) {
            this.addProperties(props);
        }
    }
    getAdditionalPropertySets() {
        return this.auxProps;
    }
    addPropertySet(props) {
        if (this.auxProps === undefined) {
            this.auxProps = [];
        }
        this.auxProps.push(props);
    }
    serialize(client) {
        let seq = 0;
        if (client) {
            seq = client.getCurrentSeq();
        }
        /* tslint:disable:no-object-literal-type-assertion */
        const serializedInterval = {
            end: this.end,
            intervalType: 0,
            sequenceNumber: seq,
            start: this.start,
        };
        if (this.properties) {
            serializedInterval.properties = this.properties;
        }
        return serializedInterval;
    }
    clone() {
        return new Interval(this.start, this.end, this.properties);
    }
    compare(b) {
        const startResult = this.start - b.start;
        if (startResult === 0) {
            return (this.end - b.end);
        }
        else {
            return startResult;
        }
    }
    overlaps(b) {
        const result = (this.start < b.end) &&
            (this.end >= b.start);
        return result;
    }
    union(b) {
        return new Interval(Math.min(this.start, b.start), Math.max(this.end, b.end), this.properties);
    }
    getProperties() {
        return this.properties;
    }
    addProperties(newProps, op) {
        this.properties = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["addProperties"](this.properties, newProps, op);
    }
}
class SharedStringInterval {
    constructor(start, end, intervalType, props) {
        this.start = start;
        this.end = end;
        this.intervalType = intervalType;
        if (props) {
            this.addProperties(props);
        }
    }
    serialize(client) {
        const startPosition = this.start.toPosition(client.mergeTree, client.getCurrentSeq(), client.getClientId());
        const endPosition = this.end.toPosition(client.mergeTree, client.getCurrentSeq(), client.getClientId());
        const serializedInterval = {
            end: endPosition,
            intervalType: this.intervalType,
            sequenceNumber: client.getCurrentSeq(),
            start: startPosition,
        };
        if (this.properties) {
            serializedInterval.properties = this.properties;
        }
        return serializedInterval;
    }
    clone() {
        return new SharedStringInterval(this.start, this.end, this.intervalType);
    }
    compare(b) {
        const startResult = this.start.compare(b.start);
        if (startResult === 0) {
            return (this.end.compare(b.end));
        }
        else {
            return startResult;
        }
    }
    overlaps(b) {
        const result = (this.start.compare(b.end) < 0) &&
            (this.end.compare(b.start) >= 0);
        if (this.checkMergeTree) {
            this.checkOverlaps(b, result);
        }
        return result;
    }
    union(b) {
        return new SharedStringInterval(this.start.min(b.start), this.end.max(b.end), this.intervalType);
    }
    addProperties(newProps, op) {
        this.properties = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["addProperties"](this.properties, newProps, op);
    }
    overlapsPos(mergeTree, bstart, bend) {
        const startPos = this.start.toPosition(mergeTree, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], mergeTree.collabWindow.clientId);
        const endPos = this.start.toPosition(mergeTree, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], mergeTree.collabWindow.clientId);
        return (endPos > bstart) && (startPos < bend);
    }
    checkOverlaps(b, result) {
        const astart = this.start.toPosition(this.checkMergeTree, this.checkMergeTree.collabWindow.currentSeq, this.checkMergeTree.collabWindow.clientId);
        const bstart = b.start.toPosition(this.checkMergeTree, this.checkMergeTree.collabWindow.currentSeq, this.checkMergeTree.collabWindow.clientId);
        const aend = this.end.toPosition(this.checkMergeTree, this.checkMergeTree.collabWindow.currentSeq, this.checkMergeTree.collabWindow.clientId);
        const bend = b.end.toPosition(this.checkMergeTree, this.checkMergeTree.collabWindow.currentSeq, this.checkMergeTree.collabWindow.clientId);
        const checkResult = ((astart < bend) && (bstart < aend));
        if (checkResult !== result) {
            // tslint:disable-next-line:max-line-length
            console.log(`check mismatch: res ${result} ${this.start.segment === b.end.segment} ${b.start.segment === this.end.segment}`);
            console.log(`as ${astart} ae ${aend} bs ${bstart} be ${bend}`);
            console.log(`as ${_prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ordinalToArray"](this.start.segment.ordinal)}@${this.start.offset}`);
            console.log(`ae ${_prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ordinalToArray"](this.end.segment.ordinal)}@${this.end.offset}`);
            console.log(`bs ${_prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ordinalToArray"](b.start.segment.ordinal)}@${b.start.offset}`);
            console.log(`be ${_prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ordinalToArray"](b.end.segment.ordinal)}@${b.end.offset}`);
            console.log(this.checkMergeTree.nodeToString(b.start.segment.parent, ""));
        }
    }
}
function createPositionReference(client, pos, refType, refSeq = client.getCurrentSeq(), clientId = client.getClientId()) {
    const segoff = client.mergeTree.getContainingSegment(pos, refSeq, client.getClientId());
    if (segoff && segoff.segment) {
        const baseSegment = segoff.segment;
        const lref = new _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["LocalReference"](baseSegment, segoff.offset, refType);
        if (refType !== _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ReferenceType"].Transient) {
            client.mergeTree.addLocalReference(lref);
        }
        return lref;
    }
}
function createSharedStringInterval(label, start, end, client, intervalType) {
    let beginRefType = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ReferenceType"].RangeBegin;
    let endRefType = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ReferenceType"].RangeEnd;
    if (intervalType === _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["IntervalType"].Nest) {
        beginRefType = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ReferenceType"].NestBegin;
        endRefType = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ReferenceType"].NestEnd;
    }
    else if (intervalType === _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["IntervalType"].Transient) {
        beginRefType = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ReferenceType"].Transient;
        endRefType = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["ReferenceType"].Transient;
    }
    const startLref = createPositionReference(client, start, beginRefType);
    const endLref = createPositionReference(client, end, endRefType);
    if (startLref && endLref) {
        startLref.pairedRef = endLref;
        endLref.pairedRef = startLref;
        const rangeProp = {
            [_prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["reservedRangeLabelsKey"]]: [label],
        };
        startLref.addProperties(rangeProp);
        endLref.addProperties(rangeProp);
        const ival = new SharedStringInterval(startLref, endLref, intervalType, rangeProp);
        // ival.checkMergeTree = sharedString.client.mergeTree;
        return ival;
    }
    else {
        return null;
    }
}
function defaultIntervalConflictResolver(a, b) {
    a.addPropertySet(b.properties);
    return a;
}
function createIntervalIndex(conflict) {
    const helpers = {
        compareEnds: compareIntervalEnds,
        create: createInterval,
    };
    const lc = new LocalIntervalCollection(undefined, "", helpers);
    if (conflict) {
        lc.addConflictResolver(conflict);
    }
    else {
        lc.addConflictResolver(defaultIntervalConflictResolver);
    }
    return lc;
}
class LocalIntervalCollection {
    constructor(client, label, helpers) {
        this.client = client;
        this.label = label;
        this.helpers = helpers;
        this.intervalTree = new _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["IntervalTree"]();
        this.endIntervalTree =
            new _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["RedBlackTree"](helpers.compareEnds);
    }
    addConflictResolver(conflictResolver) {
        this.conflictResolver = conflictResolver;
        this.endConflictResolver =
            (key, currentKey) => {
                const ival = this.conflictResolver(key, currentKey);
                return {
                    data: ival,
                    key: ival,
                };
            };
    }
    map(fn) {
        this.intervalTree.map(fn);
    }
    findOverlappingIntervals(startPosition, endPosition) {
        if (!this.intervalTree.intervals.isEmpty()) {
            const transientInterval = this.helpers.create("transient", startPosition, endPosition, this.client, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["IntervalType"].Transient);
            const overlappingIntervalNodes = this.intervalTree.match(transientInterval);
            return overlappingIntervalNodes.map((node) => node.key);
        }
        else {
            return [];
        }
    }
    previousInterval(pos) {
        const transientInterval = this.helpers.create("transient", pos, pos, this.client, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["IntervalType"].Transient);
        const rbNode = this.endIntervalTree.floor(transientInterval);
        if (rbNode) {
            return rbNode.data;
        }
    }
    nextInterval(pos) {
        const transientInterval = this.helpers.create("transient", pos, pos, this.client, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["IntervalType"].Transient);
        const rbNode = this.endIntervalTree.ceil(transientInterval);
        if (rbNode) {
            return rbNode.data;
        }
    }
    removeInterval(startPosition, endPosition) {
        const transientInterval = this.helpers.create("transient", startPosition, endPosition, this.client, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["IntervalType"].Transient);
        this.intervalTree.remove(transientInterval);
        this.endIntervalTree.remove(transientInterval);
    }
    createInterval(start, end, intervalType) {
        return this.helpers.create(this.label, start, end, this.client, intervalType);
    }
    // TODO: remove interval, handle duplicate intervals
    addInterval(start, end, intervalType, props) {
        const interval = this.createInterval(start, end, intervalType);
        if (interval) {
            interval.addProperties(props);
            if (this.label && (this.label.length > 0)) {
                interval.properties[_prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["reservedRangeLabelsKey"]] = [this.label];
            }
            this.intervalTree.put(interval, this.conflictResolver);
            this.endIntervalTree.put(interval, interval, this.endConflictResolver);
        }
        return interval;
    }
    serialize() {
        const client = this.client;
        const intervals = this.intervalTree.intervals.keys();
        // tslint:disable-next-line
        return intervals.map((interval) => interval.serialize(client));
    }
}
function compareSharedStringIntervalEnds(a, b) {
    return a.end.compare(b.end);
}
class SharedStringIntervalCollectionFactory {
    load(emitter, raw) {
        const helpers = {
            compareEnds: compareSharedStringIntervalEnds,
            create: createSharedStringInterval,
        };
        return new SharedIntervalCollection(helpers, true, emitter, raw || []);
    }
    store(value) {
        return value.serializeInternal();
    }
}
class SharedStringIntervalCollectionValueType {
    // tslint:enable:variable-name
    constructor() {
        this._factory = new SharedStringIntervalCollectionFactory();
        this._ops = new Map([[
                "add",
                {
                    /* tslint:disable:promise-function-async */
                    prepare: (value, params, local, op) => {
                        // Local ops were applied when the message was created
                        if (local) {
                            return;
                        }
                        /* tslint:disable:no-unsafe-any */
                        return value.prepareAddInternal(params, local, op);
                    },
                    process: (value, params, context, local, op) => {
                        // Local ops were applied when the message was created
                        if (local) {
                            return;
                        }
                        value.addInternal(params, context, local, op);
                    },
                },
            ]]);
    }
    get name() {
        return SharedStringIntervalCollectionValueType.Name;
    }
    get factory() {
        return this._factory;
    }
    get ops() {
        return this._ops;
    }
}
SharedStringIntervalCollectionValueType.Name = "sharedStringIntervalCollection";
function compareIntervalEnds(a, b) {
    return a.end - b.end;
}
function createInterval(label, start, end, client) {
    let rangeProp;
    if (label && (label.length > 0)) {
        rangeProp = {
            [_prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["reservedRangeLabelsKey"]]: [label],
        };
    }
    return new Interval(start, end, rangeProp);
}
class SharedIntervalCollectionFactory {
    load(emitter, raw) {
        const helpers = {
            compareEnds: compareIntervalEnds,
            create: createInterval,
        };
        const collection = new SharedIntervalCollection(helpers, false, emitter, raw || []);
        collection.attach(undefined, "");
        return collection;
    }
    store(value) {
        return value.serializeInternal();
    }
}
class SharedIntervalCollectionValueType {
    // tslint:enable:variable-name
    constructor() {
        this._factory = new SharedIntervalCollectionFactory();
        this._ops = new Map([[
                "add",
                {
                    prepare: (value, params, local, op) => {
                        // Local ops were applied when the message was created
                        if (local) {
                            return;
                        }
                        return value.prepareAddInternal(params, local, op);
                    },
                    process: (value, params, context, local, op) => {
                        // Local ops were applied when the message was created
                        if (local) {
                            return;
                        }
                        value.addInternal(params, context, local, op);
                    },
                },
            ]]);
    }
    get name() {
        return SharedIntervalCollectionValueType.Name;
    }
    get factory() {
        return this._factory;
    }
    get ops() {
        return this._ops;
    }
}
SharedIntervalCollectionValueType.Name = "sharedIntervalCollection";
class SharedIntervalCollectionView extends events__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"] {
    constructor(client, savedSerializedIntervals, label, helpers, emitter) {
        super();
        this.client = client;
        this.emitter = emitter;
        this.attachingP = Promise.resolve();
        // Instantiate the local interval collection based on the saved intervals
        this.localCollection = new LocalIntervalCollection(client, label, helpers);
        if (savedSerializedIntervals) {
            for (const serializedInterval of savedSerializedIntervals) {
                this.localCollection.addInterval(serializedInterval.start, serializedInterval.end, serializedInterval.intervalType, serializedInterval.properties);
            }
        }
    }
    attachDeserializer(onDeserialize, onPrepareDeserialize) {
        return __awaiter(this, void 0, void 0, function* () {
            this.attachingP = this.attachDeserializerCore(onDeserialize, onPrepareDeserialize);
            return this.attachingP;
        });
    }
    findOverlappingIntervals(startPosition, endPosition) {
        return this.localCollection.findOverlappingIntervals(startPosition, endPosition);
    }
    map(fn) {
        this.localCollection.map(fn);
    }
    previousInterval(pos) {
        return this.localCollection.previousInterval(pos);
    }
    nextInterval(pos) {
        return this.localCollection.nextInterval(pos);
    }
    /* tslint:disable:no-unnecessary-override */
    on(event, listener) {
        return super.on(event, listener);
    }
    add(start, end, intervalType, props) {
        let seq = 0;
        if (this.client) {
            seq = this.client.getCurrentSeq();
        }
        const serializedInterval = {
            end,
            intervalType,
            properties: props,
            sequenceNumber: seq,
            start,
        };
        this.addInternal(serializedInterval, null, true, null);
    }
    // TODO: error cases
    addInternal(serializedInterval, context, local, op) {
        const interval = this.localCollection.addInterval(serializedInterval.start, serializedInterval.end, serializedInterval.intervalType, serializedInterval.properties);
        if (interval) {
            // Local ops get submitted to the server. Remote ops have the deserializer run.
            if (local) {
                this.emitter.emit("add", serializedInterval);
            }
            else {
                if (this.onDeserialize) {
                    this.onDeserialize(interval, context);
                }
            }
        }
        this.emit("addInterval", interval, local, op);
        return this;
    }
    prepareAdd(interval, local, message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.attachingP;
            return this.onPrepareDeserialize ? this.onPrepareDeserialize(interval.properties) : null;
        });
    }
    serializeInternal() {
        return this.localCollection.serialize();
    }
    attachDeserializerCore(onDeserialize, onPrepareDeserialize) {
        return __awaiter(this, void 0, void 0, function* () {
            // If no deserializer is specified can skip all processing work
            if (!onDeserialize && !onPrepareDeserialize) {
                return;
            }
            // Start by storing the callbacks so that any subsequent modifications make use of them
            this.onDeserialize = onDeserialize;
            this.onPrepareDeserialize = onPrepareDeserialize;
            // Trigger the async prepare work across all values in the collection
            const preparedIntervalsP = [];
            this.localCollection.map((interval) => {
                const preparedIntervalP = onPrepareDeserialize(interval.properties)
                    .then((context) => ({ context, interval }));
                preparedIntervalsP.push(preparedIntervalP);
            });
            const preparedIntervals = yield Promise.all(preparedIntervalsP);
            for (const preparedInterval of preparedIntervals) {
                this.onDeserialize(preparedInterval.interval, preparedInterval.context);
            }
        });
    }
}
class SharedIntervalCollection {
    constructor(helpers, requiresClient, emitter, serializedIntervals) {
        this.helpers = helpers;
        this.requiresClient = requiresClient;
        this.emitter = emitter;
        this.savedSerializedIntervals = serializedIntervals;
    }
    get attached() {
        return !!this.view;
    }
    attach(client, label) {
        if (this.view) {
            throw new Error("Only supports one SharedString attach");
        }
        if ((client === undefined) && (this.requiresClient)) {
            throw new Error("Client required for this collection");
        }
        this.view = new SharedIntervalCollectionView(client, this.savedSerializedIntervals, label, this.helpers, this.emitter);
        this.savedSerializedIntervals = undefined;
    }
    add(startPosition, endPosition, intervalType, props) {
        if (!this.view) {
            return Promise.reject("attach must be called prior to adding intervals");
        }
        this.view.add(startPosition, endPosition, intervalType, props);
    }
    getView(onDeserialize, onPrepareDeserialize) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.view) {
                return Promise.reject("attachSharedString must be called prior to retrieving the view");
            }
            // Attach custom deserializers if specified
            if (onDeserialize || onPrepareDeserialize) {
                yield this.view.attachDeserializer(onDeserialize, onPrepareDeserialize);
            }
            return this.view;
        });
    }
    prepareAddInternal(interval, local, message) {
        if (!this.view) {
            return Promise.reject("attachSharedString must be called");
        }
        return this.view.prepareAdd(interval, local, message);
    }
    addInternal(serializedInterval, context, local, op) {
        if (!this.view) {
            throw new Error("attachSharedString must be called");
        }
        return this.view.addInternal(serializedInterval, context, local, op);
    }
    serializeInternal() {
        if (!this.view) {
            throw new Error("attachSharedString must be called");
        }
        return this.view.serializeInternal();
    }
}
//# sourceMappingURL=intervalCollection.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/lib/sequence.js":
/*!*******************************************************!*\
  !*** ./node_modules/@prague/sequence/lib/sequence.js ***!
  \*******************************************************/
/*! exports provided: SegmentSequence, SharedSequence, SharedObjectSequence, SharedNumberSequence */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SegmentSequence", function() { return SegmentSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedSequence", function() { return SharedSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedObjectSequence", function() { return SharedObjectSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedNumberSequence", function() { return SharedNumberSequence; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _prague_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prague/map */ "./node_modules/@prague/map/lib/index.js");
/* harmony import */ var _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @prague/merge-tree */ "./node_modules/@prague/merge-tree/lib/index.js");
/* harmony import */ var _prague_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @prague/utils */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/index.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid/v4 */ "./node_modules/uuid/v4.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/sequence/lib/extension.js");
/* harmony import */ var _intervalCollection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./intervalCollection */ "./node_modules/@prague/sequence/lib/intervalCollection.js");
/* harmony import */ var _sequenceDeltaEvent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sequenceDeltaEvent */ "./node_modules/@prague/sequence/lib/sequenceDeltaEvent.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// tslint:disable:whitespace align no-bitwise





// tslint:disable-next-line:no-submodule-imports no-var-requires no-require-imports
const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
// tslint:disable-next-line:no-submodule-imports




class SegmentSequence extends _prague_map__WEBPACK_IMPORTED_MODULE_1__["SharedMap"] {
    constructor(document, id, extensionType, services) {
        super(id, document, extensionType);
        this.id = id;
        this.isLoaded = false;
        this.collabStarted = false;
        this.pendingMinSequenceNumber = 0;
        // Deferred that triggers once the object is loaded
        this.loadedDeferred = new _prague_utils__WEBPACK_IMPORTED_MODULE_3__["Deferred"]();
        this.messagesSinceMSNChange = new Array();
        /* tslint:disable:no-unsafe-any */
        this.client = new _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["Client"]("", document.options);
        super.on("newListener", (event) => {
            switch (event) {
                case "sequenceDelta":
                    if (!this.client.mergeTree.mergeTreeDeltaCallback) {
                        this.client.mergeTree.mergeTreeDeltaCallback = (opArgs, deltaArgs) => {
                            this.emit("sequenceDelta", this, new _sequenceDeltaEvent__WEBPACK_IMPORTED_MODULE_8__["SequenceDeltaEvent"](opArgs, this.client, deltaArgs));
                        };
                    }
                    break;
                default:
            }
        });
        super.on("removeListener", (event) => {
            switch (event) {
                case "sequenceDelta":
                    if (super.listenerCount(event) === 0) {
                        this.client.mergeTree.mergeTreeDeltaCallback = undefined;
                    }
                    break;
                default:
            }
        });
    }
    get loaded() {
        return this.loadedDeferred.promise;
    }
    // tslint:disable-next-line:no-unnecessary-override
    on(event, listener) {
        return super.on(event, listener);
    }
    removeRange(start, end) {
        const removeMessage = {
            pos1: start,
            pos2: end,
            type: 1 /* REMOVE */,
        };
        this.client.removeSegmentLocal(start, end, { op: removeMessage });
        this.submitIfAttached(removeMessage);
    }
    cut(register, start, end) {
        const removeMessage = {
            pos1: start,
            pos2: end,
            register,
            type: 1 /* REMOVE */,
        };
        this.client.copy(start, end, register, this.client.getCurrentSeq(), this.client.getClientId(), this.client.longClientId);
        this.client.removeSegmentLocal(start, end, { op: removeMessage });
        this.submitIfAttached(removeMessage);
    }
    paste(register, pos) {
        const insertMessage = {
            pos1: pos,
            register,
            type: 0 /* INSERT */,
        };
        // tslint:disable-next-line:no-parameter-reassignment
        pos = this.client.pasteLocal(register, pos, { op: insertMessage });
        this.submitIfAttached(insertMessage);
        return pos;
    }
    copy(register, start, end) {
        const insertMessage = {
            pos1: start,
            pos2: end,
            register,
            type: 0 /* INSERT */,
        };
        this.client.copy(start, end, register, this.client.getCurrentSeq(), this.client.getClientId(), this.client.longClientId);
        this.submitIfAttached(insertMessage);
    }
    groupOperation(groupOp) {
        const segmentGroup = this.client.localTransaction(groupOp);
        this.submitIfAttached(groupOp);
        return segmentGroup;
    }
    annotateRange(props, start, end, op) {
        const annotateMessage = {
            pos1: start,
            pos2: end,
            props,
            type: 2 /* ANNOTATE */,
        };
        if (op) {
            annotateMessage.combiningOp = op;
        }
        this.client.annotateSegmentLocal(props, start, end, op, { op: annotateMessage });
        this.submitIfAttached(annotateMessage);
    }
    getPropertiesAtPosition(pos) {
        return this.client.getPropertiesAtPosition(pos);
    }
    getRangeExtentsOfPosition(pos) {
        return this.client.getRangeExtentsOfPosition(pos);
    }
    setLocalMinSeq(lmseq) {
        this.client.mergeTree.updateLocalMinSeq(lmseq);
    }
    createPositionReference(pos, refType, refSeq = this.client.getCurrentSeq(), clientId = this.client.getClientId()) {
        const segoff = this.client.mergeTree.getContainingSegment(pos, refSeq, this.client.getClientId());
        if (segoff && segoff.segment) {
            const lref = new _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["LocalReference"](segoff.segment, segoff.offset, refType);
            if (refType !== _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["ReferenceType"].Transient) {
                this.client.mergeTree.addLocalReference(lref);
            }
            return lref;
        }
    }
    localRefToPos(localRef) {
        if (localRef.segment) {
            return localRef.offset + this.client.mergeTree.getOffset(localRef.segment, this.client.getCurrentSeq(), this.client.getClientId());
        }
        else {
            return -1;
        }
    }
    getIntervalCollections() {
        return this.intervalCollections;
    }
    // TODO: fix race condition on creation by putting type on every operation
    getSharedIntervalCollection(label) {
        if (!this.intervalCollections.has(label)) {
            this.intervalCollections.set(label, undefined, _intervalCollection__WEBPACK_IMPORTED_MODULE_7__["SharedStringIntervalCollectionValueType"].Name);
        }
        const sharedCollection = this.intervalCollections.get(label);
        return sharedCollection;
    }
    sendNACKed() {
        const orderedSegments = [];
        while (!this.client.mergeTree.pendingSegments.empty()) {
            const NACKedSegmentGroup = this.client.mergeTree.pendingSegments.dequeue();
            for (const segment of NACKedSegmentGroup.segments) {
                orderedSegments.push(segment);
            }
        }
        orderedSegments.sort((a, b) => {
            if (a === b) {
                return 0;
            }
            else if (a.ordinal < b.ordinal) {
                return -1;
            }
            else {
                return 1;
            }
        });
        /* tslint:disable:no-object-literal-type-assertion */
        const segmentGroup = {
            segments: [],
        };
        const opList = [];
        let prevSeg;
        for (const segment of orderedSegments) {
            if (prevSeg !== segment) {
                segment.segmentGroups.clear();
                segment.segmentGroups.enqueue(segmentGroup);
                this.client.segmentToOps(segment, opList);
                prevSeg = segment;
            }
        }
        const groupOp = {
            ops: opList,
            type: 3 /* GROUP */,
        };
        if (groupOp.ops.length > 0) {
            this.client.mergeTree.pendingSegments.enqueue(segmentGroup);
            this.submitIfAttached(groupOp);
        }
    }
    loadContent(minimumSequenceNumber, headerOrigin, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const header = yield storage.read("header");
            return this.initialize(minimumSequenceNumber, header, true, headerOrigin, storage);
        });
    }
    initializeContent() {
        const intervalCollections = this.runtime.createChannel(uuid_v4__WEBPACK_IMPORTED_MODULE_5__(), _prague_map__WEBPACK_IMPORTED_MODULE_1__["MapExtension"].Type);
        this.set("intervalCollections", intervalCollections);
        // TODO will want to update initialize to operate synchronously
        this.initialize(0, null, false, this.id, null)
            .catch((error) => {
            console.error("initializeContent", error);
        });
    }
    snapshotContent() {
        // debug(`Transforming up to ${this.deltaManager.minimumSequenceNumber}`);
        const transformedMessages = [];
        for (const message of this.messagesSinceMSNChange) {
            transformedMessages.push(this.transform(message, this.runtime.deltaManager.minimumSequenceNumber));
        }
        this.client.mergeTree.commitGlobalMin();
        const snap = new _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["Snapshot"](this.client.mergeTree);
        snap.extractSync();
        const mtSnap = snap.emit();
        mtSnap.entries.push({
            mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"].File,
            path: "tardis",
            type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"].Blob],
            value: {
                contents: JSON.stringify(transformedMessages),
                encoding: "utf-8",
            },
        });
        return mtSnap;
    }
    /* tslint:disable:promise-function-async */
    prepareContent() {
        return this.loadedDeferred.promise;
    }
    processContent(message) {
        this.messagesSinceMSNChange.push(message);
        this.processMessage(message);
    }
    processMinSequenceNumberChangedContent(value) {
        let index = 0;
        for (; index < this.messagesSinceMSNChange.length; index++) {
            if (this.messagesSinceMSNChange[index].sequenceNumber > value) {
                break;
            }
        }
        if (index !== 0) {
            this.messagesSinceMSNChange = this.messagesSinceMSNChange.slice(index);
        }
        // Apply directly once loaded - otherwise track so we can update later
        if (this.isLoaded) {
            this.client.updateMinSeq(value);
        }
        else {
            this.pendingMinSequenceNumber = value;
        }
    }
    attachContent() {
        this.client.startCollaboration(this.runtime.clientId, 0);
        this.collabStarted = true;
    }
    onConnectContent(pending) {
        // Update merge tree collaboration information with new client ID and then resend pending ops
        if (this.collabStarted) {
            this.client.updateCollaboration(this.runtime.clientId);
        }
        this.sendNACKed();
        return;
    }
    readyContent() {
        return this.loaded;
    }
    submitIfAttached(message) {
        if (this.isLocal()) {
            return;
        }
        this.submitLocalMessage(message);
    }
    processMessage(message) {
        this.client.applyMsg(message);
        if (this.client.mergeTree.minSeqPending) {
            this.client.mergeTree.notifyMinSeqListeners();
        }
    }
    transform(originalMessage, sequenceNumber) {
        let message = originalMessage;
        // Allow the distributed data types to perform custom transformations
        if (message.referenceSequenceNumber < sequenceNumber) {
            // Make a copy of original message since we will be modifying in place
            message = cloneDeep(message);
            message.contents = this.client.transform(message.contents, message.referenceSequenceNumber, sequenceNumber);
            message.referenceSequenceNumber = sequenceNumber;
        }
        return message;
    }
    loadHeader(minimumSequenceNumber, header, shared, originBranch) {
        if (!header) {
            return;
        }
        const chunk = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["Snapshot"].processChunk(header);
        const segs = this.segmentsFromSpecs(chunk.segmentTexts);
        this.client.mergeTree.reloadFromSegments(segs);
        if (shared) {
            // TODO currently only assumes two levels of branching
            const branchId = originBranch === this.runtime.documentId ? 0 : 1;
            this.collabStarted = true;
            this.client.startCollaboration(this.runtime.clientId, minimumSequenceNumber, branchId);
        }
    }
    loadBody(header, originBranch, services) {
        return __awaiter(this, void 0, void 0, function* () {
            // If loading from a snapshot load in the body and tardis messages
            if (header) {
                const [chunk, rawMessages] = yield Promise.all([
                    yield _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["Snapshot"].loadChunk(services, "body"),
                    services.read("tardis"),
                ]);
                for (const segSpec of chunk.segmentTexts) {
                    this.appendSegment(segSpec);
                }
                const messages = JSON.parse(Buffer.from(rawMessages, "base64").toString());
                if (originBranch !== this.runtime.documentId) {
                    for (const message of messages) {
                        // Append branch information when transforming for the case of messages stashed with the snapshot
                        message.origin = {
                            id: originBranch,
                            minimumSequenceNumber: message.minimumSequenceNumber,
                            sequenceNumber: message.sequenceNumber,
                        };
                    }
                }
                // Apply all pending messages
                for (const message of messages) {
                    this.processMessage(message);
                }
            }
            // And initialize the interval collections
            this.initializeIntervalCollections();
        });
    }
    initialize(minimumSequenceNumber, header, shared, originBranch, services) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!header) {
                assert__WEBPACK_IMPORTED_MODULE_4__["equal"](minimumSequenceNumber, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["Snapshot"].EmptyChunk.chunkSequenceNumber);
            }
            this.loadHeader(minimumSequenceNumber, header, shared, originBranch);
            this.loadBody(header, originBranch, services)
                .then(() => {
                this.loadFinished();
            }, (error) => {
                this.loadFinished(error);
            });
        });
    }
    initializeIntervalCollections() {
        this.intervalCollections = this.get("intervalCollections");
        // Listen and initialize new SharedIntervalCollections
        this.intervalCollections.on("valueChanged", (ev) => {
            const intervalCollection = this.intervalCollections.get(ev.key);
            if (!intervalCollection.attached) {
                intervalCollection.attach(this.client, ev.key);
            }
        });
        // Initialize existing SharedIntervalCollections
        for (const key of this.intervalCollections.keys()) {
            const intervalCollection = this.intervalCollections.get(key);
            intervalCollection.attach(this.client, key);
        }
    }
    loadFinished(error) {
        if (error) {
            this.loadedDeferred.reject(error);
        }
        else {
            this.isLoaded = true;
            this.loadedDeferred.resolve();
            // Update the MSN if larger than the set value
            if (this.pendingMinSequenceNumber > this.client.mergeTree.getCollabWindow().minSeq) {
                this.client.updateMinSeq(this.pendingMinSequenceNumber);
            }
        }
    }
}
class SharedSequence extends SegmentSequence {
    constructor(document, id, extensionType, services) {
        super(document, id, extensionType, services);
        this.id = id;
        if (extensionType === _extension__WEBPACK_IMPORTED_MODULE_6__["SharedNumberSequenceExtension"].Type) {
            this.isNumeric = true;
        }
    }
    appendSegment(segSpec) {
        const mergeTree = this.client.mergeTree;
        const pos = mergeTree.root.cachedLength;
        mergeTree.insertSegment(pos, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["UniversalSequenceNumber"], mergeTree.collabWindow.clientId, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["UniversalSequenceNumber"], _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["runToSeg"](segSpec), undefined);
    }
    insert(pos, items, props) {
        const insertMessage = {
            items,
            pos1: pos,
            props,
            type: 0 /* INSERT */,
        };
        if (this.isNumeric) {
            insertMessage.isNumberSequence = true;
        }
        const segment = new _prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["SubSequence"](items);
        this.client.insertSegmentLocal(pos, segment, props, { op: insertMessage });
        this.submitIfAttached(insertMessage);
    }
    remove(start, end) {
        this.removeRange(start, end);
    }
    getItemCount() {
        return this.client.mergeTree.getLength(this.client.getCurrentSeq(), this.client.getClientId());
    }
    // tslint:disable: no-parameter-reassignment
    getItems(start, end) {
        if (end === undefined) {
            end = this.getItemCount();
        }
        return this.client.mergeTree.getItems(this.client.getCurrentSeq(), this.client.getClientId(), start, end);
    }
    segmentsFromSpecs(segSpecs) {
        return segSpecs.map(_prague_merge_tree__WEBPACK_IMPORTED_MODULE_2__["runToSeg"]);
    }
}
class SharedObjectSequence extends SharedSequence {
    constructor(document, id, services) {
        super(document, id, _extension__WEBPACK_IMPORTED_MODULE_6__["SharedObjectSequenceExtension"].Type, services);
        this.id = id;
    }
    getRange(start, end) {
        return this.getItems(start, end);
    }
}
class SharedNumberSequence extends SharedSequence {
    constructor(document, id, services) {
        super(document, id, _extension__WEBPACK_IMPORTED_MODULE_6__["SharedNumberSequenceExtension"].Type, services);
        this.id = id;
    }
    getRange(start, end) {
        return this.getItems(start, end);
    }
}
//# sourceMappingURL=sequence.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/sequence/lib/sequenceDeltaEvent.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@prague/sequence/lib/sequenceDeltaEvent.js ***!
  \*****************************************************************/
/*! exports provided: SequenceDeltaEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SequenceDeltaEvent", function() { return SequenceDeltaEvent; });
/**
 * The event object returned on sequenceDelta events.
 *
 * The properties of this object and it's sub-objects represent a point in time state
 * at the time the operation was applied. They will not take into any future modifications
 *  performed to the undlying sequence and merge tree.
 *
 * For group ops, each op will get it's own event, and the group op property will be set on the op args.
 *
 * Ops may get multiple events. For instance, as insert-replace will get a remove then an insert event.
 */
class SequenceDeltaEvent {
    constructor(opArgs, mergeTreeClient, deltaArgs) {
        this.opArgs = opArgs;
        this.mergeTreeClient = mergeTreeClient;
        this.deltaArgs = deltaArgs;
        this.isLocal =
            this.deltaArgs.mergeTreeClientId ===
                this.deltaArgs.mergeTree.collabWindow.clientId;
        this.isEmpty = deltaArgs.segments.length === 0;
        this.deltaOperation = deltaArgs.operation;
        this.sortedRanges = new Lazy(() => this.deltaArgs.segments.sort((a, b) => a.ordinal < b.ordinal ? -1 : (a.ordinal > b.ordinal ? 1 : 0))
            .map((segment) => new Lazy(() => {
            const start = this.deltaArgs.mergeTree.getOffset(segment, this.deltaArgs.mergeTree.collabWindow.currentSeq, this.deltaArgs.mergeTree.collabWindow.clientId);
            return {
                segment,
                start,
            };
        })));
        this.pStart = new Lazy(() => {
            if (this.isEmpty) {
                return undefined;
            }
            return this.sortedRanges.value[0].value.start;
        });
        this.pEnd = new Lazy(() => {
            if (this.isEmpty) {
                return undefined;
            }
            const lastRange = this.sortedRanges.value[this.sortedRanges.value.length - 1].value;
            return lastRange.start + lastRange.segment.cachedLength;
        });
        this.pClientId = new Lazy(() => this.mergeTreeClient.getLongClientId(this.deltaArgs.mergeTreeClientId));
        this.pRanges = new Lazy(() => {
            const ranges = [];
            if (this.isEmpty) {
                return ranges;
            }
            let segments;
            let start;
            let length;
            let type;
            for (const segment of this.sortedRanges.value) {
                const nextStart = segment.value.start;
                const nextLength = segment.value.segment.cachedLength;
                const nextType = segment.value.segment.getType();
                let currentPosition = start;
                // for remove don't add the length, since getOffset won't include it
                if (this.deltaArgs.operation !== 1 /* REMOVE */) {
                    currentPosition += length;
                }
                if (type !== nextType || currentPosition !== nextStart) {
                    // don't push if the first segment
                    if (segments) {
                        ranges.push({
                            length,
                            segments,
                            start,
                            type,
                        });
                    }
                    segments = [segment.value.segment];
                    start = nextStart;
                    length = nextLength;
                    type = nextType;
                }
                else {
                    segments.push(segment.value.segment);
                    length += nextLength;
                }
            }
            ranges.push({
                length,
                segments,
                start,
                type,
            });
            return ranges;
        });
    }
    get start() {
        return this.pStart.value;
    }
    get end() {
        return this.pEnd.value;
    }
    get clientId() {
        return this.pClientId.value;
    }
    get ranges() {
        return this.pRanges.value;
    }
}
class Lazy {
    constructor(valueGenerator) {
        this.valueGenerator = valueGenerator;
        this.pEvaluated = false;
    }
    get evaluated() {
        return this.pEvaluated;
    }
    get value() {
        if (!this.pEvaluated) {
            this.pEvaluated = true;
            this.pValue = this.valueGenerator();
        }
        return this.pValue;
    }
}
//# sourceMappingURL=sequenceDeltaEvent.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/lib/sharedString.js":
/*!***********************************************************!*\
  !*** ./node_modules/@prague/sequence/lib/sharedString.js ***!
  \***********************************************************/
/*! exports provided: SharedString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedString", function() { return SharedString; });
/* harmony import */ var _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/merge-tree */ "./node_modules/@prague/merge-tree/lib/index.js");
/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/sequence/lib/extension.js");
/* harmony import */ var _sequence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sequence */ "./node_modules/@prague/sequence/lib/sequence.js");
// tslint:disable:whitespace align no-bitwise



function textsToSegments(texts) {
    const segments = [];
    for (const ptext of texts) {
        let segment;
        if (ptext.text !== undefined) {
            segment = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["TextSegment"].make(ptext.text, ptext.props, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["LocalClientId"]);
        }
        else {
            // for now assume marker
            segment = _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["Marker"].make(ptext.marker.refType, ptext.props, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["LocalClientId"]);
        }
        segments.push(segment);
    }
    return segments;
}
class SharedString extends _sequence__WEBPACK_IMPORTED_MODULE_2__["SegmentSequence"] {
    constructor(document, id, services) {
        super(document, id, _extension__WEBPACK_IMPORTED_MODULE_1__["SharedStringExtension"].Type, services);
        this.id = id;
    }
    appendSegment(segSpec) {
        const mergeTree = this.client.mergeTree;
        const pos = mergeTree.root.cachedLength;
        if (segSpec.text) {
            mergeTree.insertText(pos, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], mergeTree.collabWindow.clientId, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], segSpec.text, segSpec.props, undefined);
        }
        else {
            // assume marker for now
            mergeTree.insertMarker(pos, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], mergeTree.collabWindow.clientId, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], segSpec.marker.refType, segSpec.props, undefined);
        }
    }
    segmentsFromSpecs(segSpecs) {
        return textsToSegments(segSpecs);
    }
    insertMarkerRelative(relativePos1, refType, props) {
        const insertMessage = {
            marker: { refType },
            props,
            relativePos1,
            type: 0 /* INSERT */,
        };
        const pos = this.client.mergeTree.posFromRelativePos(relativePos1);
        this.client.insertMarkerLocal(pos, refType, props, { op: insertMessage });
        this.submitIfAttached(insertMessage);
    }
    insertMarker(pos, refType, props) {
        const insertMessage = {
            marker: { refType },
            pos1: pos,
            props,
            type: 0 /* INSERT */,
        };
        this.client.insertMarkerLocal(pos, refType, props, { op: insertMessage });
        this.submitIfAttached(insertMessage);
    }
    getText(start, end) {
        return this.client.getText(start, end);
    }
    insertTextRelative(relativePos1, text, props) {
        const insertMessage = {
            props,
            relativePos1,
            text,
            type: 0 /* INSERT */,
        };
        const pos = this.client.mergeTree.posFromRelativePos(relativePos1);
        this.client.insertTextLocal(text, pos, props, { op: insertMessage });
        this.submitIfAttached(insertMessage);
    }
    insertText(text, pos, props) {
        const insertMessage = {
            pos1: pos,
            props,
            text,
            type: 0 /* INSERT */,
        };
        this.client.insertTextLocal(text, pos, props, { op: insertMessage });
        this.submitIfAttached(insertMessage);
    }
    replaceText(text, start, end, props) {
        const insertMessage = {
            pos1: start,
            pos2: end,
            props,
            text,
            type: 0 /* INSERT */,
        };
        this.client.mergeTree.startGroupOperation();
        this.client.removeSegmentLocal(start, end, { op: insertMessage });
        this.client.insertTextLocal(text, start, props, { op: insertMessage });
        this.client.mergeTree.endGroupOperation();
        this.submitIfAttached(insertMessage);
    }
    removeNest(nestStart, nestEnd) {
        const start = this.client.mergeTree.getOffset(nestStart, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], this.client.getClientId());
        const end = nestEnd.cachedLength + this.client.mergeTree.getOffset(nestEnd, _prague_merge_tree__WEBPACK_IMPORTED_MODULE_0__["UniversalSequenceNumber"], this.client.getClientId());
        console.log(`removing nest ${nestStart.getId()} from [${start},${end})`);
        const removeMessage = {
            checkNest: { id1: nestStart.getId(), id2: nestEnd.getId() },
            pos1: start,
            pos2: end,
            type: 1 /* REMOVE */,
        };
        this.client.removeSegmentLocal(start, end, { op: removeMessage });
        this.submitIfAttached(removeMessage);
    }
    removeText(start, end) {
        this.removeRange(start, end);
    }
    annotateRangeFromPast(props, start, end, fromSeq) {
        const ranges = this.client.mergeTree.tardisRange(start, end, fromSeq, this.client.getCurrentSeq(), this.client.getClientId());
        ranges.map((range) => {
            this.annotateRange(props, range.start, range.end);
        });
    }
    annotateMarkerNotifyConsensus(marker, props, callback) {
        const id = marker.getId();
        const annotateMessage = {
            combiningOp: { name: "consensus" },
            props,
            relativePos1: { id, before: true },
            relativePos2: { id },
            type: 2 /* ANNOTATE */,
        };
        this.client.annotateMarkerNotifyConsensus(marker, props, callback, { op: annotateMessage });
        this.submitIfAttached(annotateMessage);
    }
    annotateMarker(props, marker, op) {
        const id = marker.getId();
        const annotateMessage = {
            props,
            relativePos1: { id, before: true },
            relativePos2: { id },
            type: 2 /* ANNOTATE */,
        };
        if (op) {
            annotateMessage.combiningOp = op;
        }
        this.client.annotateMarker(props, marker, op, { op: annotateMessage });
        this.submitIfAttached(annotateMessage);
    }
    findTile(startPos, tileLabel, preceding = true) {
        return this.client.findTile(startPos, tileLabel, preceding);
    }
}
//# sourceMappingURL=sharedString.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/batchManager.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/batchManager.js ***!
  \**************************************************************************************/
/*! exports provided: BatchManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchManager", function() { return BatchManager; });
const MaxBatchSize = 100;
class BatchManager {
    constructor(process) {
        this.process = process;
        this.pendingWork = new Map();
    }
    add(id, work) {
        if (!this.pendingWork.has(id)) {
            this.pendingWork.set(id, []);
        }
        this.pendingWork.get(id)
            .push(work);
        if (this.pendingWork.get(id).length >= MaxBatchSize) {
            clearTimeout(this.pendingTimer);
            this.pendingTimer = undefined;
            this.startWork();
        }
        else if (this.pendingTimer === undefined) {
            this.pendingTimer = setTimeout(() => {
                this.pendingTimer = undefined;
                this.startWork();
            }, 0);
        }
    }
    /**
     * Resolves once all pending work is complete
     */
    drain() {
        this.startWork();
    }
    startWork() {
        // Clear the internal flags first to avoid issues in case any of the pending work calls back into
        // the batch manager. We could also do this with a second setImmediate call but avodiing in order
        // to process the work quicker.
        const pendingWork = this.pendingWork;
        this.pendingWork = new Map();
        // TODO log to influx how much pending work there is. We want to limit the size of a batch
        for (const [id, batch] of pendingWork) {
            this.process(id, batch);
        }
    }
}
//# sourceMappingURL=batchManager.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/blobs.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/blobs.js ***!
  \*******************************************************************************/
/*! exports provided: gitHashFile, flatten, readAndParse, buildHierarchy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gitHashFile", function() { return gitHashFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readAndParse", function() { return readAndParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildHierarchy", function() { return buildHierarchy; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sha.js/sha1 */ "./node_modules/sha.js/sha1.js");
/* harmony import */ var sha_js_sha1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

// tslint:disable-next-line:no-submodule-imports

/**
 * Create Hash (Github hashes the string with blob and size)
 * @param file The contents of the file in a buffer
 */
function gitHashFile(file) {
    const size = file.byteLength;
    const filePrefix = "blob " + size.toString() + String.fromCharCode(0);
    /* tslint:disable:no-unsafe-any */
    const engine = new sha_js_sha1__WEBPACK_IMPORTED_MODULE_1__();
    return engine.update(filePrefix)
        .update(file)
        .digest("hex");
}
function flatten(tree, blobMap) {
    const entries = flattenCore("", tree, blobMap);
    return {
        sha: null,
        tree: entries,
        url: null,
    };
}
function readAndParse(storage, sha) {
    return __awaiter(this, void 0, void 0, function* () {
        const encoded = yield storage.read(sha);
        const decoded = Buffer
            .from(encoded, "base64")
            .toString();
        return JSON.parse(decoded);
    });
}
function flattenCore(path, treeEntries, blobMap) {
    const entries = new Array();
    for (const treeEntry of treeEntries) {
        const subPath = `${path}${treeEntry.path}`;
        if (treeEntry.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"].Blob]) {
            const blob = treeEntry.value;
            const buffer = Buffer.from(blob.contents, blob.encoding);
            const sha = gitHashFile(buffer);
            blobMap.set(sha, buffer.toString("base64"));
            const entry = {
                mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"][treeEntry.mode],
                path: subPath,
                sha,
                size: buffer.length,
                type: "blob",
                url: "",
            };
            entries.push(entry);
        }
        else {
            const t = treeEntry.value;
            const entry = {
                mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"][treeEntry.mode],
                path: subPath,
                sha: null,
                size: -1,
                type: "tree",
                url: "",
            };
            entries.push(entry);
            const subTreeEntries = flattenCore(subPath + "/", t.entries, blobMap);
            entries.push(...subTreeEntries);
        }
    }
    return entries;
}
function buildHierarchy(flatTree) {
    if (!flatTree) {
        return null;
    }
    const lookup = {};
    const root = { sha: flatTree.sha, blobs: {}, commits: {}, trees: {} };
    lookup[""] = root;
    for (const entry of flatTree.tree) {
        const lastIndex = entry.path.lastIndexOf("/");
        const entryPathDir = entry.path.slice(0, Math.max(0, lastIndex));
        const entryPathBase = entry.path.slice(lastIndex + 1);
        // The flat output is breadth-first so we can assume we see tree nodes prior to their contents
        const node = lookup[entryPathDir];
        // Add in either the blob or tree
        if (entry.type === "tree") {
            const newTree = { sha: entry.sha, blobs: {}, commits: {}, trees: {} };
            node.trees[entryPathBase] = newTree;
            lookup[entry.path] = newTree;
        }
        else if (entry.type === "blob") {
            node.blobs[entryPathBase] = entry.sha;
        }
        else if (entry.type === "commit") {
            node.commits[entryPathBase] = entry.sha;
        }
    }
    return root;
}
//# sourceMappingURL=blobs.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/heap.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/heap.js ***!
  \******************************************************************************/
/*! exports provided: NumberComparer, Heap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberComparer", function() { return NumberComparer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return Heap; });
// tslint:disable:no-bitwise
// tslint:disable:no-increment-decrement
// tslint:disable:no-parameter-reassignment
const NumberComparer = {
    compare: (a, b) => a - b,
    min: Number.MIN_VALUE,
};
class Heap {
    constructor(comp) {
        this.comp = comp;
        this.L = [{ value: comp.min, position: 0 }];
    }
    peek() {
        return this.L[1];
    }
    get() {
        this.swap(1, this.count());
        const x = this.L.pop();
        this.fixdown(1);
        return x.value;
    }
    add(x) {
        const node = { value: x, position: this.L.length };
        this.L.push(node);
        this.fixup(this.count());
        return node;
    }
    /**
     * Allows for heap to be updated after a node's value changes
     */
    update(node) {
        const k = node.position;
        if (this.isGreaterThanParent(k)) {
            this.fixup(k);
        }
        else {
            this.fixdown(k);
        }
    }
    /**
     * Removes the given node from the heap
     */
    remove(node) {
        // Move the node we want to remove to the end of the array
        const position = node.position;
        this.swap(node.position, this.L.length - 1);
        this.L.splice(this.L.length - 1);
        // Update the swapped node assuming we didn't remove the end of the list
        if (position !== this.L.length) {
            this.update(this.L[position]);
        }
    }
    count() {
        return this.L.length - 1;
    }
    fixup(k) {
        while (this.isGreaterThanParent(k)) {
            const parent = k >> 1;
            this.swap(k, parent);
            k = parent;
        }
    }
    isGreaterThanParent(k) {
        return k > 1 && (this.comp.compare(this.L[k >> 1].value, this.L[k].value) > 0);
    }
    fixdown(k) {
        while ((k << 1) <= this.count()) {
            let j = k << 1;
            if ((j < this.count()) && (this.comp.compare(this.L[j].value, this.L[j + 1].value) > 0)) {
                j++;
            }
            if (this.comp.compare(this.L[k].value, this.L[j].value) <= 0) {
                break;
            }
            this.swap(k, j);
            k = j;
        }
    }
    swap(k, j) {
        const tmp = this.L[k];
        this.L[k] = this.L[j];
        this.L[k].position = k;
        this.L[j] = tmp;
        this.L[j].position = j;
    }
}
//# sourceMappingURL=heap.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/index.js ***!
  \*******************************************************************************/
/*! exports provided: BatchManager, gitHashFile, flatten, readAndParse, buildHierarchy, NumberComparer, Heap, Deferred, assertNotRejected, RangeTracker, RateLimitter, safelyParseJSON, isSystemType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _batchManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batchManager */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/batchManager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BatchManager", function() { return _batchManager__WEBPACK_IMPORTED_MODULE_0__["BatchManager"]; });

/* harmony import */ var _blobs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blobs */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/blobs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "gitHashFile", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["gitHashFile"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["flatten"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "readAndParse", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["readAndParse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buildHierarchy", function() { return _blobs__WEBPACK_IMPORTED_MODULE_1__["buildHierarchy"]; });

/* harmony import */ var _heap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./heap */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/heap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumberComparer", function() { return _heap__WEBPACK_IMPORTED_MODULE_2__["NumberComparer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Heap", function() { return _heap__WEBPACK_IMPORTED_MODULE_2__["Heap"]; });

/* harmony import */ var _promises__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./promises */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/promises.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return _promises__WEBPACK_IMPORTED_MODULE_3__["Deferred"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assertNotRejected", function() { return _promises__WEBPACK_IMPORTED_MODULE_3__["assertNotRejected"]; });

/* harmony import */ var _rangeTracker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rangeTracker */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/rangeTracker.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RangeTracker", function() { return _rangeTracker__WEBPACK_IMPORTED_MODULE_4__["RangeTracker"]; });

/* harmony import */ var _rateLimitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rateLimitter */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/rateLimitter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RateLimitter", function() { return _rateLimitter__WEBPACK_IMPORTED_MODULE_5__["RateLimitter"]; });

/* harmony import */ var _safeParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./safeParser */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/safeParser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "safelyParseJSON", function() { return _safeParser__WEBPACK_IMPORTED_MODULE_6__["safelyParseJSON"]; });

/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSystemType", function() { return _utils__WEBPACK_IMPORTED_MODULE_7__["isSystemType"]; });









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/promises.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/promises.js ***!
  \**********************************************************************************/
/*! exports provided: Deferred, assertNotRejected */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deferred", function() { return Deferred; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertNotRejected", function() { return assertNotRejected; });
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);

/**
 * A deferred creates a promise and the ability to resolve or reject it
 */
class Deferred {
    constructor() {
        /* tslint:disable:promise-must-complete */
        this.p = new Promise((resolve, reject) => {
            this.res = resolve;
            this.rej = reject;
        });
    }
    /**
     * Retrieves the underlying promise for the deferred
     */
    get promise() {
        return this.p;
    }
    /**
     * Resolves the promise
     */
    resolve(value) {
        this.res(value);
    }
    /**
     * Rejects the promise
     */
    reject(error) {
        this.rej(error);
    }
}
/**
 * Helper function that asserts that the given promise only resolves
 */
/* tslint:disable:promise-function-async */
function assertNotRejected(promise) {
    // Assert that the given promise only resolves
    promise.catch((error) => {
        assert__WEBPACK_IMPORTED_MODULE_0__["ok"](false);
    });
    return promise;
}
//# sourceMappingURL=promises.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/rangeTracker.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/rangeTracker.js ***!
  \**************************************************************************************/
/*! exports provided: RangeTracker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RangeTracker", function() { return RangeTracker; });
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_0__);

// tslint:disable:no-var-requires
// tslint:disable-next-line:no-submodule-imports
const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/**
 * Helper class that keeps track of the relation between two ranges in a 1:N fashion. Primary
 * is continuous and always maps to a single value in secondary above the base value. The range
 * defines an increasing step function.
 */
class RangeTracker {
    get base() {
        return this.ranges[0].primary;
    }
    get primaryHead() {
        return this.lastPrimary;
    }
    get secondaryHead() {
        return this.lastSecondary;
    }
    constructor(primary, secondary) {
        if (typeof primary === "number") {
            this.ranges = [{ length: 0, primary, secondary }];
            this.lastPrimary = primary;
            this.lastSecondary = secondary;
        }
        else {
            /* tslint:disable:no-unsafe-any */
            this.ranges = cloneDeep(primary.ranges);
            this.lastPrimary = primary.lastPrimary;
            this.lastSecondary = primary.lastSecondary;
        }
    }
    /**
     * Returns a serialized form of the RangeTracker
     */
    serialize() {
        return {
            lastPrimary: this.lastPrimary,
            lastSecondary: this.lastSecondary,
            ranges: cloneDeep(this.ranges),
        };
    }
    // primary is time - secondary is the MSN
    add(primary, secondary) {
        // Both values must continuously be increasing - we won't always track the last value we saw so we do so
        // below to check invariants
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.lastPrimary);
        assert__WEBPACK_IMPORTED_MODULE_0__(secondary >= this.lastSecondary);
        this.lastPrimary = primary;
        this.lastSecondary = secondary;
        // Get quicker references to the head of the range
        const head = this.ranges[this.ranges.length - 1];
        const primaryHead = head.primary + head.length;
        const secondaryHead = head.secondary + head.length;
        // Same secondary indicates this is not a true inflection point - we can ignore it
        if (secondary === secondaryHead) {
            return;
        }
        // New secondary - need to update the ranges
        if (primary === primaryHead) {
            // Technically this code path has us supporting N:N ranges. But we simply overwrite duplicate values to
            // preserve 1:N since you can only lookup from the primary to a secondary
            if (head.length === 0) {
                // No range represented - we can simply update secondary with the overwritten value
                head.secondary = secondary;
            }
            else {
                // The values in the range before this one are valid - but we need to create a new one for this update
                // tslint:disable-next-line:no-increment-decrement
                head.length--;
                this.ranges.push({ length: 0, primary, secondary });
            }
        }
        else {
            if (primaryHead + 1 === primary && secondaryHead + 1 === secondary) {
                // extend the length if both increase by the same amount
                // tslint:disable-next-line:no-increment-decrement
                head.length++;
            }
            else {
                // Insert a new node
                this.ranges.push({ length: 0, primary, secondary });
            }
        }
    }
    get(primary) {
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[0].primary);
        // Find the first range where the starting position is greater than the primary. Our target range is
        // the one before it.
        let index = 1;
        // tslint:disable-next-line:no-increment-decrement
        for (; index < this.ranges.length; index++) {
            if (primary < this.ranges[index].primary) {
                break;
            }
        }
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[index - 1].primary);
        // If the difference is within the stored range use it - otherwise add in the length - 1 as the highest
        // stored secondary value to use.
        const closestRange = this.ranges[index - 1];
        return Math.min(primary - closestRange.primary, closestRange.length) + closestRange.secondary;
    }
    updateBase(primary) {
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[0].primary);
        // Walk the ranges looking for the first one that is greater than the primary. Primary is then within the
        // previous index by definition (since it's less than the current index's primary but greather than the
        // previous index's primary) and we know primary must be greater than the base.
        let index = 1;
        // tslint:disable-next-line:no-increment-decrement
        for (; index < this.ranges.length; index++) {
            if (primary < this.ranges[index].primary) {
                break;
            }
        }
        assert__WEBPACK_IMPORTED_MODULE_0__(primary >= this.ranges[index - 1].primary);
        // Update the last range values
        const range = this.ranges[index - 1];
        const delta = primary - range.primary;
        range.secondary = range.secondary + Math.min(delta, range.length);
        range.length = Math.max(range.length - delta, 0);
        range.primary = primary;
        // And remove unnecessary ranges
        this.ranges = index - 1 > 0 ? this.ranges.slice(index - 1) : this.ranges;
        // assert that the lowest value is now the input to this method
        assert__WEBPACK_IMPORTED_MODULE_0__["equal"](primary, this.ranges[0].primary);
    }
}
//# sourceMappingURL=rangeTracker.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/rateLimitter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/rateLimitter.js ***!
  \**************************************************************************************/
/*! exports provided: RateLimitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RateLimitter", function() { return RateLimitter; });
// A rate limiter to make sure that a client can only request help for one task within a time window.
class RateLimitter {
    constructor(windowMSec) {
        this.windowMSec = windowMSec;
        this.requestMap = new Map();
    }
    filter(clientId, messages) {
        const approvedList = [];
        const currentTime = Date.now();
        for (const message of messages) {
            const key = `${clientId}/${message}`;
            if (!this.requestMap.has(key)) {
                this.requestMap.set(key, currentTime);
                approvedList.push(message);
            }
            else if (this.requestMap.get(key) + this.windowMSec > currentTime) {
                continue;
            }
            else {
                this.requestMap.set(key, currentTime);
                approvedList.push(message);
            }
        }
        return approvedList;
    }
}
//# sourceMappingURL=rateLimitter.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/safeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/safeParser.js ***!
  \************************************************************************************/
/*! exports provided: safelyParseJSON */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safelyParseJSON", function() { return safelyParseJSON; });
function safelyParseJSON(json) {
    let parsed;
    try {
        parsed = JSON.parse(json);
    }
    catch (e) {
        //
    }
    return parsed;
}
//# sourceMappingURL=safeParser.js.map

/***/ }),

/***/ "./node_modules/@prague/sequence/node_modules/@prague/utils/lib/utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@prague/sequence/node_modules/@prague/utils/lib/utils.js ***!
  \*******************************************************************************/
/*! exports provided: isSystemType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSystemType", function() { return isSystemType; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);

function isSystemType(type) {
    return (type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].RemoteHelp ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Integrate ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].ClientJoin ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].ClientLeave ||
        type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Fork);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@prague/stream/lib/extension.js":
/*!******************************************************!*\
  !*** ./node_modules/@prague/stream/lib/extension.js ***!
  \******************************************************/
/*! exports provided: StreamExtension */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StreamExtension", function() { return StreamExtension; });
/* harmony import */ var _stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream */ "./node_modules/@prague/stream/lib/stream.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class StreamExtension {
    constructor() {
        this.type = StreamExtension.Type;
    }
    load(runtime, id, minimumSequenceNumber, services, headerOrigin) {
        return __awaiter(this, void 0, void 0, function* () {
            const stream = new _stream__WEBPACK_IMPORTED_MODULE_0__["Stream"](runtime, id);
            yield stream.load(minimumSequenceNumber, headerOrigin, services);
            return stream;
        });
    }
    create(runtime, id) {
        const stream = new _stream__WEBPACK_IMPORTED_MODULE_0__["Stream"](runtime, id);
        stream.initializeLocal();
        return stream;
    }
}
StreamExtension.Type = "https://graph.microsoft.com/types/stream";
//# sourceMappingURL=extension.js.map

/***/ }),

/***/ "./node_modules/@prague/stream/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@prague/stream/lib/index.js ***!
  \**************************************************/
/*! exports provided: StreamExtension, Delta, getActionType, getStylusAction, getStylusId, ActionType, Snapshot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/stream/lib/extension.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StreamExtension", function() { return _extension__WEBPACK_IMPORTED_MODULE_0__["StreamExtension"]; });

/* harmony import */ var _interfaces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaces */ "./node_modules/@prague/stream/lib/interfaces.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Delta", function() { return _interfaces__WEBPACK_IMPORTED_MODULE_1__["Delta"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getActionType", function() { return _interfaces__WEBPACK_IMPORTED_MODULE_1__["getActionType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getStylusAction", function() { return _interfaces__WEBPACK_IMPORTED_MODULE_1__["getStylusAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getStylusId", function() { return _interfaces__WEBPACK_IMPORTED_MODULE_1__["getStylusId"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActionType", function() { return _interfaces__WEBPACK_IMPORTED_MODULE_1__["ActionType"]; });

/* harmony import */ var _snapshot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./snapshot */ "./node_modules/@prague/stream/lib/snapshot.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Snapshot", function() { return _snapshot__WEBPACK_IMPORTED_MODULE_2__["Snapshot"]; });




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@prague/stream/lib/interfaces.js":
/*!*******************************************************!*\
  !*** ./node_modules/@prague/stream/lib/interfaces.js ***!
  \*******************************************************/
/*! exports provided: Delta, getActionType, getStylusAction, getStylusId, ActionType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Delta", function() { return Delta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getActionType", function() { return getActionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStylusAction", function() { return getStylusAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStylusId", function() { return getStylusId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionType", function() { return ActionType; });
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid/v4 */ "./node_modules/uuid/v4.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_0__);
// tslint:disable-next-line:no-submodule-imports

/**
 * Fluent implementation of the IDelta interface to make creation the underlying operation easier.
 * Only one operation per delta is currently supported but it's expected this will expand to multiple in
 * the future
 */
class Delta {
    constructor(operations = []) {
        this.operations = operations;
    }
    /**
     * Composes two ink delta streams together - which is as simple as appending their operation
     * logs
     */
    compose(delta) {
        this.operations = this.operations.concat(delta.operations);
    }
    push(operation) {
        this.operations.push(operation);
    }
    clear(time = new Date().getTime()) {
        const clear = {};
        this.operations.push({ clear, time });
        return this;
    }
    stylusUp(point, pressure, id = uuid_v4__WEBPACK_IMPORTED_MODULE_0__(), time = new Date().getTime()) {
        const stylusUp = {
            id,
            point,
            pressure,
        };
        this.operations.push({ stylusUp, time });
        return this;
    }
    stylusDown(point, pressure, pen, layer = 0, id = uuid_v4__WEBPACK_IMPORTED_MODULE_0__(), time = new Date().getTime()) {
        const stylusDown = {
            id,
            layer,
            pen,
            point,
            pressure,
        };
        this.operations.push({ stylusDown, time });
        return this;
    }
    stylusMove(point, pressure, id = uuid_v4__WEBPACK_IMPORTED_MODULE_0__(), time = new Date().getTime()) {
        const stylusMove = {
            id,
            point,
            pressure,
        };
        this.operations.push({ stylusMove, time });
        return this;
    }
}
/**
 * Retrieves the type of action contained within the operation
 */
function getActionType(operation) {
    if (operation.clear) {
        return ActionType.Clear;
    }
    else if (operation.stylusDown) {
        return ActionType.StylusDown;
    }
    else if (operation.stylusUp) {
        return ActionType.StylusUp;
    }
    else if (operation.stylusMove) {
        return ActionType.StylusMove;
    }
    else {
        throw new Error("Unknown action");
    }
}
/**
 * Extracts the IStylusAction contained in the operation
 */
function getStylusAction(operation) {
    if (operation.stylusDown) {
        return operation.stylusDown;
    }
    else if (operation.stylusUp) {
        return operation.stylusUp;
    }
    else if (operation.stylusMove) {
        return operation.stylusMove;
    }
    else {
        throw new Error("Unknown action");
    }
}
/**
 * Helper function to retrieve the ID of the stylus operation
 */
function getStylusId(operation) {
    const type = getActionType(operation);
    switch (type) {
        case ActionType.StylusDown:
            return operation.stylusDown.id;
        case ActionType.StylusUp:
            return operation.stylusUp.id;
        case ActionType.StylusMove:
            return operation.stylusMove.id;
        default:
            throw new Error("Non-stylus event");
    }
}
var ActionType;
(function (ActionType) {
    // Action of placing the stylus on the canvas
    ActionType[ActionType["StylusDown"] = 0] = "StylusDown";
    // Action of picking the stylus up from the canvas
    ActionType[ActionType["StylusUp"] = 1] = "StylusUp";
    // Stylus has moved on the canvas
    ActionType[ActionType["StylusMove"] = 2] = "StylusMove";
    // Canvas has been cleared
    ActionType[ActionType["Clear"] = 3] = "Clear";
})(ActionType || (ActionType = {}));
//# sourceMappingURL=interfaces.js.map

/***/ }),

/***/ "./node_modules/@prague/stream/lib/snapshot.js":
/*!*****************************************************!*\
  !*** ./node_modules/@prague/stream/lib/snapshot.js ***!
  \*****************************************************/
/*! exports provided: Snapshot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Snapshot", function() { return Snapshot; });
/* harmony import */ var _interfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces */ "./node_modules/@prague/stream/lib/interfaces.js");

class Snapshot {
    constructor(layers = [], layerIndex = {}) {
        this.layers = layers;
        this.layerIndex = layerIndex;
    }
    static Clone(snapshot) {
        return new Snapshot(snapshot.layers, snapshot.layerIndex);
    }
    apply(delta) {
        for (const operation of delta.operations) {
            this.applyOperation(operation);
        }
    }
    applyOperation(operation) {
        const actionType = Object(_interfaces__WEBPACK_IMPORTED_MODULE_0__["getActionType"])(operation);
        switch (actionType) {
            case _interfaces__WEBPACK_IMPORTED_MODULE_0__["ActionType"].Clear:
                this.processClearAction(operation);
                break;
            case _interfaces__WEBPACK_IMPORTED_MODULE_0__["ActionType"].StylusUp:
                this.processStylusUpAction(operation);
                break;
            case _interfaces__WEBPACK_IMPORTED_MODULE_0__["ActionType"].StylusDown:
                this.processStylusDownAction(operation);
                break;
            case _interfaces__WEBPACK_IMPORTED_MODULE_0__["ActionType"].StylusMove:
                this.processStylusMoveAction(operation);
                break;
            default:
                throw new Error("Unknown action type");
        }
    }
    processClearAction(operation) {
        this.layers = [];
        this.layerIndex = {};
    }
    processStylusUpAction(operation) {
        // TODO - longer term on ink up - or possibly earlier - we can attempt to smooth the provided ink
        this.addOperationToLayer(operation.stylusUp.id, operation);
    }
    processStylusDownAction(operation) {
        const layer = {
            id: operation.stylusDown.id,
            operations: [],
        };
        // Push if we are isnerting at the end - otherwise splice to insert at the specified location
        if (operation.stylusDown.layer === 0) {
            this.layers.push(layer);
        }
        else {
            this.layers.splice(this.layers.length - operation.stylusDown.layer, 0, layer);
        }
        // Create a reference to the specified layer
        let layerIndex = this.layers.length - 1 - operation.stylusDown.layer;
        this.layerIndex[layer.id] = layerIndex;
        // And move any after it down by one
        // tslint:disable-next-line:no-increment-decrement
        for (layerIndex = layerIndex + 1; layerIndex < this.layers.length; layerIndex++) {
            const layerId = this.layers[layerIndex].id;
            this.layerIndex[layerId] = this.layerIndex[layerId] + 1;
        }
        // And save the stylus down
        this.addOperationToLayer(operation.stylusDown.id, operation);
    }
    processStylusMoveAction(operation) {
        this.addOperationToLayer(operation.stylusMove.id, operation);
    }
    addOperationToLayer(id, operation) {
        // TODO: Why is this operation sometimes undefined?
        if (this.layerIndex[id] !== undefined) {
            const layerIndex = this.layerIndex[id];
            if (this.layers[layerIndex].operations === undefined) {
                this.layers[layerIndex].operations = [];
            }
            this.layers[layerIndex].operations.push(operation);
        }
    }
}
//# sourceMappingURL=snapshot.js.map

/***/ }),

/***/ "./node_modules/@prague/stream/lib/stream.js":
/*!***************************************************!*\
  !*** ./node_modules/@prague/stream/lib/stream.js ***!
  \***************************************************/
/*! exports provided: Stream */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stream", function() { return Stream; });
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/container-definitions */ "./node_modules/@prague/container-definitions/dist/index.js");
/* harmony import */ var _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _prague_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prague/map */ "./node_modules/@prague/map/lib/index.js");
/* harmony import */ var _extension__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extension */ "./node_modules/@prague/stream/lib/extension.js");
/* harmony import */ var _snapshot__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./snapshot */ "./node_modules/@prague/stream/lib/snapshot.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const snapshotFileName = "header";
const emptySnapshot = { layers: [], layerIndex: {} };
class Stream extends _prague_map__WEBPACK_IMPORTED_MODULE_1__["SharedMap"] {
    constructor(runtime, id) {
        super(id, runtime, _extension__WEBPACK_IMPORTED_MODULE_2__["StreamExtension"].Type);
    }
    getLayers() {
        return this.inkSnapshot.layers;
    }
    getLayer(key) {
        return this.inkSnapshot.layers[this.inkSnapshot.layerIndex[key]];
    }
    submitOp(op) {
        this.submitLocalMessage(op);
        this.inkSnapshot.apply(op);
    }
    loadContent(minimumSequenceNumber, headerOrigin, storage) {
        return __awaiter(this, void 0, void 0, function* () {
            const header = yield storage.read(snapshotFileName);
            /* tslint:disable:no-unsafe-any */
            const data = header
                ? JSON.parse(Buffer.from(header, "base64")
                    .toString("utf-8"))
                : emptySnapshot;
            this.initialize(data);
        });
    }
    initializeContent() {
        this.initialize(emptySnapshot);
    }
    snapshotContent() {
        const tree = {
            entries: [
                {
                    mode: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["FileMode"].File,
                    path: snapshotFileName,
                    type: _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"][_prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["TreeEntry"].Blob],
                    value: {
                        contents: JSON.stringify(this.inkSnapshot),
                        encoding: "utf-8",
                    },
                },
            ],
            sha: null,
        };
        return tree;
    }
    processContent(message, local) {
        if (message.type === _prague_container_definitions__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Operation && !local) {
            this.inkSnapshot.apply(message.contents);
        }
    }
    onConnectContent(pending) {
        // Stream can resend messages under new client id
        for (const message of pending) {
            this.submitLocalMessage(message);
        }
        return;
    }
    initialize(data) {
        this.inkSnapshot = _snapshot__WEBPACK_IMPORTED_MODULE_3__["Snapshot"].Clone(data);
    }
}
//# sourceMappingURL=stream.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/assert/assert.js":
/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(/*! util/ */ "./node_modules/util/util.js");
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/buffer/node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/buffer/node_modules/isarray/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/buffer/node_modules/isarray/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__(/*! ./common */ "./node_modules/debug/src/common.js")(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      // Disabled?
      if (!debug.enabled) {
        return;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;



/***/ }),

/***/ "./node_modules/double-ended-queue/js/deque.js":
/*!*****************************************************!*\
  !*** ./node_modules/double-ended-queue/js/deque.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:</p>
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

function Deque(capacity) {
    this._capacity = getCapacity(capacity);
    this._length = 0;
    this._front = 0;
    if (isArray(capacity)) {
        var len = capacity.length;
        for (var i = 0; i < len; ++i) {
            this[i] = capacity[i];
        }
        this._length = len;
    }
}

Deque.prototype.toArray = function Deque$toArray() {
    var len = this._length;
    var ret = new Array(len);
    var front = this._front;
    var capacity = this._capacity;
    for (var j = 0; j < len; ++j) {
        ret[j] = this[(front + j) & (capacity - 1)];
    }
    return ret;
};

Deque.prototype.push = function Deque$push(item) {
    var argsLength = arguments.length;
    var length = this._length;
    if (argsLength > 1) {
        var capacity = this._capacity;
        if (length + argsLength > capacity) {
            for (var i = 0; i < argsLength; ++i) {
                this._checkCapacity(length + 1);
                var j = (this._front + length) & (this._capacity - 1);
                this[j] = arguments[i];
                length++;
                this._length = length;
            }
            return length;
        }
        else {
            var j = this._front;
            for (var i = 0; i < argsLength; ++i) {
                this[(j + length) & (capacity - 1)] = arguments[i];
                j++;
            }
            this._length = length + argsLength;
            return length + argsLength;
        }

    }

    if (argsLength === 0) return length;

    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = item;
    this._length = length + 1;
    return length + 1;
};

Deque.prototype.pop = function Deque$pop() {
    var length = this._length;
    if (length === 0) {
        return void 0;
    }
    var i = (this._front + length - 1) & (this._capacity - 1);
    var ret = this[i];
    this[i] = void 0;
    this._length = length - 1;
    return ret;
};

Deque.prototype.shift = function Deque$shift() {
    var length = this._length;
    if (length === 0) {
        return void 0;
    }
    var front = this._front;
    var ret = this[front];
    this[front] = void 0;
    this._front = (front + 1) & (this._capacity - 1);
    this._length = length - 1;
    return ret;
};

Deque.prototype.unshift = function Deque$unshift(item) {
    var length = this._length;
    var argsLength = arguments.length;


    if (argsLength > 1) {
        var capacity = this._capacity;
        if (length + argsLength > capacity) {
            for (var i = argsLength - 1; i >= 0; i--) {
                this._checkCapacity(length + 1);
                var capacity = this._capacity;
                var j = (((( this._front - 1 ) &
                    ( capacity - 1) ) ^ capacity ) - capacity );
                this[j] = arguments[i];
                length++;
                this._length = length;
                this._front = j;
            }
            return length;
        }
        else {
            var front = this._front;
            for (var i = argsLength - 1; i >= 0; i--) {
                var j = (((( front - 1 ) &
                    ( capacity - 1) ) ^ capacity ) - capacity );
                this[j] = arguments[i];
                front = j;
            }
            this._front = front;
            this._length = length + argsLength;
            return length + argsLength;
        }
    }

    if (argsLength === 0) return length;

    this._checkCapacity(length + 1);
    var capacity = this._capacity;
    var i = (((( this._front - 1 ) &
        ( capacity - 1) ) ^ capacity ) - capacity );
    this[i] = item;
    this._length = length + 1;
    this._front = i;
    return length + 1;
};

Deque.prototype.peekBack = function Deque$peekBack() {
    var length = this._length;
    if (length === 0) {
        return void 0;
    }
    var index = (this._front + length - 1) & (this._capacity - 1);
    return this[index];
};

Deque.prototype.peekFront = function Deque$peekFront() {
    if (this._length === 0) {
        return void 0;
    }
    return this[this._front];
};

Deque.prototype.get = function Deque$get(index) {
    var i = index;
    if ((i !== (i | 0))) {
        return void 0;
    }
    var len = this._length;
    if (i < 0) {
        i = i + len;
    }
    if (i < 0 || i >= len) {
        return void 0;
    }
    return this[(this._front + i) & (this._capacity - 1)];
};

Deque.prototype.isEmpty = function Deque$isEmpty() {
    return this._length === 0;
};

Deque.prototype.clear = function Deque$clear() {
    var len = this._length;
    var front = this._front;
    var capacity = this._capacity;
    for (var j = 0; j < len; ++j) {
        this[(front + j) & (capacity - 1)] = void 0;
    }
    this._length = 0;
    this._front = 0;
};

Deque.prototype.toString = function Deque$toString() {
    return this.toArray().toString();
};

Deque.prototype.valueOf = Deque.prototype.toString;
Deque.prototype.removeFront = Deque.prototype.shift;
Deque.prototype.removeBack = Deque.prototype.pop;
Deque.prototype.insertFront = Deque.prototype.unshift;
Deque.prototype.insertBack = Deque.prototype.push;
Deque.prototype.enqueue = Deque.prototype.push;
Deque.prototype.dequeue = Deque.prototype.shift;
Deque.prototype.toJSON = Deque.prototype.toArray;

Object.defineProperty(Deque.prototype, "length", {
    get: function() {
        return this._length;
    },
    set: function() {
        throw new RangeError("");
    }
});

Deque.prototype._checkCapacity = function Deque$_checkCapacity(size) {
    if (this._capacity < size) {
        this._resizeTo(getCapacity(this._capacity * 1.5 + 16));
    }
};

Deque.prototype._resizeTo = function Deque$_resizeTo(capacity) {
    var oldCapacity = this._capacity;
    this._capacity = capacity;
    var front = this._front;
    var length = this._length;
    if (front + length > oldCapacity) {
        var moveItemsCount = (front + length) & (oldCapacity - 1);
        arrayMove(this, 0, this, oldCapacity, moveItemsCount);
    }
};


var isArray = Array.isArray;

function arrayMove(src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
    }
}

function pow2AtLeast(n) {
    n = n >>> 0;
    n = n - 1;
    n = n | (n >> 1);
    n = n | (n >> 2);
    n = n | (n >> 4);
    n = n | (n >> 8);
    n = n | (n >> 16);
    return n + 1;
}

function getCapacity(capacity) {
    if (typeof capacity !== "number") {
        if (isArray(capacity)) {
            capacity = capacity.length;
        }
        else {
            return 16;
        }
    }
    return pow2AtLeast(
        Math.min(
            Math.max(16, capacity), 1073741824)
    );
}

module.exports = Deque;


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(/*! ./_hashClear */ "./node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ "./node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__(/*! ./_hashGet */ "./node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__(/*! ./_hashHas */ "./node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__(/*! ./_hashSet */ "./node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "./node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "./node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "./node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "./node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "./node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__(/*! ./_stackClear */ "./node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ "./node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__(/*! ./_stackGet */ "./node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__(/*! ./_stackHas */ "./node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__(/*! ./_stackSet */ "./node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "./node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__(/*! ./_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__(/*! ./_baseAssignIn */ "./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__(/*! ./_copySymbols */ "./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__(/*! ./_copySymbolsIn */ "./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__(/*! ./_initCloneArray */ "./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__(/*! ./_initCloneByTag */ "./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__(/*! ./isMap */ "./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__(/*! ./isSet */ "./node_modules/lodash/isSet.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });

    return result;
  }

  if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });

    return result;
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMap.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsMap.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__(/*! ./_isMasked */ "./node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "./node_modules/lodash/_baseIsSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsSet.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "./node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ "./node_modules/lodash/_nativeKeysIn.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js");

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash/_cloneDataView.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_cloneDataView.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ "./node_modules/lodash/_cloneRegExp.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneRegExp.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ "./node_modules/lodash/_cloneSymbol.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneSymbol.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js");

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js");

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "./node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "./node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__(/*! ./_getValue */ "./node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(/*! ./_DataView */ "./node_modules/lodash/_DataView.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    Promise = __webpack_require__(/*! ./_Promise */ "./node_modules/lodash/_Promise.js"),
    Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js"),
    cloneDataView = __webpack_require__(/*! ./_cloneDataView */ "./node_modules/lodash/_cloneDataView.js"),
    cloneRegExp = __webpack_require__(/*! ./_cloneRegExp */ "./node_modules/lodash/_cloneRegExp.js"),
    cloneSymbol = __webpack_require__(/*! ./_cloneSymbol */ "./node_modules/lodash/_cloneSymbol.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js");

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "./node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(/*! ./_Hash */ "./node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "./node_modules/lodash/cloneDeep.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/cloneDeep.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "./node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__(/*! ./stubFalse */ "./node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMap = __webpack_require__(/*! ./_baseIsMap */ "./node_modules/lodash/_baseIsMap.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsSet = __webpack_require__(/*! ./_baseIsSet */ "./node_modules/lodash/_baseIsSet.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "./node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ "./node_modules/lodash/_baseKeysIn.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/hash.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/sha1.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/uuid/lib/bytesToUuid.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/bytesToUuid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]], 
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

module.exports = bytesToUuid;


/***/ }),

/***/ "./node_modules/uuid/lib/rng-browser.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/rng-browser.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),

/***/ "./node_modules/uuid/v4.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v4.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(/*! ./lib/rng */ "./node_modules/uuid/lib/rng-browser.js");
var bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ "./node_modules/uuid/lib/bytesToUuid.js");

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: Clicker, instantiateRuntime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Clicker", function() { return Clicker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "instantiateRuntime", function() { return instantiateRuntime; });
/* harmony import */ var _prague_app_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prague/app-component */ "./node_modules/@prague/app-component/lib/index.js");
/* harmony import */ var _prague_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prague/map */ "./node_modules/@prague/map/lib/index.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class Clicker extends _prague_app_component__WEBPACK_IMPORTED_MODULE_0__["Document"] {
    // Create the component's schema and perform other initialization tasks
    // (only called when document is initially created).
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            this.root.set("clicks", 0, _prague_map__WEBPACK_IMPORTED_MODULE_1__["CounterValueType"].Name);
        });
    }
    render(host) {
        return __awaiter(this, void 0, void 0, function* () {
            // Get the distributed Counter
            const counter = yield this.root.wait("clicks");
            // Create a <span> that displays the current value of 'clicks'.
            const span = document.createElement("span");
            const update = () => {
                span.textContent = counter.value.toString();
            };
            this.root.on("valueChanged", update);
            update();
            // Create a button that increments the value of 'clicks' when pressed.
            const btn = document.createElement("button");
            btn.textContent = "+";
            btn.addEventListener("click", () => {
                counter.increment(1);
            });
            // Add both to the <div> provided by the host:
            host.appendChild(span);
            host.appendChild(btn);
        });
    }
    // The component has been loaded. Attempt to get a div from the host. TODO explain this better.
    opened() {
        return __awaiter(this, void 0, void 0, function* () {
            // If the host provided a <div>, render the component into that Div
            const maybeDiv = yield this.platform.queryInterface("div");
            if (maybeDiv) {
                this.render(maybeDiv);
            }
            else {
                return;
            }
        });
    }
}
function instantiateRuntime(context) {
    return __awaiter(this, void 0, void 0, function* () {
        return _prague_app_component__WEBPACK_IMPORTED_MODULE_0__["Component"].instantiateRuntime(context, "@chaincode/counter", [
            ["@chaincode/counter", Clicker]
        ]);
    });
}


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,