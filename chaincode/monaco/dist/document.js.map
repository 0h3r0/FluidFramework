{"version":3,"file":"document.js","sourceRoot":"","sources":["../src/document.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qCAAuD;AAEvD,+CAAuE;AACvE,gCAAgC;AAEhC,MAAM,SAAS,GAAG,MAAM,CAAC;AAEzB;;GAEG;AACH,MAAa,QAAQ;IAuBjB;;OAEG;IACH,YAA2B,OAAiB,EAAU,IAAgB;QAA3C,YAAO,GAAP,OAAO,CAAU;QAAU,SAAI,GAAJ,IAAI,CAAY;IACtE,CAAC;IA1BM,MAAM,CAAO,IAAI,CAAC,OAAiB;;YACtC,IAAI,IAAgB,CAAC;YAErB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACnB,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,kBAAY,CAAC,IAAI,CAAe,CAAC;gBACzE,IAAI,CAAC,MAAM,EAAE,CAAC;aACjB;iBAAM;gBACH,IAAI,IAAG,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,CAAe,CAAA,CAAC;aACzD;YAED,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAE7C,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAED;;OAEG;IACH,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;IACjC,CAAC;IAQM,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAEM,SAAS,CAAC,KAAa,IAAI,EAAE;QAChC,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,kBAAY,CAAC,IAAI,CAAe,CAAC;IAC3E,CAAC;IAEM,YAAY,CAAC,KAAa,IAAI,EAAE;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,gCAAqB,CAAC,IAAI,CAAiB,CAAC;IACtF,CAAC;IAEM,aAAa,CAAC,EAAU,EAAE,IAAY;QACzC,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;CACJ;AA5CD,4BA4CC","sourcesContent":["import { ISharedMap, MapExtension } from \"@prague/map\";\r\nimport { IChannel, IRuntime } from \"@prague/runtime-definitions\";\r\nimport { SharedString, SharedStringExtension } from \"@prague/sequence\";\r\nimport * as uuid from \"uuid/v4\";\r\n\r\nconst rootMapId = \"root\";\r\n\r\n/**\r\n * A document is a collection of collaborative types.\r\n */\r\nexport class Document {\r\n    public static async Load(runtime: IRuntime): Promise<Document> {\r\n        let root: ISharedMap;\r\n\r\n        if (!runtime.existing) {\r\n            root = runtime.createChannel(rootMapId, MapExtension.Type) as ISharedMap;\r\n            root.attach();\r\n        } else {\r\n            root = await runtime.getChannel(\"root\") as ISharedMap;\r\n        }\r\n\r\n        const document = new Document(runtime, root);\r\n\r\n        return document;\r\n    }\r\n\r\n    /**\r\n     * Flag indicating whether the document already existed at the time of load\r\n     */\r\n    public get existing(): boolean {\r\n        return this.runtime.existing;\r\n    }\r\n\r\n    /**\r\n     * Constructs a new document from the provided details\r\n     */\r\n    private constructor(public runtime: IRuntime, private root: ISharedMap) {\r\n    }\r\n\r\n    public getRoot(): ISharedMap {\r\n        return this.root;\r\n    }\r\n\r\n    public createMap(id: string = uuid()): ISharedMap {\r\n        return this.runtime.createChannel(id, MapExtension.Type) as ISharedMap;\r\n    }\r\n\r\n    public createString(id: string = uuid()): SharedString {\r\n        return this.runtime.createChannel(id, SharedStringExtension.Type) as SharedString;\r\n    }\r\n\r\n    public createChannel(id: string, type: string): IChannel {\r\n        return this.runtime.createChannel(id, type);\r\n    }\r\n}\r\n"]}