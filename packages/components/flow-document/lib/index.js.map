{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from \"@prague/app-component\";\r\nimport { DataStore } from \"@prague/app-datastore\";\r\nimport { MapExtension } from \"@prague/map\";\r\nimport {\r\n    BaseSegment,\r\n    ISegment,\r\n    LocalReference,\r\n    Marker,\r\n    MergeTree,\r\n    PropertySet,\r\n    ReferencePosition,\r\n    ReferenceType,\r\n    reservedTileLabelsKey,\r\n    TextSegment,\r\n    UniversalSequenceNumber,\r\n} from \"@prague/merge-tree\";\r\nimport { SharedString, SharedStringExtension } from \"@prague/sequence\";\r\nimport { Deferred } from \"@prague/utils\";\r\nimport { debug } from \"./debug\";\r\n\r\nexport enum DocSegmentKind {\r\n    Text = \"text\",\r\n    Paragraph = \"<p>\",\r\n    LineBreak = \"<br>\",\r\n    Inclusion = \"<?>\",\r\n    EOF = \"<eof>\",\r\n}\r\n\r\nexport enum InclusionKind {\r\n    HTML = \"<html>\",\r\n    Chaincode = \"<@chaincode>\",\r\n    Component = \"<@component>\",\r\n}\r\n\r\nexport const getInclusionKind = (marker: Marker): InclusionKind => marker.properties.kind;\r\nexport const getInclusionHtml = (marker: Marker) => {\r\n    const template = document.createElement(\"template\");\r\n    // tslint:disable-next-line:no-inner-html\r\n    template.innerHTML = marker.properties.content;\r\n    return template.content.firstElementChild as HTMLElement;\r\n};\r\n\r\nconst styleProperty = \"style\";\r\nexport const getStyle = (segment: BaseSegment): CSSStyleDeclaration => segment.properties && segment.properties[styleProperty];\r\nexport const setStyle = (segment: BaseSegment, style: CSSStyleDeclaration) => {\r\n    segment.properties = Object.assign(segment.properties || {}, { [styleProperty]: style });\r\n};\r\n\r\nexport const getDocSegmentKind = (segment: ISegment): DocSegmentKind => {\r\n    if (segment instanceof TextSegment) {\r\n        return DocSegmentKind.Text;\r\n    } else if (segment instanceof Marker) {\r\n        const markerType = segment.refType;\r\n        switch (markerType) {\r\n            case ReferenceType.Tile:\r\n                const tileLabel = segment.getTileLabels()[0];\r\n                switch (tileLabel) {\r\n                    case DocSegmentKind.Paragraph:\r\n                    case DocSegmentKind.LineBreak:\r\n                    case DocSegmentKind.EOF:\r\n                        return tileLabel;\r\n                    default:\r\n                        throw new Error(`Unknown Marker.tileLabel '${tileLabel}'.`);\r\n                }\r\n            case ReferenceType.Simple:\r\n                return DocSegmentKind.Inclusion;\r\n            default:\r\n                throw new Error(`Unknown Marker.refType '${markerType}'.`);\r\n        }\r\n    } else {\r\n        throw new Error(`Unknown Segment Type.`);\r\n    }\r\n};\r\n\r\ntype LeafAction = (position: number, segment: ISegment, start: number, end: number) => boolean;\r\n\r\n/**\r\n * Used by 'FlowDocument.visitRange'.  Uses the otherwise unused 'accum' object to pass the\r\n * leaf action callback, allowing us to simplify the the callback signature and while (maybe)\r\n * avoiding unnecessary allocation to wrap the given 'callback'.\r\n */\r\nconst accumAsLeafAction = {\r\n    leaf: (\r\n        segment: ISegment,\r\n        position: number,\r\n        refSeq: number,\r\n        clientId: number,\r\n        start: number,\r\n        end: number,\r\n        accum?: LeafAction,\r\n    ) => (accum as LeafAction)(position, segment, start, end),\r\n};\r\n\r\nexport class FlowDocument extends Component {\r\n    public get ready() {\r\n        return this.readyDeferred.promise;\r\n    }\r\n\r\n    private get sharedString() { return this.maybeSharedString; }\r\n    private get mergeTree() { return this.maybeMergeTree; }\r\n    private get clientId() { return this.maybeClientId; }\r\n\r\n    public get length() {\r\n        return this.mergeTree.getLength(UniversalSequenceNumber, this.clientId);\r\n    }\r\n\r\n    public static readonly type = `${require(\"../package.json\").name}@${require(\"../package.json\").version}`;\r\n\r\n    public static markAsParagraph(marker: Marker) {\r\n        marker.properties = Object.assign(marker.properties || {}, FlowDocument.paragraphTileProperties);\r\n        return marker;\r\n    }\r\n    private static readonly paragraphTileProperties = { [reservedTileLabelsKey]: [DocSegmentKind.Paragraph] };\r\n    private static readonly lineBreakTileProperties = { [reservedTileLabelsKey]: [DocSegmentKind.LineBreak] };\r\n    private static readonly eofTileProperties       = { [reservedTileLabelsKey]: [DocSegmentKind.EOF] };\r\n\r\n    private maybeSharedString?: SharedString;\r\n    private maybeMergeTree?: MergeTree;\r\n    private maybeClientId?: number;\r\n    private readonly readyDeferred = new Deferred<void>();\r\n\r\n    constructor() {\r\n        super([\r\n            [MapExtension.Type, new MapExtension()],\r\n            [SharedStringExtension.Type, new SharedStringExtension()],\r\n        ]);\r\n    }\r\n\r\n    public async opened() {\r\n        this.maybeSharedString = await this.root.wait(\"text\") as SharedString;\r\n        this.maybeSharedString.on(\"op\", (op, local) => { this.emit(\"op\", op, local); });\r\n        const client = this.sharedString.client;\r\n        this.maybeClientId = client.getClientId();\r\n        this.maybeMergeTree = client.mergeTree;\r\n        this.readyDeferred.resolve();\r\n    }\r\n\r\n    public async getInclusionComponent(marker: Marker, services: ReadonlyArray<[string, Promise<any>]>) {\r\n        const store = await DataStore.from(marker.properties.serverUrl, \"anonymous-coward\");\r\n\r\n        // TODO: Component should record serverUrl, not rely on passed-through datastore instance?\r\n        return store.open(\r\n            marker.properties.docId,\r\n            marker.properties.chaincode,\r\n            \"\",\r\n            services.concat([[\"datastore\", Promise.resolve(store)]]));\r\n    }\r\n\r\n    public async getInclusionContainerComponent(marker: Marker, services: ReadonlyArray<[string, Promise<any>]>) {\r\n        await this.runtime.openComponent(marker.properties.docId, true, services);\r\n    }\r\n\r\n    public getSegmentAndOffset(position: number) {\r\n        return this.mergeTree.getContainingSegment(position, UniversalSequenceNumber, this.clientId);\r\n    }\r\n\r\n    public getPosition(segment: ISegment) {\r\n        return this.mergeTree.getOffset(segment, UniversalSequenceNumber, this.clientId);\r\n    }\r\n\r\n    public addLocalRef(position: number) {\r\n        const { segment, offset } = this.getSegmentAndOffset(position);\r\n        const localRef = new LocalReference(segment as BaseSegment, offset, ReferenceType.SlideOnRemove);\r\n        this.mergeTree.addLocalReference(localRef);\r\n        return localRef;\r\n    }\r\n\r\n    public removeLocalRef(localRef: LocalReference) {\r\n        this.mergeTree.removeLocalReference(localRef.getSegment(), localRef);\r\n    }\r\n\r\n    public localRefToPosition(localRef: LocalReference) {\r\n        return localRef.toPosition(this.mergeTree, UniversalSequenceNumber, this.clientId);\r\n    }\r\n\r\n    public appendText(text: string) {\r\n        this.sharedString.insertText(text, this.length);\r\n    }\r\n\r\n    public insertText(position: number, text: string) {\r\n        debug(`insertText(${position},\"${text}\")`);\r\n        this.sharedString.insertText(text, position);\r\n    }\r\n\r\n    public replaceWithText(start: number, end: number, text: string) {\r\n        debug(`replaceWithText(${start}, ${end}, \"${text}\")`);\r\n        this.sharedString.replaceText(start, end, text);\r\n    }\r\n\r\n    public remove(start: number, end: number) {\r\n        debug(`remove(${start},${end})`);\r\n        this.sharedString.removeText(start, end);\r\n    }\r\n\r\n    public insertParagraph(position: number) {\r\n        debug(`insertParagraph(${position})`);\r\n        this.sharedString.insertMarker(position, ReferenceType.Tile, FlowDocument.paragraphTileProperties);\r\n    }\r\n\r\n    public insertLineBreak(position: number) {\r\n        debug(`insertLineBreak(${position})`);\r\n        this.sharedString.insertMarker(position, ReferenceType.Tile, FlowDocument.lineBreakTileProperties);\r\n    }\r\n\r\n    public insertHTML(position: number, content: HTMLElement) {\r\n        this.sharedString.insertMarker(position, ReferenceType.Simple, { kind: InclusionKind.HTML, content: content.outerHTML });\r\n    }\r\n\r\n    public insertComponent(position: number, serverUrl: string, docId: string, chaincode?: string) {\r\n        const docInfo = { kind: InclusionKind.Chaincode, serverUrl, docId, chaincode };\r\n        this.sharedString.insertMarker(position, ReferenceType.Simple, docInfo);\r\n    }\r\n\r\n    public insertInclusionComponent(position: number, docId: string, pkg: string) {\r\n        const docInfo = { kind: InclusionKind.Component, docId };\r\n        this.sharedString.insertMarker(position, ReferenceType.Simple, docInfo);\r\n        this.runtime.createAndAttachComponent(docId, pkg);\r\n    }\r\n\r\n    public annotate(start: number, end: number, props: PropertySet) {\r\n        this.sharedString.annotateRange(props, start, end);\r\n    }\r\n\r\n    public findTile(startPos: number, tileType: string, preceding = true): { tile: ReferencePosition, pos: number } {\r\n        return this.mergeTree.findTile(startPos, this.clientId, tileType, preceding);\r\n    }\r\n\r\n    public findParagraphStart(position: number) {\r\n        position = Math.min(position, this.length - 1);\r\n        const maybePosAndTile = this.findTile(position, DocSegmentKind.Paragraph);\r\n        return maybePosAndTile ? maybePosAndTile.pos : 0;\r\n    }\r\n\r\n    public visitRange(callback: LeafAction, startPosition?: number, endPosition?: number) {\r\n        // Note: We pass the leaf callback action as the accumulator, and then use the 'accumAsLeafAction'\r\n        //       actions to invoke the accum for each leaf.  (Paranoid micro-optimization that attempts to\r\n        //       avoid allocation while simplifying the 'LeafAction' signature.)\r\n        this.mergeTree.mapRange(\r\n            /* actions: */ accumAsLeafAction,\r\n            UniversalSequenceNumber,\r\n            this.clientId,\r\n            /* accum: */ callback,\r\n            startPosition,\r\n            endPosition);\r\n    }\r\n\r\n    protected async create() {\r\n        // For 'findTile(..)', we must enable tracking of left/rightmost tiles:\r\n        // (See: https://github.com/Microsoft/Prague/pull/1118)\r\n        Object.assign(this.runtime, { options: Object.assign(this.runtime.options || {}, { blockUpdateMarkers: true }) });\r\n\r\n        const text = this.runtime.createChannel(\"text\", SharedStringExtension.Type) as SharedString;\r\n        text.insertMarker(0, ReferenceType.Tile, FlowDocument.eofTileProperties);\r\n        this.root.set(\"text\", text);\r\n    }\r\n}\r\n"]}