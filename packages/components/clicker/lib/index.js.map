{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { RootComponent, StockContainerRuntimeFactory } from \"@prague/aqueduct\";\r\nimport { ComponentRuntime } from \"@prague/component-runtime\";\r\nimport {\r\n  IContainerContext,\r\n  IRuntime,\r\n  IComponentHTMLViewable,\r\n  IRequest,\r\n  IHTMLView,\r\n  IComponent,\r\n} from \"@prague/container-definitions\";\r\nimport {\r\n  DistributedSetValueType,\r\n  MapExtension,\r\n  registerDefaultValueType,\r\n  ISharedMap,\r\n  CounterValueType,\r\n  Counter,\r\n} from \"@prague/map\";\r\nimport {\r\n  IComponentContext,\r\n  IComponentRuntime,\r\n} from \"@prague/runtime-definitions\";\r\nimport { ISharedObjectExtension } from \"@prague/shared-object-common\";\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nconst pkg = require(\"../package.json\");\r\nexport const ClickerName = pkg.name;\r\n\r\n/**\r\n * Basic Clicker example using new interfaces and stock component classes.\r\n */\r\nexport class Clicker extends RootComponent implements IComponentHTMLViewable {\r\n  private static SupportedInterfaces = [\"IComponentHTMLViewable\", \"IComponentRouter\"];\r\n\r\n  /**\r\n   * Do setup work here\r\n   */\r\n  protected async created() {\r\n    // This allows the RootComponent to do setup. In this case it creates the root map\r\n    await super.created();\r\n    this.root.set(\"clicks\", 0, CounterValueType.Name);\r\n  }\r\n\r\n  /**\r\n   * Static load function that allows us to make async calls while creating our object.\r\n   * This becomes the standard practice for creating components in the new world.\r\n   * Using a static allows us to have async calls in class creation that you can't have in a constructor\r\n   */\r\n  public static async load(runtime: IComponentRuntime, context: IComponentContext): Promise<Clicker> {\r\n    const clicker = new Clicker(runtime, context, Clicker.SupportedInterfaces);\r\n    await clicker.initialize();\r\n\r\n    return clicker;\r\n  }\r\n\r\n  // start IComponentHTMLViewable\r\n\r\n  /**\r\n   * Will return a new Clicker view\r\n   */\r\n  public async addView(host: IComponent): Promise<IHTMLView> {\r\n    // Get our counter object that we set in initialize and pass it in to the view.\r\n    const counter = this.root.get(\"clicks\");\r\n\r\n    const div = document.createElement(\"div\");\r\n    ReactDOM.render(\r\n      <CounterReactView map={this.root} counter={counter} />,\r\n      div\r\n    );\r\n\r\n    return div;\r\n  }\r\n\r\n  // end IComponentHTMLViewable\r\n}\r\n\r\n// ----- REACT STUFF -----\r\n\r\ninterface p {\r\n  map: ISharedMap,\r\n  counter: Counter,\r\n}\r\n\r\ninterface s {\r\n  value: number;\r\n}\r\n\r\nclass CounterReactView extends React.Component<p, s> {\r\n  constructor(props: p) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: this.props.counter.value\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // set a listener so when the counter increments we will update our state\r\n    // counter is annoying because it only allows you to register one listener.\r\n    // this causes problems when we have multiple views off the same counter.\r\n    // so we are listening to the map\r\n    this.props.map.on(\"valueChanged\", () => {\r\n      this.setState({ value: this.props.counter.value });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span>{this.state.value}</span><button onClick={() => { this.props.counter.increment(1) }}>+</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ----- COMPONENT SETUP STUFF -----\r\n\r\n/**\r\n * This is where we do component setup.\r\n */\r\nexport async function instantiateComponent(context: IComponentContext): Promise<IComponentRuntime> {\r\n  // Register default map value types (Register the DDS we care about)\r\n  // We need to register the Map and the Counter so we can create a root and a counter on that root\r\n  registerDefaultValueType(new DistributedSetValueType());\r\n  registerDefaultValueType(new CounterValueType());\r\n\r\n  const dataTypes = new Map<string, ISharedObjectExtension>();\r\n  dataTypes.set(MapExtension.Type, new MapExtension());\r\n\r\n  // Create a new runtime for our component\r\n  const runtime = await ComponentRuntime.load(context, dataTypes);\r\n\r\n  // Create a new instance of our component\r\n  const counterNewP = Clicker.load(runtime, context);\r\n\r\n  // Add a handler for the request() on our runtime to send it to our component\r\n  // This will define how requests to the runtime object we just created gets handled\r\n  // Here we want to simply defer those requests to our component\r\n  runtime.registerRequestHandler(async (request: IRequest) => {\r\n    const counter = await counterNewP;\r\n    return counter.request(request);\r\n  });\r\n\r\n  return runtime;\r\n}\r\n\r\n// ----- CONTAINER STUFF -----\r\n\r\n/**\r\n * This will get called by the Container as part of setup\r\n * We provide all the components we will care about as a registry.\r\n */\r\nexport async function instantiateRuntime(\r\n  context: IContainerContext\r\n): Promise<IRuntime> {\r\n  return StockContainerRuntimeFactory.instantiateRuntime(context, ClickerName, new Map([\r\n    [ClickerName, Promise.resolve({ instantiateComponent })]\r\n  ]));\r\n}\r\n"]}