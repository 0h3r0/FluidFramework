{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/text/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAA2B,MAAM,IAAI,CAAC;AAChE,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAEtC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI,EAAE,EAAC,CAAC,CAAC;AAS9E,MAAM,OAAO,QAAS,SAAQ,iBAA6C;IAGhE,QAAQ,CAAC,KAA2B;QACvC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9D,CAAC;IAEM,QAAQ,CAAC,KAA2B,EAAE,KAA+B;QACxE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,EAAE,EAC5B,4CAA4C,CAAC,CAAC;QAElD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,IAAI,EAAE;YACjC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC;QAE9B,gFAAgF;QAChF,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,UAAW,EAAE,CAAC;IACpD,CAAC;IAEM,UAAU,CAAC,KAA+B,IAAqB,CAAC;;AAtBhD,gBAAO,GAAG,GAAG,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC","sourcesContent":["import { Template } from \"@prague/flow-util\";\r\nimport { FlowViewComponent, IFlowViewComponentState } from \"..\";\r\nimport * as styles from \"./index.css\";\r\n\r\nconst template = new Template({ tag: \"p\", props: { className: styles.text }});\r\n\r\nexport interface ITextProps {\r\n    text: string;\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface ITextViewState extends IFlowViewComponentState { }\r\n\r\nexport class TextView extends FlowViewComponent<ITextProps, ITextViewState> {\r\n    public static readonly factory = () => new TextView();\r\n\r\n    public mounting(props: Readonly<ITextProps>): ITextViewState {\r\n        const root = template.clone();\r\n        return this.updating(props, { root, cursorTarget: root });\r\n    }\r\n\r\n    public updating(props: Readonly<ITextProps>, state: Readonly<ITextViewState>): ITextViewState {\r\n        console.assert(props.text !== \"\",\r\n            \"Should not emit a TextView for empty text.\");\r\n\r\n        const root = state.root;\r\n        if (root.textContent === props.text) {\r\n            return state;\r\n        }\r\n\r\n        root.textContent = props.text;\r\n\r\n        // Note: As long as textContent is not empty, the <span> must have a firstChild.\r\n        return { root, cursorTarget: root.firstChild! };\r\n    }\r\n\r\n    public unmounting(state: Readonly<ITextViewState>) { /* do nothing */ }\r\n}\r\n"]}