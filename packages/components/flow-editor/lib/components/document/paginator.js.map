{"version":3,"file":"paginator.js","sourceRoot":"","sources":["../../../src/components/document/paginator.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAExC,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEpC,MAAM,OAAO,SAAS;IAIlB,YAA6B,GAAiB;QAAjB,QAAG,GAAH,GAAG,CAAc;QAHvC,kBAAa,GAAG,CAAC,CAAC;QAClB,WAAM,GAAG,CAAC,CAAC;QAID,cAAS,GAAG,CAAC,IAAU,EAAE,UAAkB,EAAE,EAAE;YAC5D,KAAK,CAAC,eAAe,IAAI,CAAC,WAAW,KAAK,UAAU,EAAE,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAEnD,0FAA0F;YAC1F,+BAA+B;YAC/B,IAAI,MAAM,EAAE;gBACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;gBACzB,KAAK,CAAC,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;aAChC;QACL,CAAC,CAAA;IAZgD,CAAC;IAclD,IAAW,qBAAqB;QAC5B,iEAAiE;QACjE,MAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3E,OAAO,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,IAAW,gBAAgB;QACvB,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IACxE,CAAC;IAED,IAAW,cAAc;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { FlowDocument } from \"@chaincode/flow-document\";\r\nimport { Dom } from \"@prague/flow-util\";\r\nimport { ITrackedPosition } from \".\";\r\nimport { debug } from \"../../debug\";\r\n\r\nexport class Paginator {\r\n    public startPosition = 0;\r\n    public deltaY = 0;\r\n\r\n    constructor(private readonly doc: FlowDocument) {}\r\n\r\n    private readonly foundLine = (node: Node, nodeOffset: number) => {\r\n        debug(`scroll to: \"${node.textContent}\":${nodeOffset}`);\r\n        const bounds = Dom.getClientRect(node, nodeOffset);\r\n\r\n        // 'bounds' can be undefined if the position corresponds to a zero-sized node, such as the\r\n        // <span> inserted to mark EOF.\r\n        if (bounds) {\r\n            this.deltaY = bounds.top;\r\n            debug(`  -> ${this.deltaY}`);\r\n        }\r\n    }\r\n\r\n    public get startingBlockPosition() {\r\n        // Returns 'undefined' if there is no preceding paragraph marker.\r\n        const startBlockPosition = this.doc.findParagraphStart(this.startPosition);\r\n        return startBlockPosition ? startBlockPosition : 0;\r\n    }\r\n\r\n    public get trackedPositions(): ITrackedPosition[] {\r\n        return [{ callback: this.foundLine, position: this.startPosition }];\r\n    }\r\n\r\n    public get shouldContinue(): boolean {\r\n        return true;\r\n    }\r\n}\r\n"]}