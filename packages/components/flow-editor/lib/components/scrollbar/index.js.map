{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/scrollbar/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Template } from \"@prague/flow-util\";\r\nimport { IViewState, View } from \"..\";\r\nimport { debug } from \"../../debug\";\r\nimport * as styles from \"./index.css\";\r\n\r\nconst template = new Template({\r\n    tag: \"div\",\r\n    children: [{\r\n        tag: \"div\",\r\n        ref: \"content\",\r\n        props: { className: styles.scrollbarContent },\r\n    }],\r\n});\r\n\r\nexport enum ScrollbarOrientation {\r\n    Horizontal = 0,\r\n    Vertical = 1,\r\n}\r\n\r\nconst orientationToClass = [\r\n    styles.scrollbarHorizontal,\r\n    styles.scrollbarVertical,\r\n];\r\n\r\nexport interface IScrollBarProps {\r\n    orientation: ScrollbarOrientation;\r\n    min: number;\r\n    max: number;\r\n    onScroll?: (value: number) => void;\r\n}\r\n\r\nexport interface IScrollBarViewState extends IViewState {\r\n    readonly root: HTMLElement;\r\n    readonly content: HTMLElement;\r\n    onScroll?: (value: number) => void;\r\n    onScrollRaw?: EventListener;\r\n}\r\n\r\nexport class ScrollbarView extends View<IScrollBarProps, IScrollBarViewState> {\r\n    public static readonly factory = () => new ScrollbarView();\r\n\r\n    public mounting(props: Readonly<IScrollBarProps>): IScrollBarViewState {\r\n        const root = template.clone() as HTMLElement;\r\n        const content = template.get(root, \"content\") as HTMLElement;\r\n\r\n        return this.updating(props, { root, content });\r\n    }\r\n\r\n    public updating(props: Readonly<IScrollBarProps>, state: Readonly<IScrollBarViewState>): IScrollBarViewState {\r\n        const root = state.root;\r\n        root.className = orientationToClass[props.orientation];\r\n\r\n        if (state.onScrollRaw) {\r\n            state.root.removeEventListener(\"scroll\", state.onScrollRaw);\r\n        }\r\n\r\n        let onScrollRaw: undefined | (() => void);\r\n        if (props.onScroll) {\r\n            onScrollRaw =\r\n                props.orientation === ScrollbarOrientation.Vertical\r\n                    ? () => this.onScrollVert(state)\r\n                    : () => this.onScrollHoriz(state);\r\n\r\n            state.root.addEventListener(\"scroll\", onScrollRaw);\r\n        }\r\n\r\n        Object.assign(state, { onScroll: props.onScroll, onScrollRaw });\r\n\r\n        const bounds = state.root.getBoundingClientRect();\r\n        const content = state.content;\r\n\r\n        if (props.orientation === ScrollbarOrientation.Horizontal) {\r\n            content.style.width = this.adjust(props, bounds.width);\r\n            content.style.height = \"0px\";\r\n        } else if (props.orientation === ScrollbarOrientation.Vertical) {\r\n            content.style.width = \"0px\";\r\n            content.style.height = this.adjust(props, bounds.height);\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    public unmounting(state: Readonly<IScrollBarViewState>) {\r\n        if (state.onScrollRaw) {\r\n            state.root.removeEventListener(\"scroll\", state.onScrollRaw);\r\n        }\r\n    }\r\n\r\n    private adjust(props: IScrollBarProps, length: number) {\r\n        const delta = props.max - props.min;\r\n        const size = length + delta;\r\n        return `${size}px`;\r\n    }\r\n\r\n    private readonly onScrollVert = (state: Readonly<IScrollBarViewState>) => this.fireOnScroll(state, state.root.scrollTop);\r\n    private readonly onScrollHoriz = (state: Readonly<IScrollBarViewState>) => this.fireOnScroll(state, state.root.scrollLeft);\r\n\r\n    private readonly fireOnScroll = (state: Readonly<IScrollBarViewState>, value: number) => {\r\n        value = Math.round(value);\r\n        debug(`scrollbar: ${value}`);\r\n        state.onScroll!(value);\r\n    }\r\n}\r\n"]}