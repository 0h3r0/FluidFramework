{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/inclusion/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAA2B,MAAM,IAAI,CAAC;AAChE,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAEtC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC;IAC1B,GAAG,EAAE,MAAM;IACX,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE;CACzC,CAAC,CAAC;AAOH,qFAAqF;AACrF,0GAA0G;AAC1G,MAAM,cAAc,GAAG,2BAA2B,CAAC;AAEnD,qFAAqF;AACrF,MAAM,kBAAkB,GAAG,CAAC,CAAQ,EAAE,EAAE;IACnC,CAAS,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;AACtC,CAAC,CAAC;AAEF,wDAAwD;AACxD,MAAM,MAAM,GAAa;IACrB,WAAW,EAAE,SAAS,EAAE,UAAU;CACrC,CAAC;AAEF;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,CAAQ;IACtC,OAAQ,CAAS,CAAC,cAAc,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,OAAO,aAAc,SAAQ,iBAAuD;IAG/E,QAAQ,CAAC,KAAgC;QAC5C,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QAE9B,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;SACnD;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;IACrE,CAAC;IAEM,QAAQ,CAAC,KAAgC,EAAE,KAAoC;QAClF,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACxB,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;QAEjC,IAAI,IAAI,CAAC,UAAU,KAAK,YAAY,EAAE;YAClC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAC1C,KAAK,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC;SAChD;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,UAAU,CAAC,KAAoC;QAClD,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;YACvB,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;SAC5D;IACL,CAAC;;AA5BsB,qBAAO,GAAG,GAAG,EAAE,CAAC,IAAI,aAAa,EAAE,CAAC","sourcesContent":["import { Dom, Template } from \"@prague/flow-util\";\r\nimport { FlowViewComponent, IFlowViewComponentState } from \"..\";\r\nimport * as styles from \"./index.css\";\r\n\r\nconst template = new Template({\r\n    tag: \"span\",\r\n    props: { className: styles.inclusion },\r\n});\r\n\r\nexport interface IInclusionProps { child: Node; }\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface IInclusionViewState extends IFlowViewComponentState { }\r\n\r\n// TODO: This can not yet be made a Symbol due to multiple/recursive WebPack bundles.\r\n//       'unique symbol' should work, but isn't yet universally supported (e.g., breaks tests on Node v8).\r\nconst ignoreEventSym = \"InclusionView.ignoreEvent\";\r\n\r\n// Reusable event handler used to mark events has having bubbled out of an inclusion.\r\nconst markInclusionEvent = (e: Event) => {\r\n    (e as any)[ignoreEventSym] = true;\r\n};\r\n\r\n// List of events that the FlowEditor may try to hijack.\r\nconst events: string[] = [\r\n    \"mousedown\", \"keydown\", \"keypress\",\r\n];\r\n\r\n/**\r\n * Returns true if the given event has bubbled up from an inclusion.  Used by FlowEditor to avoid\r\n * hijacking events that should bubble to document/window for default action or dispatch by synthetic\r\n * event handlers (e.g., React).\r\n */\r\nexport function shouldIgnoreEvent(e: Event): true | undefined {\r\n    return (e as any)[ignoreEventSym];\r\n}\r\n\r\nexport class InclusionView extends FlowViewComponent<IInclusionProps, IInclusionViewState> {\r\n    public static readonly factory = () => new InclusionView();\r\n\r\n    public mounting(props: Readonly<IInclusionProps>): IInclusionViewState {\r\n        const root = template.clone();\r\n\r\n        for (const type of events) {\r\n            root.addEventListener(type, markInclusionEvent);\r\n        }\r\n\r\n        return this.updating(props, { root, cursorTarget: props.child });\r\n    }\r\n\r\n    public updating(props: Readonly<IInclusionProps>, state: Readonly<IInclusionViewState>): IInclusionViewState {\r\n        const root = state.root;\r\n        const desiredChild = props.child;\r\n\r\n        if (root.firstChild !== desiredChild) {\r\n            Dom.replaceFirstChild(root, desiredChild);\r\n            state = { root, cursorTarget: desiredChild };\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    public unmounting(state: Readonly<IInclusionViewState>) {\r\n        for (const type of events) {\r\n            state.root.removeEventListener(type, markInclusionEvent);\r\n        }\r\n    }\r\n}\r\n"]}